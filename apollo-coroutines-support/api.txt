// Signature format: 3.0
package com.apollographql.apollo.coroutines {

  public final class CoroutinesExtensionsKt {
    method public static suspend <D extends com.apollographql.apollo.api.Operation.Data> Object? await(com.apollographql.apollo.ApolloCall<D>, kotlin.coroutines.Continuation<? super com.apollographql.apollo.api.Response<D>> p);
    method public static suspend Object? await(com.apollographql.apollo.ApolloPrefetch, kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method @Deprecated public static <D extends com.apollographql.apollo.api.Operation.Data> kotlinx.coroutines.Deferred<com.apollographql.apollo.api.Response<D>> toDeferred(com.apollographql.apollo.ApolloCall<D>);
    method @kotlinx.coroutines.ExperimentalCoroutinesApi public static <D extends com.apollographql.apollo.api.Operation.Data> kotlinx.coroutines.flow.Flow<com.apollographql.apollo.api.Response<D>> toFlow(com.apollographql.apollo.ApolloCall<D>);
    method @kotlinx.coroutines.ExperimentalCoroutinesApi public static <D extends com.apollographql.apollo.api.Operation.Data> kotlinx.coroutines.flow.Flow<com.apollographql.apollo.api.Response<D>> toFlow(com.apollographql.apollo.ApolloQueryWatcher<D>);
    method @kotlinx.coroutines.ExperimentalCoroutinesApi public static <D extends com.apollographql.apollo.api.Operation.Data> kotlinx.coroutines.flow.Flow<com.apollographql.apollo.api.Response<D>> toFlow(com.apollographql.apollo.ApolloSubscriptionCall<D>);
    method @Deprecated public static kotlinx.coroutines.Job toJob(com.apollographql.apollo.ApolloPrefetch);
  }

}

