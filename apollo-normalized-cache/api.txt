// Signature format: 4.0
package com.apollographql.apollo.cache.normalized {

  public interface ApolloStore {
    method public com.apollographql.apollo.cache.normalized.CacheKeyResolver cacheKeyResolver();
    method public com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer<com.apollographql.apollo.cache.normalized.Record> cacheResponseNormalizer();
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> clearAll();
    method public com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer<java.util.Map<java.lang.String,java.lang.Object>> networkResponseNormalizer();
    method public com.apollographql.apollo.cache.normalized.NormalizedCache normalizedCache();
    method public void publish(java.util.Set<java.lang.String> keys);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<T> read(com.apollographql.apollo.api.Operation<D,T,V> operation);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<com.apollographql.apollo.api.Response<T>> read(com.apollographql.apollo.api.Operation<D,T,V> operation, com.apollographql.apollo.api.internal.ResponseFieldMapper<D> responseFieldMapper, com.apollographql.apollo.cache.normalized.internal.ResponseNormalizer<com.apollographql.apollo.cache.normalized.Record> responseNormalizer, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public <F extends com.apollographql.apollo.api.GraphqlFragment> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<F> read(com.apollographql.apollo.api.internal.ResponseFieldMapper<F> fieldMapper, com.apollographql.apollo.cache.normalized.CacheKey cacheKey, com.apollographql.apollo.api.Operation.Variables variables);
    method public <R> R! readTransaction(com.apollographql.apollo.cache.normalized.internal.Transaction<com.apollographql.apollo.cache.normalized.internal.ReadableStore,R> transaction);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey, boolean cascade);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Integer> remove(java.util.List<com.apollographql.apollo.cache.normalized.CacheKey> cacheKeys);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.util.Set<java.lang.String>> rollbackOptimisticUpdates(error.NonExistentClass mutationId);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> rollbackOptimisticUpdatesAndPublish(error.NonExistentClass mutationId);
    method public void subscribe(com.apollographql.apollo.cache.normalized.ApolloStore.RecordChangeSubscriber subscriber);
    method public void unsubscribe(com.apollographql.apollo.cache.normalized.ApolloStore.RecordChangeSubscriber subscriber);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.util.Set<java.lang.String>> write(com.apollographql.apollo.api.Operation<D,T,V> operation, D operationData);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.util.Set<java.lang.String>> write(com.apollographql.apollo.api.GraphqlFragment fragment, com.apollographql.apollo.cache.normalized.CacheKey cacheKey, com.apollographql.apollo.api.Operation.Variables variables);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> writeAndPublish(com.apollographql.apollo.api.Operation<D,T,V> operation, D operationData);
    method public com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> writeAndPublish(com.apollographql.apollo.api.GraphqlFragment fragment, com.apollographql.apollo.cache.normalized.CacheKey cacheKey, com.apollographql.apollo.api.Operation.Variables variables);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.util.Set<java.lang.String>> writeOptimisticUpdates(com.apollographql.apollo.api.Operation<D,T,V> operation, D operationData, error.NonExistentClass mutationId);
    method public <D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<java.lang.Boolean> writeOptimisticUpdatesAndPublish(com.apollographql.apollo.api.Operation<D,T,V> operation, D operationData, error.NonExistentClass mutationId);
    method public <R> R! writeTransaction(com.apollographql.apollo.cache.normalized.internal.Transaction<com.apollographql.apollo.cache.normalized.internal.WriteableStore,R> transaction);
    field public static final com.apollographql.apollo.cache.normalized.ApolloStore.Companion Companion;
    field public static final com.apollographql.apollo.cache.normalized.ApolloStore NO_APOLLO_STORE;
  }

  public static final class ApolloStore.Companion {
  }

  public static interface ApolloStore.RecordChangeSubscriber {
    method public void onCacheRecordsChanged(java.util.Set<java.lang.String> changedRecordKeys);
  }

  public abstract class ApolloStoreOperation<T> {
    ctor protected ApolloStoreOperation(error.NonExistentClass dispatcher);
    method public static final error.NonExistentClass! emptyExecutor();
    method public static final <T> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<T> emptyOperation(T? result);
    method public void enqueue(com.apollographql.apollo.cache.normalized.ApolloStoreOperation.Callback<T>? callback);
    method @kotlin.jvm.Throws(exceptionClasses=ApolloException::class) public final T! execute() throws com.apollographql.apollo.exception.ApolloException;
    method public final void notifyFailure(Throwable t);
    method public final void notifySuccess(T? result);
    method protected abstract T! perform();
    field public static final com.apollographql.apollo.cache.normalized.ApolloStoreOperation.Companion Companion;
  }

  public static interface ApolloStoreOperation.Callback<T> {
    method public void onFailure(Throwable t);
    method public void onSuccess(T? result);
  }

  public static final class ApolloStoreOperation.Companion {
    method public error.NonExistentClass! emptyExecutor();
    method public <T> com.apollographql.apollo.cache.normalized.ApolloStoreOperation<T> emptyOperation(T? result);
  }

  public final class OptimisticNormalizedCache extends com.apollographql.apollo.cache.normalized.NormalizedCache {
    ctor public OptimisticNormalizedCache();
    method public void clearAll();
    method public com.apollographql.apollo.cache.normalized.Record? loadRecord(String key, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public java.util.Set<java.lang.String> mergeOptimisticUpdate(com.apollographql.apollo.cache.normalized.Record record);
    method public java.util.Set<java.lang.String> mergeOptimisticUpdates(java.util.Collection<com.apollographql.apollo.cache.normalized.Record> recordSet);
    method protected java.util.Set<java.lang.String> performMerge(com.apollographql.apollo.cache.normalized.Record apolloRecord, com.apollographql.apollo.cache.normalized.Record? oldRecord, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public boolean remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey, boolean cascade);
    method public java.util.Set<java.lang.String> removeOptimisticUpdates(error.NonExistentClass mutationId);
  }

}

package com.apollographql.apollo.cache.normalized.lru {

  public final class EvictionPolicy {
    method public static com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder builder();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<java.lang.Long> expireAfterAccess();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<error.NonExistentClass> expireAfterAccessTimeUnit();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<java.lang.Long> expireAfterWrite();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<error.NonExistentClass> expireAfterWriteTimeUnit();
    method public Long? getExpireAfterAccess();
    method public error.NonExistentClass? getExpireAfterAccessTimeUnit();
    method public Long? getExpireAfterWrite();
    method public error.NonExistentClass? getExpireAfterWriteTimeUnit();
    method public Long? getMaxEntries();
    method public Long? getMaxSizeBytes();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<java.lang.Long> maxEntries();
    method @Deprecated public com.apollographql.apollo.api.internal.Optional<java.lang.Long> maxSizeBytes();
    property public final Long? expireAfterAccess;
    property public final error.NonExistentClass? expireAfterAccessTimeUnit;
    property public final Long? expireAfterWrite;
    property public final error.NonExistentClass? expireAfterWriteTimeUnit;
    property public final Long? maxEntries;
    property public final Long? maxSizeBytes;
    field public static final com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Companion Companion;
    field public static final com.apollographql.apollo.cache.normalized.lru.EvictionPolicy NO_EVICTION;
  }

  public static final class EvictionPolicy.Builder {
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy build();
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder expireAfterAccess(long time, error.NonExistentClass timeUnit);
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder expireAfterWrite(long time, error.NonExistentClass timeUnit);
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder maxEntries(long maxEntries);
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder maxSizeBytes(long maxSizeBytes);
  }

  public static final class EvictionPolicy.Companion {
    method public com.apollographql.apollo.cache.normalized.lru.EvictionPolicy.Builder builder();
  }

  public final class LruNormalizedCache extends com.apollographql.apollo.cache.normalized.NormalizedCache {
    method public void clearAll();
    method public com.apollographql.apollo.cache.normalized.Record? loadRecord(String key, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method protected java.util.Set<java.lang.String> performMerge(com.apollographql.apollo.cache.normalized.Record apolloRecord, com.apollographql.apollo.cache.normalized.Record? oldRecord, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public boolean remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey, boolean cascade);
  }

  public final class LruNormalizedCacheFactory extends com.apollographql.apollo.cache.normalized.NormalizedCacheFactory<com.apollographql.apollo.cache.normalized.lru.LruNormalizedCache> {
    ctor public LruNormalizedCacheFactory(com.apollographql.apollo.cache.normalized.lru.EvictionPolicy evictionPolicy);
    method public com.apollographql.apollo.cache.normalized.lru.LruNormalizedCache create(com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter recordFieldAdapter);
  }

}

