// Signature format: 4.0
package com.apollographql.apollo.api.cache.http {

  public interface HttpCache {
    method public void clear();
    method public okhttp3.Interceptor interceptor();
    method public okhttp3.Response? read(String cacheKey);
    method public okhttp3.Response? read(String cacheKey, boolean expireAfterRead);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void remove(String cacheKey) throws java.io.IOException;
    method public void removeQuietly(String cacheKey);
    field public static final String CACHE_DO_NOT_STORE = "X-APOLLO-CACHE-DO-NOT-STORE";
    field public static final String CACHE_EXPIRE_AFTER_READ_HEADER = "X-APOLLO-EXPIRE-AFTER-READ";
    field public static final String CACHE_EXPIRE_TIMEOUT_HEADER = "X-APOLLO-EXPIRE-TIMEOUT";
    field public static final String CACHE_FETCH_STRATEGY_HEADER = "X-APOLLO-CACHE-FETCH-STRATEGY";
    field public static final String CACHE_KEY_HEADER = "X-APOLLO-CACHE-KEY";
    field public static final String CACHE_PREFETCH_HEADER = "X-APOLLO-PREFETCH";
    field public static final String CACHE_SERVED_DATE_HEADER = "X-APOLLO-SERVED-DATE";
    field public static final com.apollographql.apollo.api.cache.http.HttpCache.Companion Companion;
    field public static final String FROM_CACHE = "X-APOLLO-FROM-CACHE";
  }

  public static final class HttpCache.Companion {
    field public static final String CACHE_DO_NOT_STORE = "X-APOLLO-CACHE-DO-NOT-STORE";
    field public static final String CACHE_EXPIRE_AFTER_READ_HEADER = "X-APOLLO-EXPIRE-AFTER-READ";
    field public static final String CACHE_EXPIRE_TIMEOUT_HEADER = "X-APOLLO-EXPIRE-TIMEOUT";
    field public static final String CACHE_FETCH_STRATEGY_HEADER = "X-APOLLO-CACHE-FETCH-STRATEGY";
    field public static final String CACHE_KEY_HEADER = "X-APOLLO-CACHE-KEY";
    field public static final String CACHE_PREFETCH_HEADER = "X-APOLLO-PREFETCH";
    field public static final String CACHE_SERVED_DATE_HEADER = "X-APOLLO-SERVED-DATE";
    field public static final String FROM_CACHE = "X-APOLLO-FROM-CACHE";
  }

  public final class HttpCachePolicy {
    field public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.ExpirePolicy CACHE_FIRST;
    field public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.ExpirePolicy CACHE_ONLY;
    field public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy INSTANCE;
    field public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.ExpirePolicy NETWORK_FIRST;
    field public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.Policy NETWORK_ONLY;
  }

  public static final class HttpCachePolicy.ExpirePolicy extends com.apollographql.apollo.api.cache.http.HttpCachePolicy.Policy {
    method public com.apollographql.apollo.api.cache.http.HttpCachePolicy.ExpirePolicy expireAfter(long expireTimeout, java.util.concurrent.TimeUnit expireTimeUnit);
    method public com.apollographql.apollo.api.cache.http.HttpCachePolicy.ExpirePolicy expireAfterRead();
  }

  public enum HttpCachePolicy.FetchStrategy {
    enum_constant public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy CACHE_FIRST;
    enum_constant public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy CACHE_ONLY;
    enum_constant public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy NETWORK_FIRST;
    enum_constant public static final com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy NETWORK_ONLY;
  }

  public static class HttpCachePolicy.Policy {
    ctor public HttpCachePolicy.Policy(com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy fetchStrategy, long expireTimeout, java.util.concurrent.TimeUnit? expireTimeUnit, boolean expireAfterRead);
    method public final long expireTimeoutMs();
    field public final boolean expireAfterRead;
    field public final java.util.concurrent.TimeUnit? expireTimeUnit;
    field public final long expireTimeout;
    field public final com.apollographql.apollo.api.cache.http.HttpCachePolicy.FetchStrategy fetchStrategy;
  }

  public interface HttpCacheRecord {
    method public okio.Source bodySource();
    method public void close();
    method public okio.Source headerSource();
  }

  public interface HttpCacheRecordEditor {
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void abort() throws java.io.IOException;
    method public okio.Sink bodySink();
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void commit() throws java.io.IOException;
    method public okio.Sink headerSink();
  }

  public interface HttpCacheStore {
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.apollographql.apollo.api.cache.http.HttpCacheRecord? cacheRecord(String cacheKey) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.apollographql.apollo.api.cache.http.HttpCacheRecordEditor? cacheRecordEditor(String cacheKey) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void delete() throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public void remove(String cacheKey) throws java.io.IOException;
  }

}

