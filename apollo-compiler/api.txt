package com.apollographql.android {

  public final class VersionKt {
    ctor public VersionKt();
    method public static java.lang.String getVERSION();
  }

}

package com.apollographql.apollo.compiler {

  public final class Annotations {
    method public error.NonExistentClass getDEPRECATED();
    method public error.NonExistentClass getNONNULL();
    method public error.NonExistentClass getNULLABLE();
    method public error.NonExistentClass getOVERRIDE();
    method public error.NonExistentClass getSUPPRESS_RAW_VALUE_AND_UNCHECKED_WARNING();
    method public error.NonExistentClass getSUPPRESS_RAW_VALUE_WARNING();
    method public error.NonExistentClass getSUPPRESS_UNCHECKED_WARNING();
    property public final error.NonExistentClass DEPRECATED;
    property public final error.NonExistentClass NONNULL;
    property public final error.NonExistentClass NULLABLE;
    property public final error.NonExistentClass OVERRIDE;
    property public final error.NonExistentClass SUPPRESS_RAW_VALUE_AND_UNCHECKED_WARNING;
    property public final error.NonExistentClass SUPPRESS_RAW_VALUE_WARNING;
    property public final error.NonExistentClass SUPPRESS_UNCHECKED_WARNING;
    field public static final com.apollographql.apollo.compiler.Annotations INSTANCE;
  }

  public final class BuilderTypeSpecBuilder {
    ctor public BuilderTypeSpecBuilder(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass build();
    method public error.NonExistentClass getBuildableTypes();
    method public error.NonExistentClass getFieldDefaultValues();
    method public error.NonExistentClass getFieldJavaDocs();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getTargetObjectClassName();
    method public error.NonExistentClass getTypeDeclarations();
    field public static final com.apollographql.apollo.compiler.BuilderTypeSpecBuilder.Companion Companion;
    field public static final java.lang.String TO_BUILDER_METHOD_NAME = "toBuilder";
  }

  public static final class BuilderTypeSpecBuilder.Companion {
    method public error.NonExistentClass builderFactoryMethod();
  }

  public final class ClassNames {
    method public error.NonExistentClass getAPI_UTILS();
    method public error.NonExistentClass getARRAY_LIST();
    method public error.NonExistentClass getBUILDER();
    method public error.NonExistentClass getFRAGMENT();
    method public error.NonExistentClass getGRAPHQL_MUTATION();
    method public error.NonExistentClass getGRAPHQL_OPERATION();
    method public error.NonExistentClass getGRAPHQL_OPERATION_VARIABLES();
    method public error.NonExistentClass getGRAPHQL_QUERY();
    method public error.NonExistentClass getGRAPHQL_SUBSCRIPTION();
    method public error.NonExistentClass getGUAVA_OPTIONAL();
    method public error.NonExistentClass getHASH_MAP();
    method public error.NonExistentClass getINPUT();
    method public error.NonExistentClass getINPUT_TYPE();
    method public error.NonExistentClass getJAVA_OPTIONAL();
    method public error.NonExistentClass getLIST();
    method public error.NonExistentClass getMAP();
    method public error.NonExistentClass getMUTATOR();
    method public error.NonExistentClass getOBJECT();
    method public error.NonExistentClass getOPTIONAL();
    method public error.NonExistentClass getSTRING();
    method public error.NonExistentClass getUNMODIFIABLE_MAP_BUILDER();
    method public error.NonExistentClass parameterizedGuavaOptional(error.NonExistentClass);
    method public <K, V> error.NonExistentClass parameterizedHashMapOf(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass parameterizedInputType(error.NonExistentClass);
    method public error.NonExistentClass parameterizedJavaOptional(error.NonExistentClass);
    method public <K> error.NonExistentClass parameterizedListOf(error.NonExistentClass);
    method public error.NonExistentClass parameterizedListOf(error.NonExistentClass);
    method public <K, V> error.NonExistentClass parameterizedMapOf(error.NonExistentClass, error.NonExistentClass);
    method public <K> error.NonExistentClass parameterizedOptional(error.NonExistentClass);
    method public error.NonExistentClass parameterizedOptional(error.NonExistentClass);
    method public <K, V> error.NonExistentClass parameterizedUnmodifiableMapBuilderOf(error.NonExistentClass, error.NonExistentClass);
    property public final error.NonExistentClass API_UTILS;
    property public final error.NonExistentClass ARRAY_LIST;
    property public final error.NonExistentClass BUILDER;
    property public final error.NonExistentClass FRAGMENT;
    property public final error.NonExistentClass GRAPHQL_MUTATION;
    property public final error.NonExistentClass GRAPHQL_OPERATION;
    property public final error.NonExistentClass GRAPHQL_OPERATION_VARIABLES;
    property public final error.NonExistentClass GRAPHQL_QUERY;
    property public final error.NonExistentClass GRAPHQL_SUBSCRIPTION;
    property public final error.NonExistentClass GUAVA_OPTIONAL;
    property public final error.NonExistentClass HASH_MAP;
    property public final error.NonExistentClass INPUT;
    property public final error.NonExistentClass INPUT_TYPE;
    property public final error.NonExistentClass JAVA_OPTIONAL;
    property public final error.NonExistentClass LIST;
    property public final error.NonExistentClass MAP;
    property public final error.NonExistentClass MUTATOR;
    property public final error.NonExistentClass OBJECT;
    property public final error.NonExistentClass OPTIONAL;
    property public final error.NonExistentClass STRING;
    property public final error.NonExistentClass UNMODIFIABLE_MAP_BUILDER;
    field public static final com.apollographql.apollo.compiler.ClassNames INSTANCE;
  }

  public final class CustomEnumTypeSpecBuilder {
    ctor public CustomEnumTypeSpecBuilder(com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass build();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext getContext();
    field public static final com.apollographql.apollo.compiler.CustomEnumTypeSpecBuilder.Companion Companion;
  }

  public static final class CustomEnumTypeSpecBuilder.Companion {
    method public error.NonExistentClass className(com.apollographql.apollo.compiler.ir.CodeGenerationContext);
  }

  public final class DefaultPackageNameProvider implements com.apollographql.apollo.compiler.PackageNameProvider {
    ctor public DefaultPackageNameProvider(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass filePackageName(error.NonExistentClass);
    method public error.NonExistentClass getFragmentsPackageName();
    method public error.NonExistentClass getTypesPackageName();
    method public error.NonExistentClass operationPackageName(error.NonExistentClass);
    property public error.NonExistentClass fragmentsPackageName;
    property public error.NonExistentClass typesPackageName;
  }

  public final class DefaultPackageNameProviderKt {
    ctor public DefaultPackageNameProviderKt();
    method public static error.NonExistentClass appendPackageName(error.NonExistentClass, error.NonExistentClass);
  }

  public final class FragmentsResponseMapperBuilder {
    ctor public FragmentsResponseMapperBuilder(error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass build();
    field public static final com.apollographql.apollo.compiler.FragmentsResponseMapperBuilder.Companion Companion;
  }

  public static final class FragmentsResponseMapperBuilder.Companion {
  }

  public final class GraphQLCompiler {
    ctor public GraphQLCompiler();
    method public void write(com.apollographql.apollo.compiler.GraphQLCompiler.Arguments);
    field public static final com.apollographql.apollo.compiler.GraphQLCompiler.Companion Companion;
  }

  public static final class GraphQLCompiler.Arguments {
    ctor public GraphQLCompiler.Arguments(com.apollographql.apollo.compiler.ir.CodeGenerationIR, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.OperationIdGenerator, error.NonExistentClass, com.apollographql.apollo.compiler.PackageNameProvider, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.NullableValueType, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR component1();
    method public error.NonExistentClass component10();
    method public com.apollographql.apollo.compiler.NullableValueType component11();
    method public error.NonExistentClass component12();
    method public error.NonExistentClass component13();
    method public error.NonExistentClass component14();
    method public error.NonExistentClass component15();
    method public error.NonExistentClass component16();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.OperationIdGenerator component4();
    method public error.NonExistentClass component5();
    method public com.apollographql.apollo.compiler.PackageNameProvider component6();
    method public error.NonExistentClass component7();
    method public error.NonExistentClass component8();
    method public error.NonExistentClass component9();
    method public com.apollographql.apollo.compiler.GraphQLCompiler.Arguments copy(com.apollographql.apollo.compiler.ir.CodeGenerationIR, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.OperationIdGenerator, error.NonExistentClass, com.apollographql.apollo.compiler.PackageNameProvider, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.NullableValueType, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getCustomTypeMap();
    method public error.NonExistentClass getEnumAsSealedClassPatternFilters();
    method public error.NonExistentClass getGenerateAsInternal();
    method public error.NonExistentClass getGenerateKotlinModels();
    method public error.NonExistentClass getGenerateModelBuilder();
    method public error.NonExistentClass getGenerateVisitorForPolymorphicDatatypes();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR getIr();
    method public error.NonExistentClass getKotlinMultiPlatformProject();
    method public com.apollographql.apollo.compiler.NullableValueType getNullableValueType();
    method public com.apollographql.apollo.compiler.OperationIdGenerator getOperationIdGenerator();
    method public error.NonExistentClass getOperationOutputFile();
    method public error.NonExistentClass getOutputDir();
    method public com.apollographql.apollo.compiler.PackageNameProvider getPackageNameProvider();
    method public error.NonExistentClass getSuppressRawTypesWarning();
    method public error.NonExistentClass getUseJavaBeansSemanticNaming();
    method public error.NonExistentClass getUseSemanticNaming();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphQLCompiler.Companion {
  }

  public final class InflectorKt {
    ctor public InflectorKt();
    method public static error.NonExistentClass singularize(error.NonExistentClass);
  }

  public final class InputFieldSpec {
    ctor public InputFieldSpec(com.apollographql.apollo.compiler.InputFieldSpec.Type, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext getContext();
    method public error.NonExistentClass getGraphQLType();
    method public error.NonExistentClass getJavaType();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.InputFieldSpec.Type getType();
    method public error.NonExistentClass writeValueCode(error.NonExistentClass, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.InputFieldSpec.Companion Companion;
  }

  public static final class InputFieldSpec.Companion {
    method public com.apollographql.apollo.compiler.InputFieldSpec build(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext, com.apollographql.apollo.compiler.NullableValueType);
  }

  public static class InputFieldSpec.Type {
    method public static com.apollographql.apollo.compiler.InputFieldSpec.Type valueOf(java.lang.String);
    method public static final com.apollographql.apollo.compiler.InputFieldSpec.Type[] values();
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type BOOLEAN;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type CUSTOM;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type DOUBLE;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type ENUM;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type INT;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type LIST;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type LONG;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type OBJECT;
    enum_constant public static final com.apollographql.apollo.compiler.InputFieldSpec.Type STRING;
  }

  public final class InputTypeSpecBuilder {
    ctor public InputTypeSpecBuilder(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass build();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext getContext();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    field public static final com.apollographql.apollo.compiler.InputTypeSpecBuilder.Companion Companion;
  }

  public static final class InputTypeSpecBuilder.Companion {
  }

  public final class JavaTypeResolver {
    ctor public JavaTypeResolver(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass resolve(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.NullableValueType);
  }

  public class NullableValueType {
    method public final error.NonExistentClass getValue();
    method public static com.apollographql.apollo.compiler.NullableValueType valueOf(java.lang.String);
    method public static final com.apollographql.apollo.compiler.NullableValueType[] values();
    enum_constant public static final com.apollographql.apollo.compiler.NullableValueType ANNOTATED;
    enum_constant public static final com.apollographql.apollo.compiler.NullableValueType APOLLO_OPTIONAL;
    enum_constant public static final com.apollographql.apollo.compiler.NullableValueType GUAVA_OPTIONAL;
    enum_constant public static final com.apollographql.apollo.compiler.NullableValueType INPUT_TYPE;
    enum_constant public static final com.apollographql.apollo.compiler.NullableValueType JAVA_OPTIONAL;
  }

  public abstract interface OperationIdGenerator {
    method public abstract error.NonExistentClass apply(error.NonExistentClass, error.NonExistentClass);
    method public abstract error.NonExistentClass getVersion();
    property public abstract error.NonExistentClass version;
  }

  public static final class OperationIdGenerator.Sha256 implements com.apollographql.apollo.compiler.OperationIdGenerator {
    ctor public OperationIdGenerator.Sha256();
    method public error.NonExistentClass apply(error.NonExistentClass, error.NonExistentClass);
    method public java.lang.String getVersion();
    property public java.lang.String version;
  }

  public final class OperationTypeSpecBuilder implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public OperationTypeSpecBuilder(com.apollographql.apollo.compiler.ir.Operation, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getFragments();
    method public com.apollographql.apollo.compiler.ir.Operation getOperation();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.OperationTypeSpecBuilder.Companion Companion;
  }

  public static final class OperationTypeSpecBuilder.Companion {
  }

  public abstract interface PackageNameProvider {
    method public abstract error.NonExistentClass getFragmentsPackageName();
    method public abstract error.NonExistentClass getTypesPackageName();
    method public abstract error.NonExistentClass operationPackageName(error.NonExistentClass);
    property public abstract error.NonExistentClass fragmentsPackageName;
    property public abstract error.NonExistentClass typesPackageName;
  }

  public final class ResponseFieldSpec {
    ctor public ResponseFieldSpec(com.apollographql.apollo.compiler.ir.Field, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass factoryCode();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext getContext();
    method public error.NonExistentClass getFieldSpec();
    method public com.apollographql.apollo.compiler.ir.Field getIrField();
    method public error.NonExistentClass getNormalizedFieldSpec();
    method public error.NonExistentClass getResponseFieldType();
    method public error.NonExistentClass getTypeConditions();
    method public error.NonExistentClass readValueCode(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass writeValueCode(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.ResponseFieldSpec.Companion Companion;
  }

  public static final class ResponseFieldSpec.Companion {
  }

  public final class SchemaTypeSpecBuilder {
    ctor public SchemaTypeSpecBuilder(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    method public error.NonExistentClass build(error.NonExistentClass...);
    field public static final com.apollographql.apollo.compiler.SchemaTypeSpecBuilder.Companion Companion;
  }

  public static final class SchemaTypeSpecBuilder.Companion {
    method public error.NonExistentClass getFRAGMENTS_FIELD();
    property public final error.NonExistentClass FRAGMENTS_FIELD;
  }

  public final class Util {
    method public error.NonExistentClass getSCALAR_TYPES();
    property public final error.NonExistentClass SCALAR_TYPES;
    field public static final error.NonExistentClass FIELD_MAPPER_SUFFIX;
    field public static final com.apollographql.apollo.compiler.Util INSTANCE;
    field public static final error.NonExistentClass MEMOIZED_HASH_CODE_FLAG_VAR;
    field public static final error.NonExistentClass MEMOIZED_HASH_CODE_VAR;
    field public static final error.NonExistentClass MEMOIZED_TO_STRING_VAR;
    field public static final error.NonExistentClass RESPONSE_FIELD_MAPPER_TYPE_NAME;
  }

  public final class UtilKt {
    ctor public UtilKt();
    method public static error.NonExistentClass castTo(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass conformToProtocol(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass defaultOptionalValue(error.NonExistentClass);
    method public static java.lang.String escapeJavaReservedWord(error.NonExistentClass);
    method public static java.lang.String escapeKotlinReservedWord(error.NonExistentClass);
    method public static error.NonExistentClass flatNestedTypeSpecs(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass flatten(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass isCustomScalarType(error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public static boolean isEnum(error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public static boolean isList(error.NonExistentClass);
    method public static error.NonExistentClass isNullable(error.NonExistentClass);
    method public static error.NonExistentClass isOptional(error.NonExistentClass, error.NonExistentClass);
    method public static boolean isScalar(error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public static error.NonExistentClass listParamType(error.NonExistentClass);
    method public static error.NonExistentClass mapperFieldName(error.NonExistentClass);
    method public static error.NonExistentClass normalizeGraphQlType(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass overrideReturnType(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass overrideType(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass overrideTypeName(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass rawType(error.NonExistentClass);
    method public static error.NonExistentClass removeNestedTypeSpecs(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass toJavaBeansSemanticNaming(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass toJavaType(error.NonExistentClass);
    method public static error.NonExistentClass unwrapOptionalType(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass unwrapOptionalValue(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, kotlin.jvm.functions.Function1<? super error.NonExistentClass, ? extends error.NonExistentClass>);
    method public static error.NonExistentClass withBuilder(error.NonExistentClass);
    method public static error.NonExistentClass withEqualsImplementation(error.NonExistentClass);
    method public static error.NonExistentClass withHashCodeImplementation(error.NonExistentClass);
    method public static error.NonExistentClass withToStringImplementation(error.NonExistentClass);
    method public static error.NonExistentClass withValueInitConstructor(error.NonExistentClass, com.apollographql.apollo.compiler.NullableValueType);
    method public static error.NonExistentClass withWildCardReturnType(error.NonExistentClass, error.NonExistentClass);
    method public static error.NonExistentClass wrapOptionalValue(error.NonExistentClass, error.NonExistentClass);
  }

  public final class VariablesTypeSpecBuilder {
    ctor public VariablesTypeSpecBuilder(error.NonExistentClass, com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass build();
    method public error.NonExistentClass builder(error.NonExistentClass);
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext getContext();
    method public error.NonExistentClass getVariables();
    field public static final com.apollographql.apollo.compiler.VariablesTypeSpecBuilder.Companion Companion;
  }

  public static final class VariablesTypeSpecBuilder.Companion {
  }

  public final class VisitorInterfaceSpec {
    ctor public VisitorInterfaceSpec(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass createVisitorInterface();
  }

  public final class VisitorMethodSpec {
    ctor public VisitorMethodSpec(error.NonExistentClass);
    method public error.NonExistentClass createVisitorMethod();
  }

  public final class VisitorSpec {
    method public error.NonExistentClass getVISITOR_TYPE_VARIABLE();
    property public final error.NonExistentClass VISITOR_TYPE_VARIABLE;
    field public static final java.lang.String DEFAULT_VISITOR_METHOD_NAME = "visitDefault";
    field public static final com.apollographql.apollo.compiler.VisitorSpec INSTANCE;
    field public static final java.lang.String VISITOR_CLASSNAME = "Visitor";
    field public static final java.lang.String VISITOR_METHOD_NAME = "visit";
  }

}

package com.apollographql.apollo.compiler.ast.builder {

  public final class EnumTypeBuilderKt {
    ctor public EnumTypeBuilderKt();
  }

  public final class FragmentTypeBuilderKt {
    ctor public FragmentTypeBuilderKt();
  }

  public final class InlineFragmentTypeBuilderKt {
    ctor public InlineFragmentTypeBuilderKt();
  }

  public final class InputTypeBuilderKt {
    ctor public InputTypeBuilderKt();
  }

  public final class ObjectFieldBuilderKt {
    ctor public ObjectFieldBuilderKt();
  }

  public final class OperationTypeBuilderKt {
    ctor public OperationTypeBuilderKt();
  }

  public final class SchemaBuilderKt {
    ctor public SchemaBuilderKt();
  }

}

package com.apollographql.apollo.compiler.codegen.kotlin {

  public final class CustomTypeKt {
    ctor public CustomTypeKt();
  }

  public final class EnumTypeKt {
    ctor public EnumTypeKt();
  }

  public final class GraphQLKompiler {
    ctor public GraphQLKompiler(com.apollographql.apollo.compiler.ir.CodeGenerationIR, error.NonExistentClass, com.apollographql.apollo.compiler.PackageNameProvider, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.OperationIdGenerator, error.NonExistentClass, error.NonExistentClass);
    method public void write(error.NonExistentClass);
  }

  public final class InputTypeKt {
    ctor public InputTypeKt();
  }

  public final class KotlinCodeGenUtilKt {
    ctor public KotlinCodeGenUtilKt();
    method public static error.NonExistentClass throws(error.NonExistentClass, error.NonExistentClass...);
    method public static error.NonExistentClass throwsMultiplatformIOException(error.NonExistentClass);
  }

  public final class ObjectTypeKt {
    ctor public ObjectTypeKt();
  }

  public final class OperationTypeKt {
    ctor public OperationTypeKt();
  }

}

package com.apollographql.apollo.compiler.ir {

  public final class Argument {
    ctor public Argument(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component4();
    method public com.apollographql.apollo.compiler.ir.Argument copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass equals(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getType();
    method public error.NonExistentClass getValue();
    method public error.NonExistentClass hashCode();
    method public java.lang.String toString();
  }

  public final class CodeGenerationContext {
    ctor public CodeGenerationContext(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.OperationIdGenerator, com.apollographql.apollo.compiler.NullableValueType, com.apollographql.apollo.compiler.ir.CodeGenerationIR, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.PackageNameProvider);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component10();
    method public error.NonExistentClass component11();
    method public com.apollographql.apollo.compiler.PackageNameProvider component12();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.OperationIdGenerator component4();
    method public com.apollographql.apollo.compiler.NullableValueType component5();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR component6();
    method public error.NonExistentClass component7();
    method public error.NonExistentClass component8();
    method public error.NonExistentClass component9();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationContext copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.OperationIdGenerator, com.apollographql.apollo.compiler.NullableValueType, com.apollographql.apollo.compiler.ir.CodeGenerationIR, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.PackageNameProvider);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getCustomTypeMap();
    method public error.NonExistentClass getGenerateModelBuilder();
    method public error.NonExistentClass getGenerateVisitorForPolymorphicDatatypes();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR getIr();
    method public com.apollographql.apollo.compiler.NullableValueType getNullableValueType();
    method public com.apollographql.apollo.compiler.OperationIdGenerator getOperationIdGenerator();
    method public com.apollographql.apollo.compiler.PackageNameProvider getPackageNameProvider();
    method public error.NonExistentClass getReservedTypeNames();
    method public error.NonExistentClass getSuppressRawTypesWarning();
    method public error.NonExistentClass getTypeDeclarations();
    method public error.NonExistentClass getUseJavaBeansSemanticNaming();
    method public error.NonExistentClass getUseSemanticNaming();
    method public int hashCode();
    method public void setReservedTypeNames(error.NonExistentClass);
    method public java.lang.String toString();
  }

  public final class CodeGenerationIR {
    ctor public CodeGenerationIR(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getFragments();
    method public error.NonExistentClass getOperations();
    method public error.NonExistentClass getTypesUsed();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public abstract interface CodeGenerator {
    method public abstract error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
  }

  public final class Condition {
    ctor public Condition(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component4();
    method public com.apollographql.apollo.compiler.ir.Condition copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getInverted();
    method public error.NonExistentClass getKind();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getVariableName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static class Condition.Kind {
    method public final error.NonExistentClass getRawValue();
    method public static com.apollographql.apollo.compiler.ir.Condition.Kind valueOf(java.lang.String);
    method public static final com.apollographql.apollo.compiler.ir.Condition.Kind[] values();
    enum_constant public static final com.apollographql.apollo.compiler.ir.Condition.Kind BOOLEAN;
  }

  public final class Field implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public Field(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass accessorMethodSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass argumentCodeBlock();
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component10();
    method public error.NonExistentClass component11();
    method public error.NonExistentClass component12();
    method public error.NonExistentClass component13();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component14();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public error.NonExistentClass component6();
    method public error.NonExistentClass component7();
    method public error.NonExistentClass component8();
    method public error.NonExistentClass component9();
    method public com.apollographql.apollo.compiler.ir.Field copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass fieldSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext);
    method public error.NonExistentClass formatClassName();
    method public error.NonExistentClass getArgs();
    method public error.NonExistentClass getConditions();
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFieldName();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getFragmentRefs();
    method public error.NonExistentClass getInlineFragments();
    method public error.NonExistentClass getResponseName();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getType();
    method public error.NonExistentClass getTypeDescription();
    method public int hashCode();
    method public error.NonExistentClass isConditional();
    method public error.NonExistentClass isDeprecated();
    method public boolean isNonScalar();
    method public error.NonExistentClass isOptional();
    method public java.lang.String toString();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.ir.Field.Companion Companion;
  }

  public static final class Field.Companion {
    method public com.apollographql.apollo.compiler.ir.Field getTYPE_NAME_FIELD();
    property public final com.apollographql.apollo.compiler.ir.Field TYPE_NAME_FIELD;
  }

  public final class Fragment implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public Fragment(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component10();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public error.NonExistentClass component6();
    method public error.NonExistentClass component7();
    method public error.NonExistentClass component8();
    method public error.NonExistentClass component9();
    method public com.apollographql.apollo.compiler.ir.Fragment copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getFilePath();
    method public error.NonExistentClass getFragmentName();
    method public error.NonExistentClass getFragmentRefs();
    method public error.NonExistentClass getInlineFragments();
    method public error.NonExistentClass getPossibleTypes();
    method public error.NonExistentClass getSource();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getTypeCondition();
    method public int hashCode();
    method public java.lang.String toString();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.ir.Fragment.Companion Companion;
    field public static final error.NonExistentClass FRAGMENT_DEFINITION_FIELD_NAME;
  }

  public static final class Fragment.Companion {
  }

  public final class FragmentRef {
    ctor public FragmentRef(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component3();
    method public com.apollographql.apollo.compiler.ir.FragmentRef copy(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass equals(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getConditions();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass hashCode();
    method public java.lang.String toString();
  }

  public final class InlineFragment implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public InlineFragment(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component6();
    method public error.NonExistentClass component7();
    method public com.apollographql.apollo.compiler.ir.InlineFragment copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass fieldSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    method public error.NonExistentClass formatClassName();
    method public error.NonExistentClass getConditions();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getFragments();
    method public error.NonExistentClass getPossibleTypes();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getTypeCondition();
    method public int hashCode();
    method public java.lang.String toString();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
  }

  public final class Operation implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public Operation(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component10();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public error.NonExistentClass component6();
    method public error.NonExistentClass component7();
    method public error.NonExistentClass component8();
    method public error.NonExistentClass component9();
    method public com.apollographql.apollo.compiler.ir.Operation copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getFilePath();
    method public error.NonExistentClass getFragments();
    method public error.NonExistentClass getFragmentsReferenced();
    method public error.NonExistentClass getOperationName();
    method public error.NonExistentClass getOperationType();
    method public error.NonExistentClass getSource();
    method public error.NonExistentClass getSourceWithFragments();
    method public error.NonExistentClass getVariables();
    method public int hashCode();
    method public boolean isMutation();
    method public boolean isQuery();
    method public boolean isSubscription();
    method public error.NonExistentClass normalizedOperationName(error.NonExistentClass);
    method public java.lang.String toString();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.ir.Operation.Companion Companion;
    field public static final java.lang.String DATA_TYPE_NAME = "Data";
    field public static final java.lang.String TYPE_MUTATION = "mutation";
    field public static final java.lang.String TYPE_QUERY = "query";
    field public static final java.lang.String TYPE_SUBSCRIPTION = "subscription";
  }

  public static final class Operation.Companion {
  }

  public sealed abstract class ScalarType {
    method public final error.NonExistentClass getName();
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.Companion Companion;
  }

  public static final class ScalarType.BOOLEAN extends com.apollographql.apollo.compiler.ir.ScalarType {
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.BOOLEAN INSTANCE;
  }

  public static final class ScalarType.Companion {
    method public com.apollographql.apollo.compiler.ir.ScalarType forName(error.NonExistentClass);
  }

  public static final class ScalarType.FLOAT extends com.apollographql.apollo.compiler.ir.ScalarType {
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.FLOAT INSTANCE;
  }

  public static final class ScalarType.ID extends com.apollographql.apollo.compiler.ir.ScalarType {
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.ID INSTANCE;
  }

  public static final class ScalarType.INT extends com.apollographql.apollo.compiler.ir.ScalarType {
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.INT INSTANCE;
  }

  public static final class ScalarType.STRING extends com.apollographql.apollo.compiler.ir.ScalarType {
    field public static final com.apollographql.apollo.compiler.ir.ScalarType.STRING INSTANCE;
  }

  public final class SourceLocation {
    ctor public SourceLocation(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.ir.SourceLocation copy(error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getLine();
    method public error.NonExistentClass getPosition();
    method public int hashCode();
    method public error.NonExistentClass toString();
    field public static final com.apollographql.apollo.compiler.ir.SourceLocation.Companion Companion;
  }

  public static final class SourceLocation.Companion {
    method public com.apollographql.apollo.compiler.ir.SourceLocation getUNKNOWN();
    property public final com.apollographql.apollo.compiler.ir.SourceLocation UNKNOWN;
  }

  public final class TypeDeclaration implements com.apollographql.apollo.compiler.ir.CodeGenerator {
    ctor public TypeDeclaration(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public com.apollographql.apollo.compiler.ir.TypeDeclaration copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getKind();
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getValues();
    method public int hashCode();
    method public java.lang.String toString();
    method public error.NonExistentClass toTypeSpec(com.apollographql.apollo.compiler.ir.CodeGenerationContext, error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.ir.TypeDeclaration.Companion Companion;
  }

  public static final class TypeDeclaration.Companion {
    method public error.NonExistentClass getENUM_SAFE_VALUE_OF();
    method public error.NonExistentClass getENUM_UNKNOWN_CONSTANT();
    method public error.NonExistentClass getKIND_ENUM();
    method public error.NonExistentClass getKIND_INPUT_OBJECT_TYPE();
    method public error.NonExistentClass getKIND_SCALAR_TYPE();
    property public final error.NonExistentClass ENUM_SAFE_VALUE_OF;
    property public final error.NonExistentClass ENUM_UNKNOWN_CONSTANT;
    property public final error.NonExistentClass KIND_ENUM;
    property public final error.NonExistentClass KIND_INPUT_OBJECT_TYPE;
    property public final error.NonExistentClass KIND_SCALAR_TYPE;
  }

  public final class TypeDeclarationField {
    ctor public TypeDeclarationField(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.ir.TypeDeclarationField copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDefaultValue();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getType();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public final class TypeDeclarationValue {
    ctor public TypeDeclarationValue(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.ir.TypeDeclarationValue copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public error.NonExistentClass isDeprecated();
    method public java.lang.String toString();
  }

  public final class Variable {
    ctor public Variable(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.ir.SourceLocation component3();
    method public com.apollographql.apollo.compiler.ir.Variable copy(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.ir.SourceLocation);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.ir.SourceLocation getSourceLocation();
    method public error.NonExistentClass getType();
    method public int hashCode();
    method public error.NonExistentClass optional();
    method public java.lang.String toString();
  }

}

package com.apollographql.apollo.compiler.operationoutput {

  public final class OperationDescriptor {
    ctor public OperationDescriptor(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getSource();
  }

  public final class OperationOutputKt {
    ctor public OperationOutputKt();
    method public static error.NonExistentClass OperationOutput(error.NonExistentClass);
    method public static error.NonExistentClass adapter(error.NonExistentClass);
    method public static error.NonExistentClass toJson(error.NonExistentClass, error.NonExistentClass);
  }

}

package com.apollographql.apollo.compiler.parser {

  public final class FieldMergerKt {
    ctor public FieldMergerKt();
  }

  public final class GraphQLDocumentParser {
    ctor public GraphQLDocumentParser(com.apollographql.apollo.compiler.parser.Schema, com.apollographql.apollo.compiler.PackageNameProvider);
    method public com.apollographql.apollo.compiler.parser.Schema getSchema();
    method public com.apollographql.apollo.compiler.ir.CodeGenerationIR parse(error.NonExistentClass);
  }

  public final class GraphQLDocumentSourceBuilder {
    method public error.NonExistentClass getGraphQLDocumentSource(error.NonExistentClass);
    method public error.NonExistentClass getGraphQLDocumentSource(error.NonExistentClass);
    property public final error.NonExistentClass graphQLDocumentSource;
    property public final error.NonExistentClass graphQLDocumentSource;
    field public static final com.apollographql.apollo.compiler.parser.GraphQLDocumentSourceBuilder INSTANCE;
  }

  public final class IntrospectionQuery {
    field public static final com.apollographql.apollo.compiler.parser.IntrospectionQuery INSTANCE;
  }

  public static final class IntrospectionQuery.MutationType {
    ctor public IntrospectionQuery.MutationType(error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.MutationType copy(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class IntrospectionQuery.QueryType {
    ctor public IntrospectionQuery.QueryType(error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.QueryType copy(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class IntrospectionQuery.Schema {
    ctor public IntrospectionQuery.Schema(com.apollographql.apollo.compiler.parser.IntrospectionQuery.QueryType, com.apollographql.apollo.compiler.parser.IntrospectionQuery.MutationType, com.apollographql.apollo.compiler.parser.IntrospectionQuery.SubscriptionType, error.NonExistentClass);
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.QueryType component1();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.MutationType component2();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.SubscriptionType component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.Schema copy(com.apollographql.apollo.compiler.parser.IntrospectionQuery.QueryType, com.apollographql.apollo.compiler.parser.IntrospectionQuery.MutationType, com.apollographql.apollo.compiler.parser.IntrospectionQuery.SubscriptionType, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.MutationType getMutationType();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.QueryType getQueryType();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.SubscriptionType getSubscriptionType();
    method public error.NonExistentClass getTypes();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class IntrospectionQuery.SubscriptionType {
    ctor public IntrospectionQuery.SubscriptionType(error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.compiler.parser.IntrospectionQuery.SubscriptionType copy(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public final class Schema {
    ctor public Schema(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getMutationType();
    method public error.NonExistentClass getQueryType();
    method public error.NonExistentClass getSubscriptionType();
    method public error.NonExistentClass getTypes();
    field public static final com.apollographql.apollo.compiler.parser.Schema.Companion Companion;
  }

  public static final class Schema.Companion {
    method public operator com.apollographql.apollo.compiler.parser.Schema invoke(error.NonExistentClass);
  }

  public static final class Schema.Field {
    ctor public Schema.Field(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef component5();
    method public error.NonExistentClass component6();
    method public com.apollographql.apollo.compiler.parser.Schema.Field copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getArgs();
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef getType();
    method public int hashCode();
    method public error.NonExistentClass isDeprecated();
    method public java.lang.String toString();
  }

  public static final class Schema.Field.Argument {
    ctor public Schema.Field.Argument(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef component5();
    method public error.NonExistentClass component6();
    method public com.apollographql.apollo.compiler.parser.Schema.Field.Argument copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDefaultValue();
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef getType();
    method public int hashCode();
    method public error.NonExistentClass isDeprecated();
    method public java.lang.String toString();
  }

  public static final class Schema.InputField {
    ctor public Schema.InputField(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef component5();
    method public error.NonExistentClass component6();
    method public com.apollographql.apollo.compiler.parser.Schema.InputField copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDefaultValue();
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef getType();
    method public int hashCode();
    method public error.NonExistentClass isDeprecated();
    method public java.lang.String toString();
  }

  public static class Schema.Kind {
    method public static com.apollographql.apollo.compiler.parser.Schema.Kind valueOf(java.lang.String);
    method public static final com.apollographql.apollo.compiler.parser.Schema.Kind[] values();
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind ENUM;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind INPUT_OBJECT;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind INTERFACE;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind LIST;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind NON_NULL;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind OBJECT;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind SCALAR;
    enum_constant public static final com.apollographql.apollo.compiler.parser.Schema.Kind UNION;
  }

  public static sealed abstract class Schema.Type {
    method public abstract error.NonExistentClass getDescription();
    method public final com.apollographql.apollo.compiler.parser.Schema.Kind getKind();
    method public abstract error.NonExistentClass getName();
    property public abstract error.NonExistentClass description;
    property public abstract error.NonExistentClass name;
  }

  public static final class Schema.Type.Enum extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.Enum(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Enum copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getEnumValues();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.Enum.Value {
    ctor public Schema.Type.Enum.Value(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Enum.Value copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDeprecationReason();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public error.NonExistentClass isDeprecated();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.InputObject extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.InputObject(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.InputObject copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getInputFields();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.Interface extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.Interface(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Interface copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getPossibleTypes();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.Object extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.Object(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Object copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.Scalar extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.Scalar(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Scalar copy(error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.Type.Union extends com.apollographql.apollo.compiler.parser.Schema.Type {
    ctor public Schema.Type.Union(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.Schema.Type.Union copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getPossibleTypes();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class Schema.TypeRef {
    ctor public Schema.TypeRef(com.apollographql.apollo.compiler.parser.Schema.Kind, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef);
    method public com.apollographql.apollo.compiler.parser.Schema.Kind component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef component3();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef copy(com.apollographql.apollo.compiler.parser.Schema.Kind, error.NonExistentClass, com.apollographql.apollo.compiler.parser.Schema.TypeRef);
    method public boolean equals(java.lang.Object);
    method public com.apollographql.apollo.compiler.parser.Schema.Kind getKind();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef getOfType();
    method public com.apollographql.apollo.compiler.parser.Schema.TypeRef getRawType();
    method public int hashCode();
    method public java.lang.String toString();
    property public final com.apollographql.apollo.compiler.parser.Schema.TypeRef rawType;
  }

  public final class UtilsKt {
    ctor public UtilsKt();
  }

  public final class ValidationKt {
    ctor public ValidationKt();
  }

}

package com.apollographql.apollo.compiler.parser.sdl {

  public final class GraphSDLSchemaParser {
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema parse(error.NonExistentClass);
    field public static final com.apollographql.apollo.compiler.parser.sdl.GraphSDLSchemaParser INSTANCE;
  }

  public final class GraphSdlSchema {
    ctor public GraphSdlSchema(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Schema, error.NonExistentClass);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Schema component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema copy(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Schema, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Schema getSchema();
    method public error.NonExistentClass getTypeDefinitions();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.Directive {
    ctor public GraphSdlSchema.Directive(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Directive copy(error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getArguments();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.Schema {
    ctor public GraphSdlSchema.Schema(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named component3();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named component5();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.Schema copy(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named getMutationRootOperationType();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named getQueryRootOperationType();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named getSubscriptionRootOperationType();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static sealed abstract class GraphSdlSchema.TypeDefinition {
    method public abstract error.NonExistentClass getDescription();
    method public abstract error.NonExistentClass getDirectives();
    method public abstract error.NonExistentClass getName();
    property public abstract error.NonExistentClass description;
    property public abstract error.NonExistentClass directives;
    property public abstract error.NonExistentClass name;
  }

  public static final class GraphSdlSchema.TypeDefinition.Enum extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.Enum(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Enum copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getEnumValues();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Enum.Value {
    ctor public GraphSdlSchema.TypeDefinition.Enum.Value(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Enum.Value copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Field {
    ctor public GraphSdlSchema.TypeDefinition.Field(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef component4();
    method public error.NonExistentClass component5();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Field copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getArguments();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef getType();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Field.Argument {
    ctor public GraphSdlSchema.TypeDefinition.Field.Argument(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef component5();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Field.Argument copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDefaultValue();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef getType();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.InputField {
    ctor public GraphSdlSchema.TypeDefinition.InputField(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef component5();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.InputField copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDefaultValue();
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef getType();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.InputObject extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.InputObject(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.InputObject copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Interface extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.Interface(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Interface copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Object extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.Object(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public error.NonExistentClass component5();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Object copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getFields();
    method public error.NonExistentClass getInterfaces();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Scalar extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.Scalar(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Scalar copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeDefinition.Union extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition {
    ctor public GraphSdlSchema.TypeDefinition.Union(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public error.NonExistentClass component3();
    method public error.NonExistentClass component4();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeDefinition.Union copy(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getDescription();
    method public error.NonExistentClass getDirectives();
    method public error.NonExistentClass getName();
    method public error.NonExistentClass getTypeRefs();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static sealed abstract class GraphSdlSchema.TypeRef {
  }

  public static final class GraphSdlSchema.TypeRef.List extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef {
    ctor public GraphSdlSchema.TypeRef.List(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef component1();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.List copy(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public boolean equals(java.lang.Object);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef getTypeRef();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeRef.Named extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef {
    ctor public GraphSdlSchema.TypeRef.Named(error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.Named copy(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getTypeName();
    method public int hashCode();
    method public java.lang.String toString();
  }

  public static final class GraphSdlSchema.TypeRef.NonNull extends com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef {
    ctor public GraphSdlSchema.TypeRef.NonNull(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef component1();
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef.NonNull copy(com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef);
    method public boolean equals(java.lang.Object);
    method public com.apollographql.apollo.compiler.parser.sdl.GraphSdlSchema.TypeRef getTypeRef();
    method public int hashCode();
    method public java.lang.String toString();
  }

}

