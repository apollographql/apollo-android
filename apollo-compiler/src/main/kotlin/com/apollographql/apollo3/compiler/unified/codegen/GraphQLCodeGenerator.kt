package com.apollographql.apollo3.compiler.unified.codegen

import com.apollographql.apollo3.compiler.VERSION
import com.apollographql.apollo3.compiler.unified.IntermediateRepresentation
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.TypeSpec
import java.io.File

/**
 * KotlinPoet [TypeSpec] are non qualified. This is a simple wrapper that carries a package name so that we can write the file
 *
 * If multiple [TypeSpec] are in the same [packageName], [fileName] is mandatory
 */
class QualifiedTypeSpec(
    val packageName: String,
    val typeSpec: TypeSpec,
    val fileName: String? = null,
)

class GraphQLCodeGenerator(
    private val ir: IntermediateRepresentation,
    private val generateAsInternal: Boolean = false,
    private val enumAsSealedClassPatternFilters: List<Regex>,
    private val generateScalarMapping: Boolean,
) {
  fun write(outputDir: File) {
    val customScalars = if (generateScalarMapping) {
      listOf(ir.customScalars.qualifiedTypeSpec())
    } else {
      emptyList()
    }

    val enums = ir.enums.flatMap { enum ->
      enum.qualifiedTypeSpecs(enumAsSealedClassPatternFilters = enumAsSealedClassPatternFilters)
    }

    val inputObjects = ir.inputObjects.flatMap { inputObject ->
      inputObject.qualifiedTypeSpecs()
    }

    val operations = ir.operations.flatMap { operation ->
      operation.qualifiedTypeSpecs()
    }

    val fragments = ir.fragments.flatMap { fragment ->
      fragment.qualifiedTypeSpecs()
    }

    val qualifiedTypeSpecs = customScalars + enums + inputObjects + operations + fragments


    qualifiedTypeSpecs.groupBy {
      it.packageName to (it.fileName ?: it.typeSpec.name!!)
    }.forEach {
      fileSpecBuilder(it.key.first, it.key.second)
          .apply {
            it.value.forEach {
              addType(it.typeSpec.internal(generateAsInternal))
            }
          }
          .build()
          .writeTo(outputDir)
    }
  }

  private fun fileSpecBuilder(packageName: String, name: String): FileSpec.Builder =
      FileSpec
          .builder(packageName, name)
          .addComment("\nAUTO-GENERATED FILE. DO NOT MODIFY.\n\n" +
              "This class was automatically generated by Apollo GraphQL version '$VERSION'.\n"
          )

  private fun TypeSpec.internal(generateAsInternal: Boolean): TypeSpec {
    return if (generateAsInternal) {
      this.toBuilder().addModifiers(KModifier.INTERNAL).build()
    } else {
      this
    }
  }
}