// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.introspection_query

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
internal object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forObject("__schema", "__schema", null, false, null),
    ResponseField.forObject("__type", "__type", mapOf<String, Any>(
      "name" to "Vehicle"), true, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var __schema: TestQuery.__Schema? = null
      var __type: TestQuery.__Type? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> __schema = readObject<TestQuery.__Schema>(RESPONSE_FIELDS[0]) { reader ->
            TestQuery_ResponseAdapter.__Schema_ResponseAdapter.fromResponse(reader)
          }
          1 -> __type = readObject<TestQuery.__Type>(RESPONSE_FIELDS[1]) { reader ->
            TestQuery_ResponseAdapter.__Type_ResponseAdapter.fromResponse(reader)
          }
          else -> break
        }
      }
      TestQuery.Data(
        __schema = __schema!!,
        __type = __type
      )
    }
  }

  object QueryType_ResponseAdapter : ResponseAdapter<TestQuery.QueryType> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.QueryType {
      return reader.run {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.QueryType(
          __typename = __typename!!,
          name = name
        )
      }
    }
  }

  object Type_ResponseAdapter : ResponseAdapter<TestQuery.Type> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Type {
      return reader.run {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.Type(
          __typename = __typename!!,
          name = name
        )
      }
    }
  }

  object __Schema_ResponseAdapter : ResponseAdapter<TestQuery.__Schema> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forObject("queryType", "queryType", null, false, null),
      ResponseField.forList("types", "types", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.__Schema {
      return reader.run {
        var __typename: String? = __typename
        var queryType: TestQuery.QueryType? = null
        var types: List<TestQuery.Type>? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> queryType = readObject<TestQuery.QueryType>(RESPONSE_FIELDS[1]) { reader ->
              TestQuery_ResponseAdapter.QueryType_ResponseAdapter.fromResponse(reader)
            }
            2 -> types = readList<TestQuery.Type>(RESPONSE_FIELDS[2]) { reader ->
              reader.readObject<TestQuery.Type> { reader ->
                TestQuery_ResponseAdapter.Type_ResponseAdapter.fromResponse(reader)
              }
            }?.map { it!! }
            else -> break
          }
        }
        TestQuery.__Schema(
          __typename = __typename!!,
          queryType = queryType!!,
          types = types!!
        )
      }
    }
  }

  object __Type_ResponseAdapter : ResponseAdapter<TestQuery.__Type> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.__Type {
      return reader.run {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.__Type(
          __typename = __typename!!,
          name = name
        )
      }
    }
  }
}
