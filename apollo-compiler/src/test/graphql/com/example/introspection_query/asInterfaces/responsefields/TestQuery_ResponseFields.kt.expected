//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.responsefields

import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.Array

object TestQuery_ResponseFields {
  val fields: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("unused").notNull(),
        fieldName = "__schema",
        fieldSets = listOf(
          ResponseField.FieldSet(null, __Schema.fields),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("unused").notNull(),
        fieldName = "__type",
        arguments = mapOf("name" to "Vehicle"
        ),
        fieldSets = listOf(
          ResponseField.FieldSet(null, __Type.fields),
        ),
      ),
    )


    object __Schema {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Object("unused").notNull(),
          fieldName = "queryType",
          fieldSets = listOf(
            ResponseField.FieldSet(null, QueryType.fields),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("unused").notNull().list().notNull(),
          fieldName = "types",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Type.fields),
          ),
        ),
      )


      object QueryType {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "name",
          ),
        )

      }

      object Type {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "name",
          ),
        )

      }
    }

    object __Type {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("unused"),
          fieldName = "name",
        ),
      )

    }
  }
}
