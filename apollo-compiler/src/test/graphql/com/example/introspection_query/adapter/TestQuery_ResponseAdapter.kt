// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.introspection_query.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.apollographql.apollo.exception.UnexpectedNullValue
import com.example.introspection_query.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestQuery.Data> {
  val __schemaAdapter: ResponseAdapter<TestQuery.Data.__Schema> = __Schema(customScalarAdapters)

  val __typeAdapter: ResponseAdapter<TestQuery.Data.__Type> = __Type(customScalarAdapters)

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var __schema: TestQuery.Data.__Schema? = null
    var __type: TestQuery.Data.__Type? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __schema = __schemaAdapter.fromResponse(reader) ?: throw
            UnexpectedNullValue("__schema")
        1 -> __type = __typeAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("__type")
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      __schema = __schema!!,
      __type = __type!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("__schema")
    __schemaAdapter.toResponse(writer, value.__schema)
    writer.name("__type")
    __typeAdapter.toResponse(writer, value.__type)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Schema")),
        responseName = "__schema",
        fieldName = "__schema",
        arguments = emptyMap(),
        conditions = emptyList(),
        fieldSets = listOf(
          ResponseField.FieldSet(null, __Schema.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")),
        responseName = "__type",
        fieldName = "__type",
        arguments = mapOf<String, Any?>(
          "name" to "Vehicle"),
        conditions = emptyList(),
        fieldSets = listOf(
          ResponseField.FieldSet(null, __Type.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class __Schema(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.__Schema> {
    val queryTypeAdapter: ResponseAdapter<TestQuery.Data.__Schema.QueryType> =
        QueryType(customScalarAdapters)

    val typesAdapter: ResponseAdapter<List<TestQuery.Data.__Schema.Type>> =
        ListResponseAdapter(Type(customScalarAdapters))

    override fun fromResponse(reader: JsonReader): TestQuery.Data.__Schema {
      var queryType: TestQuery.Data.__Schema.QueryType? = null
      var types: List<TestQuery.Data.__Schema.Type>? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> queryType = queryTypeAdapter.fromResponse(reader) ?: throw
              UnexpectedNullValue("queryType")
          1 -> types = typesAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("types")
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.__Schema(
        queryType = queryType!!,
        types = types!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.__Schema) {
      writer.beginObject()
      writer.name("queryType")
      queryTypeAdapter.toResponse(writer, value.queryType)
      writer.name("types")
      typesAdapter.toResponse(writer, value.types)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")),
          responseName = "queryType",
          fieldName = "queryType",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet(null, QueryType.RESPONSE_FIELDS)
          ),
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")))),
          responseName = "types",
          fieldName = "types",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet(null, Type.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class QueryType(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<TestQuery.Data.__Schema.QueryType> {
      val nameAdapter: ResponseAdapter<String?> = NullableResponseAdapter(stringResponseAdapter)

      override fun fromResponse(reader: JsonReader): TestQuery.Data.__Schema.QueryType {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = nameAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.__Schema.QueryType(
          name = name
        )
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.__Schema.QueryType) {
        writer.beginObject()
        writer.name("name")
        nameAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }

    class Type(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<TestQuery.Data.__Schema.Type> {
      val nameAdapter: ResponseAdapter<String?> = NullableResponseAdapter(stringResponseAdapter)

      override fun fromResponse(reader: JsonReader): TestQuery.Data.__Schema.Type {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = nameAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.__Schema.Type(
          name = name
        )
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.__Schema.Type) {
        writer.beginObject()
        writer.name("name")
        nameAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }

  class __Type(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.__Type> {
    val nameAdapter: ResponseAdapter<String?> = NullableResponseAdapter(stringResponseAdapter)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.__Type {
      var name: String? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = nameAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.__Type(
        name = name
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.__Type) {
      writer.beginObject()
      writer.name("name")
      nameAdapter.toResponse(writer, value.name)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }
}
