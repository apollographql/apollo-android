//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.introspection_query.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.example.introspection_query.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__schema", "__type")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var __schema: TestQuery.Data.__Schema? = null
      var __type: TestQuery.Data.__Type? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __schema = __Schema.fromResponse(reader, responseAdapterCache)
          1 -> __type = __Type.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        __schema = __schema!!,
        __type = __type!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("__schema")
      __Schema.toResponse(writer, responseAdapterCache, value.__schema)
      writer.name("__type")
      __Type.toResponse(writer, responseAdapterCache, value.__type)
    }

    object __Schema : ResponseAdapter<TestQuery.Data.__Schema> {
      val RESPONSE_NAMES: List<String> = listOf("queryType", "types")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.__Schema {
        var queryType: TestQuery.Data.__Schema.QueryType? = null
        var types: List<TestQuery.Data.__Schema.Types>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> queryType = QueryType.fromResponse(reader, responseAdapterCache)
            1 -> types = Types.list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.__Schema(
          queryType = queryType!!,
          types = types!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.__Schema
      ) {
        writer.name("queryType")
        QueryType.toResponse(writer, responseAdapterCache, value.queryType)
        writer.name("types")
        Types.list().toResponse(writer, responseAdapterCache, value.types)
      }

      object QueryType : ResponseAdapter<TestQuery.Data.__Schema.QueryType> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.__Schema.QueryType {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.__Schema.QueryType(
            name = name
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.__Schema.QueryType
        ) {
          writer.name("name")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }

      object Types : ResponseAdapter<TestQuery.Data.__Schema.Types> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.__Schema.Types {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.__Schema.Types(
            name = name
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.__Schema.Types
        ) {
          writer.name("name")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }

    object __Type : ResponseAdapter<TestQuery.Data.__Type> {
      val RESPONSE_NAMES: List<String> = listOf("name")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.__Type {
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.__Type(
          name = name
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.__Type
      ) {
        writer.name("name")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }
  }
}
