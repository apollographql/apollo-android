//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_named_fragments.type

import com.apollographql.apollo3.api.Interface
import com.apollographql.apollo3.api.Object
import com.apollographql.apollo3.api.SchemaType
import com.apollographql.apollo3.api.possibleTypes
import kotlin.collections.List

/**
 * Auto generated constants representing the custom scalars, objects, interfaces and unions in the
 * schema. Input objects are left out because they are generated separately
 */
object Types {
  /**
   * An object with an ID
   */
  val Node: Interface = Interface("Node")

  /**
   * A single film.
   */
  val Film: Object = Object("Film", Node)

  /**
   * A connection to a list of items.
   */
  val FilmCharactersConnection: Object = Object("FilmCharactersConnection")

  /**
   * An edge in a connection.
   */
  val FilmCharactersEdge: Object = Object("FilmCharactersEdge")

  /**
   * A connection to a list of items.
   */
  val FilmPlanetsConnection: Object = Object("FilmPlanetsConnection")

  /**
   * An edge in a connection.
   */
  val FilmPlanetsEdge: Object = Object("FilmPlanetsEdge")

  /**
   * A connection to a list of items.
   */
  val FilmsConnection: Object = Object("FilmsConnection")

  /**
   * An edge in a connection.
   */
  val FilmsEdge: Object = Object("FilmsEdge")

  /**
   * A connection to a list of items.
   */
  val FilmSpeciesConnection: Object = Object("FilmSpeciesConnection")

  /**
   * An edge in a connection.
   */
  val FilmSpeciesEdge: Object = Object("FilmSpeciesEdge")

  /**
   * A connection to a list of items.
   */
  val FilmStarshipsConnection: Object = Object("FilmStarshipsConnection")

  /**
   * An edge in a connection.
   */
  val FilmStarshipsEdge: Object = Object("FilmStarshipsEdge")

  /**
   * A connection to a list of items.
   */
  val FilmVehiclesConnection: Object = Object("FilmVehiclesConnection")

  /**
   * An edge in a connection.
   */
  val FilmVehiclesEdge: Object = Object("FilmVehiclesEdge")

  /**
   * Information about pagination in a connection.
   */
  val PageInfo: Object = Object("PageInfo")

  /**
   * A connection to a list of items.
   */
  val PeopleConnection: Object = Object("PeopleConnection")

  /**
   * An edge in a connection.
   */
  val PeopleEdge: Object = Object("PeopleEdge")

  /**
   * An individual person or character within the Star Wars universe.
   */
  val Person: Object = Object("Person", Node)

  /**
   * A connection to a list of items.
   */
  val PersonFilmsConnection: Object = Object("PersonFilmsConnection")

  /**
   * An edge in a connection.
   */
  val PersonFilmsEdge: Object = Object("PersonFilmsEdge")

  /**
   * A connection to a list of items.
   */
  val PersonStarshipsConnection: Object = Object("PersonStarshipsConnection")

  /**
   * An edge in a connection.
   */
  val PersonStarshipsEdge: Object = Object("PersonStarshipsEdge")

  /**
   * A connection to a list of items.
   */
  val PersonVehiclesConnection: Object = Object("PersonVehiclesConnection")

  /**
   * An edge in a connection.
   */
  val PersonVehiclesEdge: Object = Object("PersonVehiclesEdge")

  /**
   * A large mass, planet or planetoid in the Star Wars Universe, at the time of
   * 0 ABY.
   */
  val Planet: Object = Object("Planet", Node)

  /**
   * A connection to a list of items.
   */
  val PlanetFilmsConnection: Object = Object("PlanetFilmsConnection")

  /**
   * An edge in a connection.
   */
  val PlanetFilmsEdge: Object = Object("PlanetFilmsEdge")

  /**
   * A connection to a list of items.
   */
  val PlanetResidentsConnection: Object = Object("PlanetResidentsConnection")

  /**
   * An edge in a connection.
   */
  val PlanetResidentsEdge: Object = Object("PlanetResidentsEdge")

  /**
   * A connection to a list of items.
   */
  val PlanetsConnection: Object = Object("PlanetsConnection")

  /**
   * An edge in a connection.
   */
  val PlanetsEdge: Object = Object("PlanetsEdge")

  val Root: Object = Object("Root")

  /**
   * A type of person or character within the Star Wars Universe.
   */
  val Species: Object = Object("Species", Node)

  /**
   * A connection to a list of items.
   */
  val SpeciesConnection: Object = Object("SpeciesConnection")

  /**
   * An edge in a connection.
   */
  val SpeciesEdge: Object = Object("SpeciesEdge")

  /**
   * A connection to a list of items.
   */
  val SpeciesFilmsConnection: Object = Object("SpeciesFilmsConnection")

  /**
   * An edge in a connection.
   */
  val SpeciesFilmsEdge: Object = Object("SpeciesFilmsEdge")

  /**
   * A connection to a list of items.
   */
  val SpeciesPeopleConnection: Object = Object("SpeciesPeopleConnection")

  /**
   * An edge in a connection.
   */
  val SpeciesPeopleEdge: Object = Object("SpeciesPeopleEdge")

  /**
   * A single transport craft that has hyperdrive capability.
   */
  val Starship: Object = Object("Starship", Node)

  /**
   * A connection to a list of items.
   */
  val StarshipFilmsConnection: Object = Object("StarshipFilmsConnection")

  /**
   * An edge in a connection.
   */
  val StarshipFilmsEdge: Object = Object("StarshipFilmsEdge")

  /**
   * A connection to a list of items.
   */
  val StarshipPilotsConnection: Object = Object("StarshipPilotsConnection")

  /**
   * An edge in a connection.
   */
  val StarshipPilotsEdge: Object = Object("StarshipPilotsEdge")

  /**
   * A connection to a list of items.
   */
  val StarshipsConnection: Object = Object("StarshipsConnection")

  /**
   * An edge in a connection.
   */
  val StarshipsEdge: Object = Object("StarshipsEdge")

  /**
   * A single transport craft that does not have hyperdrive capability
   */
  val Vehicle: Object = Object("Vehicle", Node)

  /**
   * A connection to a list of items.
   */
  val VehicleFilmsConnection: Object = Object("VehicleFilmsConnection")

  /**
   * An edge in a connection.
   */
  val VehicleFilmsEdge: Object = Object("VehicleFilmsEdge")

  /**
   * A connection to a list of items.
   */
  val VehiclePilotsConnection: Object = Object("VehiclePilotsConnection")

  /**
   * An edge in a connection.
   */
  val VehiclePilotsEdge: Object = Object("VehiclePilotsEdge")

  /**
   * A connection to a list of items.
   */
  val VehiclesConnection: Object = Object("VehiclesConnection")

  /**
   * An edge in a connection.
   */
  val VehiclesEdge: Object = Object("VehiclesEdge")

  val all: List<SchemaType> = listOf(
        Node, Film, FilmCharactersConnection, FilmCharactersEdge, FilmPlanetsConnection,
            FilmPlanetsEdge, FilmsConnection, FilmsEdge, FilmSpeciesConnection, FilmSpeciesEdge,
            FilmStarshipsConnection, FilmStarshipsEdge, FilmVehiclesConnection, FilmVehiclesEdge,
            PageInfo, PeopleConnection, PeopleEdge, Person, PersonFilmsConnection, PersonFilmsEdge,
            PersonStarshipsConnection, PersonStarshipsEdge, PersonVehiclesConnection,
            PersonVehiclesEdge, Planet, PlanetFilmsConnection, PlanetFilmsEdge,
            PlanetResidentsConnection, PlanetResidentsEdge, PlanetsConnection, PlanetsEdge, Root,
            Species, SpeciesConnection, SpeciesEdge, SpeciesFilmsConnection, SpeciesFilmsEdge,
            SpeciesPeopleConnection, SpeciesPeopleEdge, Starship, StarshipFilmsConnection,
            StarshipFilmsEdge, StarshipPilotsConnection, StarshipPilotsEdge, StarshipsConnection,
            StarshipsEdge, Vehicle, VehicleFilmsConnection, VehicleFilmsEdge,
            VehiclePilotsConnection, VehiclePilotsEdge, VehiclesConnection, VehiclesEdge)


  fun possibleTypes(type: SchemaType): List<Object> = possibleTypes(all, type)
}
