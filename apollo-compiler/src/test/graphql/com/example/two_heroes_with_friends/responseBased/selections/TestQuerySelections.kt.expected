//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.two_heroes_with_friends.selections

import com.apollographql.apollo3.api.CompiledCompoundType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledOtherType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.collections.List

private val node: List<CompiledSelection> = listOf(
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      )
    )

private val edges: List<CompiledSelection> = listOf(
      CompiledField(
        name = "node",
        type = CompiledCompoundType("unused"),
        selections = node
      )
    )

private val friendsConnection: List<CompiledSelection> = listOf(
      CompiledField(
        name = "totalCount",
        type = CompiledOtherType("unused")
      ),
      CompiledField(
        name = "edges",
        type = CompiledCompoundType("unused").list(),
        selections = node
      )
    )

private val r2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "friendsConnection",
        type = CompiledCompoundType("unused").notNull(),
        selections = node
      )
    )

private val node1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      )
    )

private val edges1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "node",
        type = CompiledCompoundType("unused"),
        selections = node1
      )
    )

private val friendsConnection1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "totalCount",
        type = CompiledOtherType("unused")
      ),
      CompiledField(
        name = "edges",
        type = CompiledCompoundType("unused").list(),
        selections = node1
      )
    )

private val luke: List<CompiledSelection> = listOf(
      CompiledField(
        name = "id",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "friendsConnection",
        type = CompiledCompoundType("unused").notNull(),
        selections = node1
      )
    )

val TestQuerySelections: List<CompiledSelection> = listOf(
      CompiledField(
        name = "hero",
        alias = "r2",
        type = CompiledCompoundType("unused"),
        selections = node
      ),
      CompiledField(
        name = "hero",
        alias = "luke",
        type = CompiledCompoundType("unused"),
        arguments = mapOf("episode" to "EMPIRE"
        ),
        selections = node1
      )
    )
