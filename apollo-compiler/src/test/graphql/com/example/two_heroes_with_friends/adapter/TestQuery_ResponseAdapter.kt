// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.two_heroes_with_friends.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.intResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.example.two_heroes_with_friends.TestQuery
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestQuery.Data> {
  val nullableR2Adapter: ResponseAdapter<TestQuery.Data.R2?> =
      NullableResponseAdapter(R2(customScalarAdapters))

  val nullableLukeAdapter: ResponseAdapter<TestQuery.Data.Luke?> =
      NullableResponseAdapter(Luke(customScalarAdapters))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var r2: TestQuery.Data.R2? = null
    var luke: TestQuery.Data.Luke? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> r2 = nullableR2Adapter.fromResponse(reader)
        1 -> luke = nullableLukeAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      r2 = r2,
      luke = luke
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("r2")
    nullableR2Adapter.toResponse(writer, value.r2)
    writer.name("luke")
    nullableLukeAdapter.toResponse(writer, value.luke)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        responseName = "r2",
        fieldSets = listOf(
          ResponseField.FieldSet(null, R2.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        responseName = "luke",
        arguments = mapOf<String, Any?>(
          "episode" to "EMPIRE"),
        fieldSets = listOf(
          ResponseField.FieldSet(null, Luke.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class R2(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.R2> {
    val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

    val friendsConnectionAdapter: ResponseAdapter<TestQuery.Data.R2.FriendsConnection> =
        FriendsConnection(customScalarAdapters)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.R2 {
      var name: String? = null
      var friendsConnection: TestQuery.Data.R2.FriendsConnection? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = stringAdapter.fromResponse(reader)
          1 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.R2(
        name = name!!,
        friendsConnection = friendsConnection!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.R2) {
      writer.beginObject()
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("friendsConnection")
      friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
<<<<<<< HEAD
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
=======
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
>>>>>>> dev-3.x
          ),
        )
      )

<<<<<<< HEAD
      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class FriendsConnection(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<TestQuery.Data.R2.FriendsConnection> {
      val nullableIntAdapter: ResponseAdapter<Int?> = NullableResponseAdapter(intResponseAdapter)

      val nullableListOfNullableEdgesAdapter:
          ResponseAdapter<List<TestQuery.Data.R2.FriendsConnection.Edges?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(customScalarAdapters))))

      override fun fromResponse(reader: JsonReader): TestQuery.Data.R2.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<TestQuery.Data.R2.FriendsConnection.Edges?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = nullableIntAdapter.fromResponse(reader)
            1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
            else -> break
=======
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.R2.FriendsConnection {
        return reader.run {
          var totalCount: Int? = null
          var edges: List<TestQuery.Data.R2.FriendsConnection.Edges?>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> totalCount = readInt(RESPONSE_FIELDS[0])
              1 -> edges = readList<TestQuery.Data.R2.FriendsConnection.Edges>(RESPONSE_FIELDS[1]) { reader ->
                reader.readObject<TestQuery.Data.R2.FriendsConnection.Edges> { reader ->
                  Edges.fromResponse(reader)
                }
              }
              else -> break
            }
>>>>>>> dev-3.x
          }
        }
        reader.endObject()
        return TestQuery.Data.R2.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

<<<<<<< HEAD
      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.R2.FriendsConnection) {
        writer.beginObject()
        writer.name("totalCount")
        nullableIntAdapter.toResponse(writer, value.totalCount)
        writer.name("edges")
        nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
        writer.endObject()
      }

      companion object {
=======
      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.R2.FriendsConnection) {
        writer.writeInt(RESPONSE_FIELDS[0], value.totalCount)
        writer.writeList(RESPONSE_FIELDS[1], value.edges) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Edges.toResponse(writer, value)
          }
        }
      }

      object Edges : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges> {
>>>>>>> dev-3.x
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Int"),
            fieldName = "totalCount",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

<<<<<<< HEAD
        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Edges(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges> {
        val nullableNodeAdapter: ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges.Node?> =
            NullableResponseAdapter(Node(customScalarAdapters))

        override fun fromResponse(reader: JsonReader): TestQuery.Data.R2.FriendsConnection.Edges {
          var node: TestQuery.Data.R2.FriendsConnection.Edges.Node? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = nullableNodeAdapter.fromResponse(reader)
              else -> break
            }
=======
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.R2.FriendsConnection.Edges {
          return reader.run {
            var node: TestQuery.Data.R2.FriendsConnection.Edges.Node? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> node = readObject<TestQuery.Data.R2.FriendsConnection.Edges.Node>(RESPONSE_FIELDS[0]) { reader ->
                  Node.fromResponse(reader)
                }
                else -> break
              }
            }
            TestQuery.Data.R2.FriendsConnection.Edges(
              node = node
            )
>>>>>>> dev-3.x
          }
          reader.endObject()
          return TestQuery.Data.R2.FriendsConnection.Edges(
            node = node
          )
        }

<<<<<<< HEAD
        override fun toResponse(writer: JsonWriter,
            value: TestQuery.Data.R2.FriendsConnection.Edges) {
          writer.beginObject()
          writer.name("node")
          nullableNodeAdapter.toResponse(writer, value.node)
          writer.endObject()
        }

        companion object {
=======
        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.R2.FriendsConnection.Edges) {
          if(value.node == null) {
            writer.writeObject(RESPONSE_FIELDS[0], null)
          } else {
            writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
              Node.toResponse(writer, value.node)
            }
          }
        }

        object Node : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges.Node> {
>>>>>>> dev-3.x
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

<<<<<<< HEAD
          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Node(
          customScalarAdapters: CustomScalarAdapters
        ) : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges.Node> {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          override fun fromResponse(reader: JsonReader):
              TestQuery.Data.R2.FriendsConnection.Edges.Node {
            var name: String? = null
            reader.beginObject()
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.R2.FriendsConnection.Edges.Node {
            return reader.run {
              var name: String? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> name = readString(RESPONSE_FIELDS[0])
                  else -> break
                }
              }
              TestQuery.Data.R2.FriendsConnection.Edges.Node(
                name = name!!
              )
>>>>>>> dev-3.x
            }
            reader.endObject()
            return TestQuery.Data.R2.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.R2.FriendsConnection.Edges.Node) {
            writer.beginObject()
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.R2.FriendsConnection.Edges.Node) {
            writer.writeString(RESPONSE_FIELDS[0], value.name)
>>>>>>> dev-3.x
          }
        }
      }
    }
  }

  class Luke(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.Luke> {
    val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

    val friendsConnectionAdapter: ResponseAdapter<TestQuery.Data.Luke.FriendsConnection> =
        FriendsConnection(customScalarAdapters)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Luke {
      var id: String? = null
      var name: String? = null
      var friendsConnection: TestQuery.Data.Luke.FriendsConnection? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.Luke(
        id = id!!,
        name = name!!,
        friendsConnection = friendsConnection!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Luke) {
      writer.beginObject()
      writer.name("id")
      stringAdapter.toResponse(writer, value.id)
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("friendsConnection")
      friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
<<<<<<< HEAD
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
=======
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
>>>>>>> dev-3.x
          ),
        )
      )

<<<<<<< HEAD
      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class FriendsConnection(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection> {
      val nullableIntAdapter: ResponseAdapter<Int?> = NullableResponseAdapter(intResponseAdapter)

      val nullableListOfNullableEdgesAdapter:
          ResponseAdapter<List<TestQuery.Data.Luke.FriendsConnection.Edges?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(customScalarAdapters))))

      override fun fromResponse(reader: JsonReader): TestQuery.Data.Luke.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<TestQuery.Data.Luke.FriendsConnection.Edges?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = nullableIntAdapter.fromResponse(reader)
            1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
            else -> break
=======
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.Luke.FriendsConnection {
        return reader.run {
          var totalCount: Int? = null
          var edges: List<TestQuery.Data.Luke.FriendsConnection.Edges?>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> totalCount = readInt(RESPONSE_FIELDS[0])
              1 -> edges = readList<TestQuery.Data.Luke.FriendsConnection.Edges>(RESPONSE_FIELDS[1]) { reader ->
                reader.readObject<TestQuery.Data.Luke.FriendsConnection.Edges> { reader ->
                  Edges.fromResponse(reader)
                }
              }
              else -> break
            }
>>>>>>> dev-3.x
          }
        }
        reader.endObject()
        return TestQuery.Data.Luke.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

<<<<<<< HEAD
      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Luke.FriendsConnection) {
        writer.beginObject()
        writer.name("totalCount")
        nullableIntAdapter.toResponse(writer, value.totalCount)
        writer.name("edges")
        nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
        writer.endObject()
      }

      companion object {
=======
      override fun toResponse(writer: ResponseWriter,
          value: TestQuery.Data.Luke.FriendsConnection) {
        writer.writeInt(RESPONSE_FIELDS[0], value.totalCount)
        writer.writeList(RESPONSE_FIELDS[1], value.edges) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Edges.toResponse(writer, value)
          }
        }
      }

      object Edges : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges> {
>>>>>>> dev-3.x
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Int"),
            fieldName = "totalCount",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

<<<<<<< HEAD
        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Edges(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges> {
        val nullableNodeAdapter: ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges.Node?>
            = NullableResponseAdapter(Node(customScalarAdapters))

        override fun fromResponse(reader: JsonReader): TestQuery.Data.Luke.FriendsConnection.Edges {
          var node: TestQuery.Data.Luke.FriendsConnection.Edges.Node? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = nullableNodeAdapter.fromResponse(reader)
              else -> break
            }
=======
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.Luke.FriendsConnection.Edges {
          return reader.run {
            var node: TestQuery.Data.Luke.FriendsConnection.Edges.Node? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> node = readObject<TestQuery.Data.Luke.FriendsConnection.Edges.Node>(RESPONSE_FIELDS[0]) { reader ->
                  Node.fromResponse(reader)
                }
                else -> break
              }
            }
            TestQuery.Data.Luke.FriendsConnection.Edges(
              node = node
            )
>>>>>>> dev-3.x
          }
          reader.endObject()
          return TestQuery.Data.Luke.FriendsConnection.Edges(
            node = node
          )
        }

<<<<<<< HEAD
        override fun toResponse(writer: JsonWriter,
            value: TestQuery.Data.Luke.FriendsConnection.Edges) {
          writer.beginObject()
          writer.name("node")
          nullableNodeAdapter.toResponse(writer, value.node)
          writer.endObject()
        }

        companion object {
=======
        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.Luke.FriendsConnection.Edges) {
          if(value.node == null) {
            writer.writeObject(RESPONSE_FIELDS[0], null)
          } else {
            writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
              Node.toResponse(writer, value.node)
            }
          }
        }

        object Node : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges.Node> {
>>>>>>> dev-3.x
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

<<<<<<< HEAD
          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Node(
          customScalarAdapters: CustomScalarAdapters
        ) : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges.Node> {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          override fun fromResponse(reader: JsonReader):
              TestQuery.Data.Luke.FriendsConnection.Edges.Node {
            var name: String? = null
            reader.beginObject()
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Luke.FriendsConnection.Edges.Node {
            return reader.run {
              var name: String? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> name = readString(RESPONSE_FIELDS[0])
                  else -> break
                }
              }
              TestQuery.Data.Luke.FriendsConnection.Edges.Node(
                name = name!!
              )
>>>>>>> dev-3.x
            }
            reader.endObject()
            return TestQuery.Data.Luke.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Luke.FriendsConnection.Edges.Node) {
            writer.beginObject()
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Luke.FriendsConnection.Edges.Node) {
            writer.writeString(RESPONSE_FIELDS[0], value.name)
>>>>>>> dev-3.x
          }
        }
      }
    }
  }
}
