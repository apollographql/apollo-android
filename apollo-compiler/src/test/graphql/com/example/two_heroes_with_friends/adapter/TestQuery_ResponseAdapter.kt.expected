// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.two_heroes_with_friends.adapter

import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.two_heroes_with_friends.TestQuery
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      responseName = "r2",
      fieldSets = listOf(
        ResponseField.FieldSet(null, R2.RESPONSE_FIELDS)
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      responseName = "luke",
      arguments = mapOf<String, Any?>(
        "episode" to "EMPIRE"),
      fieldSets = listOf(
        ResponseField.FieldSet(null, Luke.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    reader.beginObject()
    var r2: TestQuery.Data.R2? = null
    var luke: TestQuery.Data.Luke? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> r2 = R2.nullable().fromResponse(reader, responseAdapterCache)
        1 -> luke = Luke.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      r2 = r2,
      luke = luke
    )
    reader.endObject()
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("r2")
    R2.nullable().toResponse(writer, responseAdapterCache, value.r2)
    writer.name("luke")
    Luke.nullable().toResponse(writer, responseAdapterCache, value.luke)
    writer.endObject()
  }

  object R2 : ResponseAdapter<TestQuery.Data.R2> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
        fieldName = "friendsConnection",
        fieldSets = listOf(
          ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.R2 {
      reader.beginObject()
      var name: String? = null
      var friendsConnection: TestQuery.Data.R2.FriendsConnection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> friendsConnection = FriendsConnection.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.R2(
        name = name!!,
        friendsConnection = friendsConnection!!
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.R2
    ) {
      writer.beginObject()
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("friendsConnection")
      FriendsConnection.toResponse(writer, responseAdapterCache, value.friendsConnection)
      writer.endObject()
    }

    object FriendsConnection : ResponseAdapter<TestQuery.Data.R2.FriendsConnection> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("Int"),
          fieldName = "totalCount",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.R2.FriendsConnection {
        reader.beginObject()
        var totalCount: Int? = null
        var edges: List<TestQuery.Data.R2.FriendsConnection.Edges?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> edges = Edges.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.R2.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
        reader.endObject()
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.R2.FriendsConnection
      ) {
        writer.beginObject()
        writer.name("totalCount")
        NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
        writer.name("edges")
        Edges.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
        writer.endObject()
      }

      object Edges : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Character"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.R2.FriendsConnection.Edges {
          reader.beginObject()
          var node: TestQuery.Data.R2.FriendsConnection.Edges.Node? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = Node.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.R2.FriendsConnection.Edges(
            node = node
          )
          reader.endObject()
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.R2.FriendsConnection.Edges
        ) {
          writer.beginObject()
          writer.name("node")
          Node.nullable().toResponse(writer, responseAdapterCache, value.node)
          writer.endObject()
        }

        object Node : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edges.Node> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.R2.FriendsConnection.Edges.Node {
            reader.beginObject()
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.R2.FriendsConnection.Edges.Node(
              name = name!!
            )
            reader.endObject()
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.R2.FriendsConnection.Edges.Node
          ) {
            writer.beginObject()
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.endObject()
          }
        }
      }
    }
  }

  object Luke : ResponseAdapter<TestQuery.Data.Luke> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "id",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
        fieldName = "friendsConnection",
        fieldSets = listOf(
          ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Luke {
      reader.beginObject()
      var id: String? = null
      var name: String? = null
      var friendsConnection: TestQuery.Data.Luke.FriendsConnection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> friendsConnection = FriendsConnection.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.Luke(
        id = id!!,
        name = name!!,
        friendsConnection = friendsConnection!!
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Luke
    ) {
      writer.beginObject()
      writer.name("id")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("friendsConnection")
      FriendsConnection.toResponse(writer, responseAdapterCache, value.friendsConnection)
      writer.endObject()
    }

    object FriendsConnection : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("Int"),
          fieldName = "totalCount",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Luke.FriendsConnection {
        reader.beginObject()
        var totalCount: Int? = null
        var edges: List<TestQuery.Data.Luke.FriendsConnection.Edges?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> edges = Edges.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Luke.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
        reader.endObject()
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Luke.FriendsConnection
      ) {
        writer.beginObject()
        writer.name("totalCount")
        NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
        writer.name("edges")
        Edges.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
        writer.endObject()
      }

      object Edges : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Character"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Luke.FriendsConnection.Edges {
          reader.beginObject()
          var node: TestQuery.Data.Luke.FriendsConnection.Edges.Node? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = Node.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Luke.FriendsConnection.Edges(
            node = node
          )
          reader.endObject()
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Luke.FriendsConnection.Edges
        ) {
          writer.beginObject()
          writer.name("node")
          Node.nullable().toResponse(writer, responseAdapterCache, value.node)
          writer.endObject()
        }

        object Node : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edges.Node> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Luke.FriendsConnection.Edges.Node {
            reader.beginObject()
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Luke.FriendsConnection.Edges.Node(
              name = name!!
            )
            reader.endObject()
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Luke.FriendsConnection.Edges.Node
          ) {
            writer.beginObject()
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.endObject()
          }
        }
      }
    }
  }
}
