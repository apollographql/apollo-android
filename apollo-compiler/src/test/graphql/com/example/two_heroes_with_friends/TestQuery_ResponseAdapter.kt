// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.two_heroes_with_friends

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.two_heroes_with_friends.type.CustomType
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forObject("r2", "hero", null, true, null),
    ResponseField.forObject("luke", "hero", mapOf<String, Any>(
      "episode" to "EMPIRE"), true, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return Data.fromResponse(reader, __typename)
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    Data.toResponse(writer, value)
  }

  object Data : ResponseAdapter<TestQuery.Data> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forObject("r2", "hero", null, true, null),
      ResponseField.forObject("luke", "hero", mapOf<String, Any>(
        "episode" to "EMPIRE"), true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
      return reader.run {
        var r2: TestQuery.Data.R2? = null
        var luke: TestQuery.Data.Luke? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> r2 = readObject<TestQuery.Data.R2>(RESPONSE_FIELDS[0]) { reader ->
              R2.fromResponse(reader)
            }
            1 -> luke = readObject<TestQuery.Data.Luke>(RESPONSE_FIELDS[1]) { reader ->
              Luke.fromResponse(reader)
            }
            else -> break
          }
        }
        TestQuery.Data(
          r2 = r2,
          luke = luke
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
      if(value.r2 == null) {
        writer.writeObject(RESPONSE_FIELDS[0], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
          R2.toResponse(writer, value.r2)
        }
      }
      if(value.luke == null) {
        writer.writeObject(RESPONSE_FIELDS[1], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
          Luke.toResponse(writer, value.luke)
        }
      }
    }

    object R2 : ResponseAdapter<TestQuery.Data.R2> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forString("name", "name", null, false, null),
        ResponseField.forObject("friendsConnection", "friendsConnection", null, false, null)
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data.R2 {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var friendsConnection: TestQuery.Data.R2.FriendsConnection? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> friendsConnection = readObject<TestQuery.Data.R2.FriendsConnection>(RESPONSE_FIELDS[2]) { reader ->
                FriendsConnection.fromResponse(reader)
              }
              else -> break
            }
          }
          TestQuery.Data.R2(
            __typename = __typename!!,
            name = name!!,
            friendsConnection = friendsConnection!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.R2) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeObject(RESPONSE_FIELDS[2]) { writer ->
          FriendsConnection.toResponse(writer, value.friendsConnection)
        }
      }

      object FriendsConnection : ResponseAdapter<TestQuery.Data.R2.FriendsConnection> {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("totalCount", "totalCount", null, true, null),
          ResponseField.forList("edges", "edges", null, true, null)
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.R2.FriendsConnection {
          return reader.run {
            var __typename: String? = __typename
            var totalCount: Int? = null
            var edges: List<TestQuery.Data.R2.FriendsConnection.Edge?>? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                1 -> totalCount = readInt(RESPONSE_FIELDS[1])
                2 -> edges = readList<TestQuery.Data.R2.FriendsConnection.Edge>(RESPONSE_FIELDS[2]) { reader ->
                  reader.readObject<TestQuery.Data.R2.FriendsConnection.Edge> { reader ->
                    Edge.fromResponse(reader)
                  }
                }
                else -> break
              }
            }
            TestQuery.Data.R2.FriendsConnection(
              __typename = __typename!!,
              totalCount = totalCount,
              edges = edges
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.R2.FriendsConnection) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          writer.writeInt(RESPONSE_FIELDS[1], value.totalCount)
          writer.writeList(RESPONSE_FIELDS[2], value.edges) { values, listItemWriter ->
            values?.forEach { value ->
              if(value == null) {
                listItemWriter.writeObject(null)
              } else {
                listItemWriter.writeObject { writer ->
                  Edge.toResponse(writer, value)
                }
              }
            }
          }
        }

        object Edge : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edge> {
          private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forString("__typename", "__typename", null, false, null),
            ResponseField.forObject("node", "node", null, true, null)
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.R2.FriendsConnection.Edge {
            return reader.run {
              var __typename: String? = __typename
              var node: TestQuery.Data.R2.FriendsConnection.Edge.Node? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> node = readObject<TestQuery.Data.R2.FriendsConnection.Edge.Node>(RESPONSE_FIELDS[1]) { reader ->
                    Node.fromResponse(reader)
                  }
                  else -> break
                }
              }
              TestQuery.Data.R2.FriendsConnection.Edge(
                __typename = __typename!!,
                node = node
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.R2.FriendsConnection.Edge) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            if(value.node == null) {
              writer.writeObject(RESPONSE_FIELDS[1], null)
            } else {
              writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
                Node.toResponse(writer, value.node)
              }
            }
          }

          object Node : ResponseAdapter<TestQuery.Data.R2.FriendsConnection.Edge.Node> {
            private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.forString("__typename", "__typename", null, false, null),
              ResponseField.forString("name", "name", null, false, null)
            )

            override fun fromResponse(reader: ResponseReader, __typename: String?):
                TestQuery.Data.R2.FriendsConnection.Edge.Node {
              return reader.run {
                var __typename: String? = __typename
                var name: String? = null
                while(true) {
                  when (selectField(RESPONSE_FIELDS)) {
                    0 -> __typename = readString(RESPONSE_FIELDS[0])
                    1 -> name = readString(RESPONSE_FIELDS[1])
                    else -> break
                  }
                }
                TestQuery.Data.R2.FriendsConnection.Edge.Node(
                  __typename = __typename!!,
                  name = name!!
                )
              }
            }

            override fun toResponse(writer: ResponseWriter,
                value: TestQuery.Data.R2.FriendsConnection.Edge.Node) {
              writer.writeString(RESPONSE_FIELDS[0], value.__typename)
              writer.writeString(RESPONSE_FIELDS[1], value.name)
            }
          }
        }
      }
    }

    object Luke : ResponseAdapter<TestQuery.Data.Luke> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
        ResponseField.forString("name", "name", null, false, null),
        ResponseField.forObject("friendsConnection", "friendsConnection", null, false, null)
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data.Luke {
        return reader.run {
          var __typename: String? = __typename
          var id: String? = null
          var name: String? = null
          var friendsConnection: TestQuery.Data.Luke.FriendsConnection? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
              2 -> name = readString(RESPONSE_FIELDS[2])
              3 -> friendsConnection = readObject<TestQuery.Data.Luke.FriendsConnection>(RESPONSE_FIELDS[3]) { reader ->
                FriendsConnection.fromResponse(reader)
              }
              else -> break
            }
          }
          TestQuery.Data.Luke(
            __typename = __typename!!,
            id = id!!,
            name = name!!,
            friendsConnection = friendsConnection!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Luke) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, value.id)
        writer.writeString(RESPONSE_FIELDS[2], value.name)
        writer.writeObject(RESPONSE_FIELDS[3]) { writer ->
          FriendsConnection.toResponse(writer, value.friendsConnection)
        }
      }

      object FriendsConnection : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection> {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("totalCount", "totalCount", null, true, null),
          ResponseField.forList("edges", "edges", null, true, null)
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.Luke.FriendsConnection {
          return reader.run {
            var __typename: String? = __typename
            var totalCount: Int? = null
            var edges: List<TestQuery.Data.Luke.FriendsConnection.Edge?>? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                1 -> totalCount = readInt(RESPONSE_FIELDS[1])
                2 -> edges = readList<TestQuery.Data.Luke.FriendsConnection.Edge>(RESPONSE_FIELDS[2]) { reader ->
                  reader.readObject<TestQuery.Data.Luke.FriendsConnection.Edge> { reader ->
                    Edge.fromResponse(reader)
                  }
                }
                else -> break
              }
            }
            TestQuery.Data.Luke.FriendsConnection(
              __typename = __typename!!,
              totalCount = totalCount,
              edges = edges
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.Luke.FriendsConnection) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          writer.writeInt(RESPONSE_FIELDS[1], value.totalCount)
          writer.writeList(RESPONSE_FIELDS[2], value.edges) { values, listItemWriter ->
            values?.forEach { value ->
              if(value == null) {
                listItemWriter.writeObject(null)
              } else {
                listItemWriter.writeObject { writer ->
                  Edge.toResponse(writer, value)
                }
              }
            }
          }
        }

        object Edge : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edge> {
          private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forString("__typename", "__typename", null, false, null),
            ResponseField.forObject("node", "node", null, true, null)
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Luke.FriendsConnection.Edge {
            return reader.run {
              var __typename: String? = __typename
              var node: TestQuery.Data.Luke.FriendsConnection.Edge.Node? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> node = readObject<TestQuery.Data.Luke.FriendsConnection.Edge.Node>(RESPONSE_FIELDS[1]) { reader ->
                    Node.fromResponse(reader)
                  }
                  else -> break
                }
              }
              TestQuery.Data.Luke.FriendsConnection.Edge(
                __typename = __typename!!,
                node = node
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Luke.FriendsConnection.Edge) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            if(value.node == null) {
              writer.writeObject(RESPONSE_FIELDS[1], null)
            } else {
              writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
                Node.toResponse(writer, value.node)
              }
            }
          }

          object Node : ResponseAdapter<TestQuery.Data.Luke.FriendsConnection.Edge.Node> {
            private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.forString("__typename", "__typename", null, false, null),
              ResponseField.forString("name", "name", null, false, null)
            )

            override fun fromResponse(reader: ResponseReader, __typename: String?):
                TestQuery.Data.Luke.FriendsConnection.Edge.Node {
              return reader.run {
                var __typename: String? = __typename
                var name: String? = null
                while(true) {
                  when (selectField(RESPONSE_FIELDS)) {
                    0 -> __typename = readString(RESPONSE_FIELDS[0])
                    1 -> name = readString(RESPONSE_FIELDS[1])
                    else -> break
                  }
                }
                TestQuery.Data.Luke.FriendsConnection.Edge.Node(
                  __typename = __typename!!,
                  name = name!!
                )
              }
            }

            override fun toResponse(writer: ResponseWriter,
                value: TestQuery.Data.Luke.FriendsConnection.Edge.Node) {
              writer.writeString(RESPONSE_FIELDS[0], value.__typename)
              writer.writeString(RESPONSE_FIELDS[1], value.name)
            }
          }
        }
      }
    }
  }
}
