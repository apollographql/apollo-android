// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.example.named_fragment_inside_inline_fragment.GetHero
import com.example.named_fragment_inside_inline_fragment.fragment.CharacterAppearsIn
import com.example.named_fragment_inside_inline_fragment.fragment.CharacterName
import com.example.named_fragment_inside_inline_fragment.fragment.adapter.CharacterAppearsIn_ResponseAdapter
import com.example.named_fragment_inside_inline_fragment.fragment.adapter.CharacterName_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetHero_ResponseAdapter : ResponseAdapter<GetHero.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", CharacterName_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", CharacterName_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Droid", CharacterAppearsIn_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", CharacterAppearsIn_ResponseAdapter.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      GetHero.Data {
    var hero: GetHero.Data.Hero? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    reader.endObject()
    return GetHero.Data(
      hero = hero
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: GetHero.Data
  ) {
    writer.beginObject()
    writer.name("hero")
    Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    writer.endObject()
  }

  object Hero : ResponseAdapter<GetHero.Data.Hero> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetHero.Data.Hero {
      val reader = reader.buffer()
      reader.beginObject()
      var __typename: String? = null
<<<<<<< HEAD
      var characterName: CharacterName.Data? = null
      var characterAppearsIn: CharacterAppearsIn.Data? = null
=======

      var asAsCharacter: GetHero.Data.Hero.AsCharacter? = null
>>>>>>> ab5258fe0... all compiler tests pass
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
<<<<<<< HEAD
        reader.rewind()
<<<<<<< HEAD
        characterName = CharacterName_ResponseAdapter.fromResponse(reader, responseAdapterCache)
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        characterAppearsIn = CharacterAppearsIn_ResponseAdapter.fromResponse(reader, responseAdapterCache)
=======
=======
        (reader as MapJsonReader).rewind()
>>>>>>> ef2ead98d... everything works, yay \o/
        asAsCharacter = AsCharacter.fromFields(reader, responseAdapterCache)
>>>>>>> ab5258fe0... all compiler tests pass
      }

      reader.endObject()
      return GetHero.Data.Hero(
        __typename = __typename!!,
        characterName = characterName,
        characterAppearsIn = characterAppearsIn
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetHero.Data.Hero
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.characterName != null)
          CharacterName_ResponseAdapter.toResponse(writer, responseAdapterCache, value.characterName)
      if (value.characterAppearsIn != null)
          CharacterAppearsIn_ResponseAdapter.toResponse(writer, responseAdapterCache, value.characterAppearsIn)
      writer.endObject()
    }
<<<<<<< HEAD
=======

    object AsCharacter : ResponseAdapter<GetHero.Data.Hero.AsCharacter> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetHero.Data.Hero.AsCharacter {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetHero.Data.Hero.AsCharacter {
        var __typename: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHero.Data.Hero.AsCharacter(
          __typename = __typename!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHero.Data.Hero.AsCharacter
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.endObject()
      }
    }
>>>>>>> ab5258fe0... all compiler tests pass
  }
}
