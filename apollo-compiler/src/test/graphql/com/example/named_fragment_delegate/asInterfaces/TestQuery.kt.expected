//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.named_fragment_delegate

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.named_fragment_delegate.adapter.TestQuery_ResponseAdapter
import com.example.named_fragment_delegate.fragment.DroidDetails
import com.example.named_fragment_delegate.responsefields.TestQuery_ResponseFields
import kotlin.Any
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val hero: Hero?
  ) : Query.Data {
    interface Hero {
      val __typename: String

      companion object {
        fun Hero.asDroidHero() = this as? DroidHero

        fun Hero.asHumanHero() = this as? HumanHero

        fun Hero.droidDetails() = this as? DroidDetails
      }
    }

    data class OtherHero(
      override val __typename: String
    ) : Hero

    data class DroidHero(
      override val __typename: String,
      /**
       * What others call this droid
       */
      override val name: String,
      /**
       * This droid's primary function
       */
      override val primaryFunction: String?,
      /**
       * This droid's friends, or an empty list if they have none
       */
      override val friends: List<Friends?>?
    ) : DroidDetails, Hero {
      fun friendsFilterNotNull(): List<Friends>? = friends?.filterNotNull()

      data class Friends(
        /**
         * The name of the character
         */
        override val name: String
      ) : DroidDetails.Friends
    }

    data class HumanHero(
      override val __typename: String,
      /**
       * What this human calls themselves
       */
      val name: String,
      /**
       * Profile link
       */
      val profileLink: Any,
      /**
       * The friends of the human exposed as a connection with edges
       */
      val friendsConnection: FriendsConnection
    ) : Hero {
      data class FriendsConnection(
        /**
         * The edges for each of the character's friends.
         */
        val edges: List<Edges?>?
      ) {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          val node: Node?
        ) {
          data class Node(
            /**
             * The name of the character
             */
            val name: String
          )
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "5cd5c191d2818c7ad983ae3f67ca2d1253522dddef8cd23f58f2fdbe6f60de2d"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    __typename
          |    ...DroidDetails
          |    ...HumanDetails
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
