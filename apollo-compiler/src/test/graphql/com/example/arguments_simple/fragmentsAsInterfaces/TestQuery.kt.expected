//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.arguments_simple

import com.apollographql.apollo3.api.Input
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.arguments_simple.adapter.TestQuery_ResponseAdapter
import com.example.arguments_simple.adapter.TestQuery_VariablesAdapter
import com.example.arguments_simple.responsefields.TestQuery_ResponseFields
import com.example.arguments_simple.type.Episode
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List

data class TestQuery(
  val episode: Input<Episode?> = Input.Absent,
  val IncludeName: Boolean,
  val friendsCount: Int,
  val listOfListOfStringArgs: List<List<String?>>
) : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    TestQuery_VariablesAdapter.obj().toResponse(writer, responseAdapterCache, this)
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val hero: Hero?,
    val heroWithReview: HeroWithReview?
  ) : Query.Data {
    data class Hero(
      override val __typename: String,
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection
    ) : HeroDetails.Data {
      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edges?>?
      ) : HeroDetails.Data.FriendsConnection {
        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : HeroDetails.Data.FriendsConnection.Edges {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : HeroDetails.Data.FriendsConnection.Edges.Node
        }
      }
    }

    data class HeroWithReview(
      /**
       * What this human calls themselves
       */
      val name: String
    )
  }

  companion object {
    const val OPERATION_ID: String = "TestQuery"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery(${'$'}episode: Episode, ${'$'}IncludeName: Boolean!, ${'$'}friendsCount: Int!, ${'$'}listOfListOfStringArgs: [[String]!]!) {
          |  hero(episode: ${'$'}episode, listOfListOfStringArgs: ${'$'}listOfListOfStringArgs) {
          |    __typename
          |    name @include(if: ${'$'}IncludeName)
          |    ...HeroDetails
          |  }
          |  heroWithReview(episode: ${'$'}episode, review: {
          |    stars: 5
          |    favoriteColor: {
          |      red: 1
          |      blue: 1
          |    }
          |    
          |    listOfStringNonOptional: []
          |  }
          |  ) {
          |    name
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
