// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.arguments_simple.adapter

import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.arguments_simple.TestQuery
import com.example.arguments_simple.fragment.HeroDetails
import com.example.arguments_simple.fragment.adapter.HeroDetails_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val nullableHeroAdapter: ResponseAdapter<TestQuery.Data.Hero?> =
      NullableResponseAdapter(Hero(responseAdapterCache))

  private val nullableHeroWithReviewAdapter: ResponseAdapter<TestQuery.Data.HeroWithReview?> =
      NullableResponseAdapter(HeroWithReview(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var hero: TestQuery.Data.Hero? = null
    var heroWithReview: TestQuery.Data.HeroWithReview? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> hero = nullableHeroAdapter.fromResponse(reader)
        1 -> heroWithReview = nullableHeroWithReviewAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      hero = hero,
      heroWithReview = heroWithReview
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("hero")
    nullableHeroAdapter.toResponse(writer, value.hero)
    writer.name("heroWithReview")
    nullableHeroWithReviewAdapter.toResponse(writer, value.heroWithReview)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        arguments = mapOf<String, Any?>(
          "episode" to Variable("episode"),
          "listOfListOfStringArgs" to Variable("listOfListOfStringArgs")),
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Human"),
        fieldName = "heroWithReview",
        arguments = mapOf<String, Any?>(
          "episode" to Variable("episode"),
          "review" to mapOf<String, Any?>(
            "stars" to 5,
            "favoriteColor" to mapOf<String, Any?>(
              "red" to 1,
              "blue" to 1.0),
            "listOfStringNonOptional" to emptyList<Any?>())),
        fieldSets = listOf(
          ResponseField.FieldSet(null, HeroWithReview.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Hero(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Hero> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val nullableStringAdapter: ResponseAdapter<String?> =
        NullableResponseAdapter(StringResponseAdapter)

    private val HeroDetailsAdapter: HeroDetails_ResponseAdapter =
        com.example.arguments_simple.fragment.adapter.HeroDetails_ResponseAdapter(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Hero {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var name: String? = null
      var heroDetails: HeroDetails.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> name = nullableStringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        heroDetails = HeroDetailsAdapter.fromResponse(reader)
      }

      return TestQuery.Data.Hero(
        __typename = __typename!!,
        name = name,
        heroDetails = heroDetails
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Hero) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)

      writer.name("name")
      nullableStringAdapter.toResponse(writer, value.name)
      if (value.heroDetails != null) HeroDetailsAdapter.toResponse(writer, value.heroDetails)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "name",
          conditions = listOf(
            ResponseField.Condition.booleanCondition("IncludeName", false)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }

  class HeroWithReview(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.HeroWithReview> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    override fun fromResponse(reader: JsonReader): TestQuery.Data.HeroWithReview {
      var name: String? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.HeroWithReview(
        name = name!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.HeroWithReview) {
      writer.beginObject()
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }
}
