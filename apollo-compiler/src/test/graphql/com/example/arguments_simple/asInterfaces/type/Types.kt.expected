//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.arguments_simple.type

import com.apollographql.apollo3.api.CustomScalar
import com.apollographql.apollo3.api.Interface
import com.apollographql.apollo3.api.Object
import com.apollographql.apollo3.api.SchemaType
import com.apollographql.apollo3.api.Union
import com.apollographql.apollo3.api.possibleTypes
import kotlin.collections.List

/**
 * Auto generated constants representing the custom scalars, objects, interfaces and unions in the
 * schema. Input objects are left out because they are generated separately
 */
object Types {
  /**
   * The `Date` scalar type represents date format.
   */
  val Date: CustomScalar = CustomScalar("Date", "kotlin.Any")

  /**
   * UnsupportedType for testing
   */
  val UnsupportedType: CustomScalar = CustomScalar("UnsupportedType", "kotlin.Any")

  /**
   * URL for testing
   */
  val URL: CustomScalar = CustomScalar("URL", "kotlin.Any")

  /**
   * For testing fragment type coercion
   */
  val Bar: Interface = Interface("Bar")

  /**
   * A character from the Star Wars universe
   */
  val Character: Interface = Interface("Character")

  /**
   * For testing fragment type coercion
   */
  val Foo: Interface = Interface("Foo")

  val BarObject: Object = Object("BarObject", Bar)

  /**
   * An autonomous mechanical character in the Star Wars universe
   */
  val Droid: Object = Object("Droid", Character)

  /**
   * For testing fragment type coercion
   */
  val FooBar: Object = Object("FooBar", Foo, Bar)

  /**
   * For testing fragment type coercion
   */
  val FooObject: Object = Object("FooObject", Foo)

  /**
   * A connection object for a character's friends
   */
  val FriendsConnection: Object = Object("FriendsConnection")

  /**
   * An edge object for a character's friends
   */
  val FriendsEdge: Object = Object("FriendsEdge")

  /**
   * A humanoid creature from the Star Wars universe
   */
  val Human: Object = Object("Human", Character)

  /**
   * The mutation type, represents all updates we can make to our data
   */
  val Mutation: Object = Object("Mutation")

  /**
   * Information for paginating this connection
   */
  val PageInfo: Object = Object("PageInfo")

  /**
   * The query type, represents all of the entry points into our object graph
   */
  val Query: Object = Object("Query")

  /**
   * Represents a review for a movie
   */
  val Review: Object = Object("Review")

  val Starship: Object = Object("Starship")

  /**
   * To test recursive structures
   */
  val Tree: Object = Object("Tree")

  val TypeWithGraphQLKeywords: Object = Object("TypeWithGraphQLKeywords")

  val SearchResult: Union = Union("SearchResult", Human, Droid, Starship)

  val all: List<SchemaType> = listOf(
        Date, UnsupportedType, URL, Bar, Character, Foo, BarObject, Droid, FooBar, FooObject,
            FriendsConnection, FriendsEdge, Human, Mutation, PageInfo, Query, Review, Starship,
            Tree, TypeWithGraphQLKeywords, SearchResult)


  fun possibleTypes(type: SchemaType): List<Object> = possibleTypes(all, type)}
