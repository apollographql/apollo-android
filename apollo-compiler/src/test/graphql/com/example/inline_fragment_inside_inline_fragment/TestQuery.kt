// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_inside_inline_fragment

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun responseFieldMapper(): ResponseFieldMapper<Data> {
    return ResponseFieldMapper { reader ->
      TestQuery_ResponseAdapter.fromResponse(reader)
    }
  }

  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val search: List<Search?>?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller { writer ->
        TestQuery_ResponseAdapter.Data.toResponse(writer, this)
      }
    }

    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    interface Search {
      val __typename: String

      fun marshaller(): ResponseFieldMarshaller

      interface Character : Search {
        override val __typename: String

        /**
         * The name of the character
         */
        val name: String

        override fun marshaller(): ResponseFieldMarshaller

        interface Human : Character {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The home planet of the human, or null if unknown
           */
          val homePlanet: String?

          override fun marshaller(): ResponseFieldMarshaller
        }

        interface Droid : Character {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * This droid's primary function
           */
          val primaryFunction: String?

          override fun marshaller(): ResponseFieldMarshaller
        }
      }

      interface CharacterSearch : Search, Character {
        override val __typename: String

        /**
         * The name of the character
         */
        override val name: String

        override fun marshaller(): ResponseFieldMarshaller

        interface Human : Character, Character.Human, CharacterSearch {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The home planet of the human, or null if unknown
           */
          override val homePlanet: String?

          override fun marshaller(): ResponseFieldMarshaller
        }

        interface Droid : Character, Character.Droid, CharacterSearch {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * This droid's primary function
           */
          override val primaryFunction: String?

          override fun marshaller(): ResponseFieldMarshaller
        }

        data class HumanCharacterSearch(
          override val __typename: String,
          /**
           * The name of the character
           */
          override val name: String,
          /**
           * The home planet of the human, or null if unknown
           */
          override val homePlanet: String?
        ) : Character, Character.Human, CharacterSearch, Human {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestQuery_ResponseAdapter.Data.Search.CharacterSearch.HumanCharacterSearch.toResponse(writer, this)
            }
          }
        }

        data class DroidCharacterSearch(
          override val __typename: String,
          /**
           * The name of the character
           */
          override val name: String,
          /**
           * This droid's primary function
           */
          override val primaryFunction: String?
        ) : Character, Character.Droid, CharacterSearch, Droid {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestQuery_ResponseAdapter.Data.Search.CharacterSearch.DroidCharacterSearch.toResponse(writer, this)
            }
          }
        }

        data class OtherCharacterSearch(
          override val __typename: String,
          /**
           * The name of the character
           */
          override val name: String
        ) : Search, Character, CharacterSearch {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestQuery_ResponseAdapter.Data.Search.CharacterSearch.OtherCharacterSearch.toResponse(writer, this)
            }
          }
        }

        companion object {
          fun CharacterSearch.asCharacter(): Character? = this as? Character

          fun CharacterSearch.asHuman(): Human? = this as? Human

          fun CharacterSearch.asDroid(): Droid? = this as? Droid
        }
      }

      data class OtherSearch(
        override val __typename: String
      ) : Search {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestQuery_ResponseAdapter.Data.Search.OtherSearch.toResponse(writer, this)
          }
        }
      }

      companion object {
        fun Search.asCharacter(): Character? = this as? Character
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "4f32ea4bdd2a95a29bde61273602c22c698cd333f1701001d1a339fb276c6438"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  search(text: "bla-bla") {
          |    __typename
          |    ... on Character {
          |      __typename
          |      name
          |      ... on Human {
          |        homePlanet
          |      }
          |      ... on Droid {
          |        primaryFunction
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "TestQuery"
      }
    }
  }
}
