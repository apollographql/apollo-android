//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.inline_fragment_inside_inline_fragment.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        search = search
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    }

    object Search : ResponseAdapter<TestQuery.Data.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "asCharacter")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search {
        var __typename: String? = null
        var asCharacter: TestQuery.Data.Search.AsCharacter? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> asCharacter = AsCharacter.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search(
          __typename = __typename!!,
          asCharacter = asCharacter
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("asCharacter")
        AsCharacter.nullable().toResponse(writer, responseAdapterCache, value.asCharacter)
      }

      object AsCharacter : ResponseAdapter<TestQuery.Data.Search.AsCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asHuman", "asDroid")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.AsCharacter {
          var __typename: String? = null
          var name: String? = null
          var asHuman: TestQuery.Data.Search.AsCharacter.AsHuman? = null
          var asDroid: TestQuery.Data.Search.AsCharacter.AsDroid? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
              3 -> asDroid = AsDroid.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Search.AsCharacter(
            __typename = __typename!!,
            name = name!!,
            asHuman = asHuman,
            asDroid = asDroid
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.AsCharacter
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("asHuman")
          AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
          writer.name("asDroid")
          AsDroid.nullable().toResponse(writer, responseAdapterCache, value.asDroid)
        }

        object AsHuman : ResponseAdapter<TestQuery.Data.Search.AsCharacter.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "homePlanet")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.AsHuman {
            var __typename: String? = null
            var name: String? = null
            var homePlanet: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.AsHuman(
              __typename = __typename!!,
              name = name!!,
              homePlanet = homePlanet
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.AsHuman
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("homePlanet")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
          }
        }

        object AsDroid : ResponseAdapter<TestQuery.Data.Search.AsCharacter.AsDroid> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.AsDroid {
            var __typename: String? = null
            var name: String? = null
            var primaryFunction: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.AsDroid(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.AsDroid
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("primaryFunction")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                value.primaryFunction)
          }
        }
      }
    }
  }
}
