//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_fragment_inside_inline_fragment

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.inline_fragment_inside_inline_fragment.responsefields.TestQuery_ResponseFields
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val search: List<Search?>?
  ) : Query.Data {
    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    data class Search(
      val __typename: String,
      /**
       * Synthetic field for inline fragment
       */
      val asCharacter: AsCharacter?
    ) {
      data class AsCharacter(
        val __typename: String,
        /**
         * The name of the character
         */
        val name: String,
        /**
         * Synthetic field for inline fragment
         */
        val asHuman: AsHuman?,
        /**
         * Synthetic field for inline fragment
         */
        val asDroid: AsDroid?
      ) {
        data class AsHuman(
          val __typename: String,
          /**
           * The name of the character
           */
          val name: String,
          /**
           * The home planet of the human, or null if unknown
           */
          val homePlanet: String?
        )

        data class AsDroid(
          val __typename: String,
          /**
           * The name of the character
           */
          val name: String,
          /**
           * This droid's primary function
           */
          val primaryFunction: String?
        )
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "4f32ea4bdd2a95a29bde61273602c22c698cd333f1701001d1a339fb276c6438"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  search(text: "bla-bla") {
          |    __typename
          |    ... on Character {
          |      __typename
          |      name
          |      ... on Human {
          |        homePlanet
          |      }
          |      ... on Droid {
          |        primaryFunction
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
