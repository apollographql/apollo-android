//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_inside_inline_fragment.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var search: List<TestQuery.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.search)
    }

    object Search : Adapter<TestQuery.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Search {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asCharacter: TestQuery.AsCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
          asCharacter = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Search(
          __typename = __typename,
          asCharacter = asCharacter
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Search
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.asCharacter != null) {
          com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.toJson(writer,
              customScalarAdapters, value.asCharacter)
        }
      }

      object AsCharacter : Adapter<TestQuery.AsCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsCharacter {
          var __typename: String? = null
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var asHuman: TestQuery.AsHuman? = null
          if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
            asHuman = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.AsHuman.fromJson(reader,
                customScalarAdapters)
          }

          reader.rewind()
          var asDroid: TestQuery.AsDroid? = null
          if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
            asDroid = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.AsDroid.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.AsCharacter(
            __typename = __typename,
            name = name!!,
            asHuman = asHuman,
            asDroid = asDroid
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsCharacter
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          if (value.asHuman != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.AsHuman.toJson(writer,
                customScalarAdapters, value.asHuman)
          }

          if (value.asDroid != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.AsCharacter.AsDroid.toJson(writer,
                customScalarAdapters, value.asDroid)
          }
        }

        object AsHuman : Adapter<TestQuery.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("homePlanet", "__typename", "name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.AsHuman {
            var homePlanet: String? = null
            var __typename: String? = null
            var name: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.AsHuman(
              homePlanet = homePlanet,
              __typename = __typename!!,
              name = name!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.AsHuman
          ) {
            writer.name("homePlanet")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)
          }
        }

        object AsDroid : Adapter<TestQuery.AsDroid> {
          val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "__typename", "name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.AsDroid {
            var primaryFunction: String? = null
            var __typename: String? = null
            var name: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.AsDroid(
              primaryFunction = primaryFunction,
              __typename = __typename!!,
              name = name!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.AsDroid
          ) {
            writer.name("primaryFunction")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)
          }
        }
      }
    }
  }
}
