// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.reserved_keywords.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val nullableYieldAdapter: ResponseAdapter<TestQuery.Data.Yield?> =
      NullableResponseAdapter(Yield(responseAdapterCache))

  private val nullableListOfNullableObjectsAdapter: ResponseAdapter<List<TestQuery.Data.Objects?>?>
      =
      NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Objects(responseAdapterCache))))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var yield_: TestQuery.Data.Yield? = null
    var objects: List<TestQuery.Data.Objects?>? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> yield_ = nullableYieldAdapter.fromResponse(reader)
        1 -> objects = nullableListOfNullableObjectsAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      yield_ = yield_,
      objects = objects
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("yield")
    nullableYieldAdapter.toResponse(writer, value.yield_)
    writer.name("objects")
    nullableListOfNullableObjectsAdapter.toResponse(writer, value.objects)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        responseName = "yield",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Yield.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
        fieldName = "search",
        responseName = "objects",
        arguments = mapOf<String, Any?>(
          "text" to "abc"),
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", Objects.AsCharacter.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", Objects.AsCharacter.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Yield(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Yield> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Yield {
      var it_: String? = null
      var name: String? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> it_ = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.Yield(
        it_ = it_!!,
        name = name!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Yield) {
      writer.beginObject()
      writer.name("it")
      stringAdapter.toResponse(writer, value.it_)
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
          responseName = "it",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }

  class Objects(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Objects> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val AsCharacterAdapter: AsCharacter =
        com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.Objects.AsCharacter(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Objects {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var asAsCharacter: TestQuery.Data.Objects.AsCharacter? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        asAsCharacter = AsCharacterAdapter.fromResponse(reader, __typename)
      }

      return TestQuery.Data.Objects(
        __typename = __typename!!,
        asAsCharacter = asAsCharacter
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Objects) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.asAsCharacter != null) AsCharacterAdapter.toResponse(writer, value.asAsCharacter)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class AsCharacter(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?):
          TestQuery.Data.Objects.AsCharacter {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestQuery.Data.Objects.AsCharacter(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Objects.AsCharacter) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
