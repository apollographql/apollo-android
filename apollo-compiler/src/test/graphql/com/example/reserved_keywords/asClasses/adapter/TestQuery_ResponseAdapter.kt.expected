//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var yield_: TestQuery.Data.Yield? = null
      var objects: List<TestQuery.Data.Objects?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> yield_ = Yield.nullable().fromResponse(reader, responseAdapterCache)
          1 -> objects = Objects.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        yield_ = yield_,
        objects = objects
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("yield")
      Yield.nullable().toResponse(writer, responseAdapterCache, value.yield_)
      writer.name("objects")
      Objects.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.objects)
    }

    object Yield : ResponseAdapter<TestQuery.Data.Yield> {
      val RESPONSE_NAMES: List<String> = listOf("it", "name")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Yield {
        var it_: String? = null
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> it_ = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Yield(
          it_ = it_!!,
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Yield
      ) {
        writer.name("it")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.it_)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object Objects : ResponseAdapter<TestQuery.Data.Objects> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "asCharacter")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Objects {
        var __typename: String? = null
        var asCharacter: TestQuery.Data.Objects.AsCharacter? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> asCharacter = AsCharacter.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Objects(
          __typename = __typename!!,
          asCharacter = asCharacter
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Objects
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("asCharacter")
        AsCharacter.nullable().toResponse(writer, responseAdapterCache, value.asCharacter)
      }

      object AsCharacter : ResponseAdapter<TestQuery.Data.Objects.AsCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Objects.AsCharacter {
          var __typename: String? = null
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Objects.AsCharacter(
            __typename = __typename!!,
            name = name!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Objects.AsCharacter
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }
  }
}
