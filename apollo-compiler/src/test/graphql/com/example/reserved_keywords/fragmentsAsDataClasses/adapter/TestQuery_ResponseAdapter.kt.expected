// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.reserved_keywords.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      responseName = "yield",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Yield.RESPONSE_FIELDS)
      ),
    ),
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
      fieldName = "search",
      responseName = "objects",
      arguments = mapOf<String, Any?>(
        "text" to "abc"),
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", Objects.AsCharacter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", Objects.AsCharacter.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    reader.beginObject()
    var yield_: TestQuery.Data.Yield? = null
    var objects: List<TestQuery.Data.Objects?>? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> yield_ = Yield.nullable().fromResponse(reader, responseAdapterCache)
        1 -> objects = Objects.nullable().list().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      yield_ = yield_,
      objects = objects
    )
    reader.endObject()
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("yield")
    Yield.nullable().toResponse(writer, responseAdapterCache, value.yield_)
    writer.name("objects")
    Objects.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.objects)
    writer.endObject()
  }

  object Yield : ResponseAdapter<TestQuery.Data.Yield> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "id",
        responseName = "it",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Yield {
      reader.beginObject()
      var it_: String? = null
      var name: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> it_ = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.Yield(
        it_ = it_!!,
        name = name!!
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Yield
    ) {
      writer.beginObject()
      writer.name("it")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.it_)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.endObject()
    }
  }

  object Objects : ResponseAdapter<TestQuery.Data.Objects> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Objects {
      reader.beginObject()
      val reader = reader.buffer()
      var __typename: String? = null

      var asAsCharacter: TestQuery.Data.Objects.AsCharacter? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        asAsCharacter = AsCharacter.fromFields(reader, responseAdapterCache)
      }

      return TestQuery.Data.Objects(
        __typename = __typename!!,
        asAsCharacter = asAsCharacter
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Objects
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.asAsCharacter != null)
          AsCharacter.toResponse(writer, responseAdapterCache, value.asAsCharacter)
      writer.endObject()
    }

    object AsCharacter : ResponseAdapter<TestQuery.Data.Objects.AsCharacter> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Objects.AsCharacter {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Objects.AsCharacter {
        var __typename: String? = null
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Objects.AsCharacter(
          __typename = __typename!!,
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Objects.AsCharacter
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.endObject()
      }
    }
  }
}
