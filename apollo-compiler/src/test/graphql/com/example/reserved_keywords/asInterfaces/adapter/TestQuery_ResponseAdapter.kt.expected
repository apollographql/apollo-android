//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var yield_: TestQuery.Data.Yield? = null
      var objects: List<TestQuery.Data.Object?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> yield_ = Yield.obj().nullable().fromResponse(reader, responseAdapterCache)
          1 -> objects = Object.obj().nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        yield_ = yield_,
        objects = objects
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("yield")
      Yield.obj().nullable().toResponse(writer, responseAdapterCache, value.yield_)
      writer.name("objects")
      Object.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
          value.objects)
    }

    object Yield : ResponseAdapter<TestQuery.Data.Yield> {
      val RESPONSE_NAMES: List<String> = listOf("it", "name")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Yield {
        var it_: String? = null
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> it_ = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Yield(
          it_ = it_!!,
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Yield
      ) {
        writer.name("it")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.it_)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object Object : ResponseAdapter<TestQuery.Data.Object> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Object {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterObject.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherObject.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Object
      ) {
        when(value) {
          is TestQuery.Data.CharacterObject -> CharacterObject.toResponse(writer,
              responseAdapterCache, value)
          is TestQuery.Data.OtherObject -> OtherObject.toResponse(writer, responseAdapterCache,
              value)
        }
      }
    }

    object CharacterObject {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): TestQuery.Data.CharacterObject {
        var __typename: String? = typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.CharacterObject(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.CharacterObject
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object OtherObject {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): TestQuery.Data.OtherObject {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherObject(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherObject
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
