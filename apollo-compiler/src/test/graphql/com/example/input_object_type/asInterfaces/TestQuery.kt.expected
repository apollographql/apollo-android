//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.input_object_type

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.Mutation
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.input_object_type.adapter.TestQuery_ResponseAdapter
import com.example.input_object_type.adapter.TestQuery_VariablesAdapter
import com.example.input_object_type.responsefields.TestQuery_ResponseFields
import com.example.input_object_type.type.Episode
import com.example.input_object_type.type.ReviewInput
import kotlin.Int
import kotlin.String
import kotlin.collections.List

data class TestQuery(
  val ep: Episode,
  val review: ReviewInput
) : Mutation<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    TestQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun fieldSets(): List<FieldSet> = TestQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val createReview: CreateReview?
  ) : Mutation.Data {
    data class CreateReview(
      /**
       * The number of stars this review gave, 1-5
       */
      val stars: Int,
      /**
       * Comment about the movie
       */
      val commentary: String?
    )
  }

  companion object {
    const val OPERATION_ID: String =
        "2a1de6af8435bb9169562d78714566aaf26a9741ef16b72f49955dc615237b09"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * mutation TestQuery($ep: Episode!, $review: ReviewInput!) {
     *   createReview(episode: $ep, review: $review) {
     *     stars
     *     commentary
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "mutation TestQuery(${'$'}ep: Episode!, ${'$'}review: ReviewInput!) { createReview(episode: ${'$'}ep, review: ${'$'}review) { stars commentary } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
