//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.input_object_type.type

import com.apollographql.apollo3.api.Optional
import java.util.Date
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List

/**
 * The input object sent when someone is creating a new review
 */
data class ReviewInput(
  /**
   * 0-5 stars
   */
  val stars: Int,
  /**
   * for test purpose only
   */
  val nullableIntFieldWithDefaultValue: Optional<Int?> = Optional.Absent,
  /**
   * Comment about the movie, optional
   */
  val commentary: Optional<String?> = Optional.Absent,
  /**
   * Favorite color, optional
   */
  val favoriteColor: ColorInput,
  /**
   * for test purpose only
   */
  val enumWithDefaultValue: Optional<Episode?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val nonNullableEnumWithDefaultValue: Optional<Episode> = Optional.Absent,
  /**
   * for test purpose only
   */
  val nullableEnum: Optional<Episode?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfCustomScalar: Optional<List<Date?>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val customScalar: Optional<Date?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfEnums: Optional<List<Episode?>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfInt: Optional<List<Int?>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfString: Optional<List<String?>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfStringNonOptional: List<String?>,
  /**
   * for test purpose only
   */
  val listOfInputTypes: Optional<List<ColorInput?>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val booleanWithDefaultValue: Optional<Boolean?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val booleanNonOptional: Optional<Boolean?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfListOfString: Optional<List<List<String>>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfListOfEnum: Optional<List<List<Episode>>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfListOfCustom: Optional<List<List<Date>>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val listOfListOfObject: Optional<List<List<ColorInput>>?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val CapitalizedField: Optional<String?> = Optional.Absent,
  /**
   * for test purpose only
   */
  val CapitalizedInt: Optional<Int?> = Optional.Absent
)
