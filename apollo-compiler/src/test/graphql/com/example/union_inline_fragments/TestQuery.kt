// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter
import com.example.union_inline_fragments.type.Episode
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> = TestQuery_ResponseAdapter
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val search: List<Search?>?
  ) : Operation.Data {
    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    interface Search {
      val __typename: String

      interface Character : Search {
        override val __typename: String

        /**
         * The ID of the character
         */
        val id: String

        /**
         * The name of the character
         */
        val name: String

        /**
         * The friends of the character, or an empty list if they have none
         */
        val friends: List<Friend?>?

        /**
         * A character from the Star Wars universe
         */
        interface Friend {
          val __typename: String

          interface Character : Friend {
            override val __typename: String

            /**
             * The name of the character
             */
            val name: String
          }

          interface Human : Friend {
            override val __typename: String

            /**
             * The home planet of the human, or null if unknown
             */
            val homePlanet: String?

            /**
             * This human's friends, or an empty list if they have none
             */
            val friends: List<Friend?>?

            /**
             * A character from the Star Wars universe
             */
            interface Friend {
              val __typename: String

              interface Character : Friend {
                override val __typename: String

                /**
                 * The movie this character first appears in
                 */
                val firstAppearsIn: Episode
              }

              companion object {
                fun Friend.asCharacter(): Character? = this as? Character
              }
            }
          }

          interface Droid : Friend {
            override val __typename: String

            /**
             * This droid's primary function
             */
            val primaryFunction: String?

            /**
             * This droid's friends, or an empty list if they have none
             */
            val friends: List<Friend?>?

            /**
             * A character from the Star Wars universe
             */
            interface Friend {
              /**
               * The ID of the character
               */
              val id: String
            }
          }

          companion object {
            fun Friend.asCharacter(): Character? = this as? Character

            fun Friend.asHuman(): Human? = this as? Human

            fun Friend.asDroid(): Droid? = this as? Droid
          }
        }
      }

      interface Starship : Search {
        override val __typename: String

        /**
         * The name of the starship
         */
        val name: String
      }

      data class CharacterSearch(
        override val __typename: String,
        /**
         * The ID of the character
         */
        override val id: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The friends of the character, or an empty list if they have none
         */
        override val friends: List<Friend?>?
      ) : Search, Character {
        /**
         * A character from the Star Wars universe
         */
        interface Friend : Character.Friend {
          override val __typename: String

<<<<<<< HEAD
          override fun marshaller(): ResponseFieldMarshaller
=======
          interface Character : Search.Character.Friend, Search.Character.Friend.Character, Friend {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String
          }

          interface Human : Search.Character.Friend, Search.Character.Friend.Human, Friend {
            override val __typename: String

            /**
             * The home planet of the human, or null if unknown
             */
            override val homePlanet: String?

            /**
             * This human's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?

            /**
             * A character from the Star Wars universe
             */
            interface Friend : Search.Character.Friend.Human.Friend {
              override val __typename: String

              interface Character : Search.Character.Friend.Human.Friend,
                  Search.Character.Friend.Human.Friend.Character, Friend {
                override val __typename: String

                /**
                 * The movie this character first appears in
                 */
                override val firstAppearsIn: Episode
              }

              companion object {
                fun Friend.asCharacter(): Search.Character.Friend.Human.Friend.Character? = this as?
                    Search.Character.Friend.Human.Friend.Character
              }
            }
          }

          interface Droid : Search.Character.Friend, Search.Character.Friend.Droid, Friend {
            override val __typename: String

            /**
             * This droid's primary function
             */
            override val primaryFunction: String?

            /**
             * This droid's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?

            /**
             * A character from the Star Wars universe
             */
            interface Friend : Search.Character.Friend.Droid.Friend {
              /**
               * The ID of the character
               */
              override val id: String
            }
          }
>>>>>>> 7fb58f43... remove ResponseFieldMapper

          data class CharacterDroidFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * This droid's primary function
             */
            override val primaryFunction: String?,
            /**
             * This droid's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?
<<<<<<< HEAD
          ) : Character.Friend, Character.Friend.Character, Character.Friend.Droid, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterDroidFriend.toResponse(writer, this)
              }
            }

=======
          ) : Search.Character.Friend, Search.Character.Friend.Character, Friend, Character,
              Search.Character.Friend.Droid, Droid {
>>>>>>> 7fb58f43... remove ResponseFieldMapper
            /**
             * A character from the Star Wars universe
             */
            data class Friend(
              /**
               * The ID of the character
               */
              override val id: String
<<<<<<< HEAD
            ) : Character.Friend.Droid.Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterDroidFriend.Friend.toResponse(writer, this)
                }
              }
            }
=======
            ) : Search.Character.Friend.Droid.Friend, Droid.Friend
>>>>>>> 7fb58f43... remove ResponseFieldMapper
          }

          data class CharacterHumanFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * The home planet of the human, or null if unknown
             */
            override val homePlanet: String?,
            /**
             * This human's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?
<<<<<<< HEAD
          ) : Character.Friend, Character.Friend.Character, Character.Friend.Human, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.toResponse(writer, this)
              }
            }

=======
          ) : Search.Character.Friend, Search.Character.Friend.Character, Friend, Character,
              Search.Character.Friend.Human, Human {
>>>>>>> 7fb58f43... remove ResponseFieldMapper
            /**
             * A character from the Star Wars universe
             */
            interface Friend : Character.Friend.Human.Friend {
              override val __typename: String

<<<<<<< HEAD
              override fun marshaller(): ResponseFieldMarshaller
=======
              interface Character : Search.Character.Friend.Human.Friend,
                  Search.Character.Friend.Human.Friend.Character, Human.Friend,
                  Human.Friend.Character, Friend {
                override val __typename: String

                /**
                 * The movie this character first appears in
                 */
                override val firstAppearsIn: Episode
              }
>>>>>>> 7fb58f43... remove ResponseFieldMapper

              data class CharacterFriend(
                override val __typename: String,
                /**
                 * The movie this character first appears in
                 */
                override val firstAppearsIn: Episode
<<<<<<< HEAD
              ) : Character.Friend.Human.Friend, Character.Friend.Human.Friend.Character, Friend {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.Friend.CharacterFriend.toResponse(writer, this)
                  }
                }
              }

              data class OtherFriend(
                override val __typename: String
              ) : Character.Friend.Human.Friend, Friend {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.Friend.OtherFriend.toResponse(writer, this)
                  }
                }
=======
              ) : Search.Character.Friend.Human.Friend,
                  Search.Character.Friend.Human.Friend.Character, Human.Friend,
                  Human.Friend.Character, Friend, Character

              data class OtherFriend(
                override val __typename: String
              ) : Search.Character.Friend.Human.Friend, Human.Friend, Friend

              companion object {
                fun Friend.asFriends(): Human.Friend? = this as? Human.Friend

                fun Friend.asCharacter(): Character? = this as? Character
>>>>>>> 7fb58f43... remove ResponseFieldMapper
              }
            }
          }

          data class OtherFriend(
            override val __typename: String
<<<<<<< HEAD
          ) : Character.Friend, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.OtherFriend.toResponse(writer, this)
              }
            }
=======
          ) : Search.Character.Friend, Friend

          companion object {
            fun Friend.asFriends(): Search.Character.Friend? = this as? Search.Character.Friend

            fun Friend.asCharacter(): Character? = this as? Character

            fun Friend.asHuman(): Human? = this as? Human

            fun Friend.asDroid(): Droid? = this as? Droid
>>>>>>> 7fb58f43... remove ResponseFieldMapper
          }
        }
      }

      data class StarshipSearch(
        override val __typename: String,
        /**
         * The name of the starship
         */
        override val name: String
      ) : Search, Starship

      data class OtherSearch(
        override val __typename: String
      ) : Search

      companion object {
        fun Search.asCharacter(): Character? = this as? Character

        fun Search.asStarship(): Starship? = this as? Starship
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "2c2de063c729a4ce1b51648279b6afd6372ac91ae33c304f4e33d20fb098cfc6"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  search(text: "test") {
          |    __typename
          |    ... on Character {
          |      id
          |      name
          |      friends {
          |        __typename
          |        ... on Character {
          |          name
          |        }
          |        ... on Human {
          |          homePlanet
          |          friends {
          |            __typename
          |            ... on Character {
          |              firstAppearsIn
          |            }
          |          }
          |        }
          |        ... on Droid {
          |          primaryFunction
          |          friends {
          |            id
          |          }
          |        }
          |      }
          |    }
          |    ... on Starship {
          |      name
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "TestQuery"
      }
    }
  }
}
