// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter
import com.example.union_inline_fragments.type.Episode
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun responseFieldMapper(): ResponseFieldMapper<Data> {
    return ResponseFieldMapper { reader ->
      TestQuery_ResponseAdapter.fromResponse(reader)
    }
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return parse(Buffer().write(byteString), scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> {
    return parse(source, DEFAULT)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> {
    return parse(byteString, DEFAULT)
  }

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString {
    return OperationRequestBodyComposer.compose(
      operation = this,
      autoPersistQueries = false,
      withQueryDocument = true,
      scalarTypeAdapters = scalarTypeAdapters
    )
  }

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val search: List<Search?>?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller { writer ->
        TestQuery_ResponseAdapter.Data.toResponse(writer, this)
      }
    }

    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    interface Search {
      val __typename: String

      fun marshaller(): ResponseFieldMarshaller

      interface Character : Search {
        override val __typename: String

        /**
         * The ID of the character
         */
        val id: String

        /**
         * The name of the character
         */
        val name: String

        /**
         * The friends of the character, or an empty list if they have none
         */
        val friends: List<Friend?>?

        override fun marshaller(): ResponseFieldMarshaller

        /**
         * A character from the Star Wars universe
         */
        interface Friend {
          val __typename: String

          fun marshaller(): ResponseFieldMarshaller

          interface Character : Friend {
            override val __typename: String

            /**
             * The name of the character
             */
            val name: String

            override fun marshaller(): ResponseFieldMarshaller
          }

          interface Human : Friend {
            override val __typename: String

            /**
             * The home planet of the human, or null if unknown
             */
            val homePlanet: String?

            /**
             * This human's friends, or an empty list if they have none
             */
            val friends: List<Friend?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A character from the Star Wars universe
             */
            interface Friend {
              val __typename: String

              fun marshaller(): ResponseFieldMarshaller

              interface Character : Friend {
                override val __typename: String

                /**
                 * The movie this character first appears in
                 */
                val firstAppearsIn: Episode

                override fun marshaller(): ResponseFieldMarshaller
              }

              companion object {
                fun Friend.asCharacter(): Character? = this as? Character
              }
            }
          }

          interface Droid : Friend {
            override val __typename: String

            /**
             * This droid's primary function
             */
            val primaryFunction: String?

            /**
             * This droid's friends, or an empty list if they have none
             */
            val friends: List<Friend?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A character from the Star Wars universe
             */
            interface Friend {
              /**
               * The ID of the character
               */
              val id: String

              fun marshaller(): ResponseFieldMarshaller
            }
          }

          companion object {
            fun Friend.asCharacter(): Character? = this as? Character

            fun Friend.asHuman(): Human? = this as? Human

            fun Friend.asDroid(): Droid? = this as? Droid
          }
        }
      }

      interface Starship : Search {
        override val __typename: String

        /**
         * The name of the starship
         */
        val name: String

        override fun marshaller(): ResponseFieldMarshaller
      }

      data class CharacterSearch(
        override val __typename: String,
        /**
         * The ID of the character
         */
        override val id: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The friends of the character, or an empty list if they have none
         */
        override val friends: List<Friend?>?
      ) : Search, Character {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestQuery_ResponseAdapter.Data.Search.CharacterSearch.toResponse(writer, this)
          }
        }

        /**
         * A character from the Star Wars universe
         */
        interface Friend : Character.Friend {
          override val __typename: String

          override fun marshaller(): ResponseFieldMarshaller

          data class CharacterDroidFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * This droid's primary function
             */
            override val primaryFunction: String?,
            /**
             * This droid's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?
          ) : Character.Friend, Character.Friend.Character, Character.Friend.Droid, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterDroidFriend.toResponse(writer, this)
              }
            }

            /**
             * A character from the Star Wars universe
             */
            data class Friend(
              /**
               * The ID of the character
               */
              override val id: String
            ) : Character.Friend.Droid.Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterDroidFriend.Friend.toResponse(writer, this)
                }
              }
            }
          }

          data class CharacterHumanFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * The home planet of the human, or null if unknown
             */
            override val homePlanet: String?,
            /**
             * This human's friends, or an empty list if they have none
             */
            override val friends: List<Friend?>?
          ) : Character.Friend, Character.Friend.Character, Character.Friend.Human, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.toResponse(writer, this)
              }
            }

            /**
             * A character from the Star Wars universe
             */
            interface Friend : Character.Friend.Human.Friend {
              override val __typename: String

              override fun marshaller(): ResponseFieldMarshaller

              data class CharacterFriend(
                override val __typename: String,
                /**
                 * The movie this character first appears in
                 */
                override val firstAppearsIn: Episode
              ) : Character.Friend.Human.Friend, Character.Friend.Human.Friend.Character, Friend {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.Friend.CharacterFriend.toResponse(writer, this)
                  }
                }
              }

              data class OtherFriend(
                override val __typename: String
              ) : Character.Friend.Human.Friend, Friend {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.CharacterHumanFriend.Friend.OtherFriend.toResponse(writer, this)
                  }
                }
              }
            }
          }

          data class OtherFriend(
            override val __typename: String
          ) : Character.Friend, Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Search.CharacterSearch.Friend.OtherFriend.toResponse(writer, this)
              }
            }
          }
        }
      }

      data class StarshipSearch(
        override val __typename: String,
        /**
         * The name of the starship
         */
        override val name: String
      ) : Search, Starship {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestQuery_ResponseAdapter.Data.Search.StarshipSearch.toResponse(writer, this)
          }
        }
      }

      data class OtherSearch(
        override val __typename: String
      ) : Search {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestQuery_ResponseAdapter.Data.Search.OtherSearch.toResponse(writer, this)
          }
        }
      }

      companion object {
        fun Search.asCharacter(): Character? = this as? Character

        fun Search.asStarship(): Starship? = this as? Starship
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "2c2de063c729a4ce1b51648279b6afd6372ac91ae33c304f4e33d20fb098cfc6"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  search(text: "test") {
          |    __typename
          |    ... on Character {
          |      id
          |      name
          |      friends {
          |        __typename
          |        ... on Character {
          |          name
          |        }
          |        ... on Human {
          |          homePlanet
          |          friends {
          |            __typename
          |            ... on Character {
          |              firstAppearsIn
          |            }
          |          }
          |        }
          |        ... on Droid {
          |          primaryFunction
          |          friends {
          |            id
          |          }
          |        }
          |      }
          |    }
          |    ... on Starship {
          |      name
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "TestQuery"
      }
    }
  }
}
