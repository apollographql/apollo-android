// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.union_inline_fragments.type.CustomType
import com.example.union_inline_fragments.type.Episode
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forList("search", "search", mapOf<String, Any>(
      "text" to "test"), true, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var search: List<TestQuery.Search?>? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> search = readList<TestQuery.Search>(RESPONSE_FIELDS[0]) { reader ->
            reader.readObject<TestQuery.Search> { reader ->
              TestQuery_ResponseAdapter.Search_ResponseAdapter.fromResponse(reader)
            }
          }
          else -> break
        }
      }
      TestQuery.Data(
        search = search
      )
    }
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    writer.writeList(RESPONSE_FIELDS[0], value.search) { values, listItemWriter ->
      values?.forEach { value ->
        if(value == null) {
          listItemWriter.writeObject(null)
        } else {
          listItemWriter.writeObject { writer ->
            TestQuery_ResponseAdapter.Search_ResponseAdapter.toResponse(writer, value)
          }
        }
      }
    }
  }

  object CharacterFriend_ResponseAdapter : ResponseAdapter<TestQuery.CharacterFriend> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.CharacterFriend {
      return reader.run {
        var name: String? = null
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> name = readString(RESPONSE_FIELDS[0])
            1 -> __typename = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.CharacterFriend(
          name = name!!,
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.CharacterFriend) {
      writer.writeString(RESPONSE_FIELDS[0], value.name)
      writer.writeString(RESPONSE_FIELDS[1], value.__typename)
    }
  }

  object Friend3_ResponseAdapter : ResponseAdapter<TestQuery.Friend3> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Friend3 {
      return reader.run {
        var id: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> id = readCustomType<String>(RESPONSE_FIELDS[0] as ResponseField.CustomTypeField)
            else -> break
          }
        }
        TestQuery.Friend3(
          id = id!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Friend3) {
      writer.writeCustom(RESPONSE_FIELDS[0] as ResponseField.CustomTypeField, value.id)
    }
  }

  object CharacterDroidFriend_ResponseAdapter : ResponseAdapter<TestQuery.CharacterDroidFriend> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forString("primaryFunction", "primaryFunction", null, true, null),
      ResponseField.forList("friends", "friends", null, true, null),
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.CharacterDroidFriend {
      return reader.run {
        var name: String? = null
        var primaryFunction: String? = null
        var friends: List<TestQuery.Friend3?>? = null
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> name = readString(RESPONSE_FIELDS[0])
            1 -> primaryFunction = readString(RESPONSE_FIELDS[1])
            2 -> friends = readList<TestQuery.Friend3>(RESPONSE_FIELDS[2]) { reader ->
              reader.readObject<TestQuery.Friend3> { reader ->
                TestQuery_ResponseAdapter.Friend3_ResponseAdapter.fromResponse(reader)
              }
            }
            3 -> __typename = readString(RESPONSE_FIELDS[3])
            else -> break
          }
        }
        TestQuery.CharacterDroidFriend(
          name = name!!,
          primaryFunction = primaryFunction,
          friends = friends,
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.CharacterDroidFriend) {
      writer.writeString(RESPONSE_FIELDS[0], value.name)
      writer.writeString(RESPONSE_FIELDS[1], value.primaryFunction)
      writer.writeList(RESPONSE_FIELDS[2], value.friends) { values, listItemWriter ->
        values?.forEach { value ->
          if(value == null) {
            listItemWriter.writeObject(null)
          } else {
            listItemWriter.writeObject { writer ->
              TestQuery_ResponseAdapter.Friend3_ResponseAdapter.toResponse(writer, value)
            }
          }
        }
      }
      writer.writeString(RESPONSE_FIELDS[3], value.__typename)
    }
  }

  object Friend4_ResponseAdapter : ResponseAdapter<TestQuery.Friend4> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forEnum("firstAppearsIn", "firstAppearsIn", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Friend4 {
      return reader.run {
        var __typename: String? = __typename
        var firstAppearsIn: Episode? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> firstAppearsIn = readString(RESPONSE_FIELDS[1])?.let { Episode.safeValueOf(it) }
            else -> break
          }
        }
        TestQuery.Friend4(
          __typename = __typename!!,
          firstAppearsIn = firstAppearsIn!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Friend4) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      writer.writeString(RESPONSE_FIELDS[1], value.firstAppearsIn.rawValue)
    }
  }

  object CharacterHumanFriend_ResponseAdapter : ResponseAdapter<TestQuery.CharacterHumanFriend> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forString("homePlanet", "homePlanet", null, true, null),
      ResponseField.forList("friends", "friends", null, true, null),
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.CharacterHumanFriend {
      return reader.run {
        var name: String? = null
        var homePlanet: String? = null
        var friends: List<TestQuery.Friend4?>? = null
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> name = readString(RESPONSE_FIELDS[0])
            1 -> homePlanet = readString(RESPONSE_FIELDS[1])
            2 -> friends = readList<TestQuery.Friend4>(RESPONSE_FIELDS[2]) { reader ->
              reader.readObject<TestQuery.Friend4> { reader ->
                TestQuery_ResponseAdapter.Friend4_ResponseAdapter.fromResponse(reader)
              }
            }
            3 -> __typename = readString(RESPONSE_FIELDS[3])
            else -> break
          }
        }
        TestQuery.CharacterHumanFriend(
          name = name!!,
          homePlanet = homePlanet,
          friends = friends,
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.CharacterHumanFriend) {
      writer.writeString(RESPONSE_FIELDS[0], value.name)
      writer.writeString(RESPONSE_FIELDS[1], value.homePlanet)
      writer.writeList(RESPONSE_FIELDS[2], value.friends) { values, listItemWriter ->
        values?.forEach { value ->
          if(value == null) {
            listItemWriter.writeObject(null)
          } else {
            listItemWriter.writeObject { writer ->
              TestQuery_ResponseAdapter.Friend4_ResponseAdapter.toResponse(writer, value)
            }
          }
        }
      }
      writer.writeString(RESPONSE_FIELDS[3], value.__typename)
    }
  }

  object OtherFriend_ResponseAdapter : ResponseAdapter<TestQuery.OtherFriend> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.OtherFriend {
      return reader.run {
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            else -> break
          }
        }
        TestQuery.OtherFriend(
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.OtherFriend) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
    }
  }

  object Friend_ResponseAdapter : ResponseAdapter<TestQuery.Friend> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Friend {
      val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
      return when(typename) {
        "Character" -> TestQuery_ResponseAdapter.CharacterFriend_ResponseAdapter.fromResponse(reader, typename)
        "Droid" -> TestQuery_ResponseAdapter.CharacterDroidFriend_ResponseAdapter.fromResponse(reader, typename)
        "Human" -> TestQuery_ResponseAdapter.CharacterHumanFriend_ResponseAdapter.fromResponse(reader, typename)
        else -> TestQuery_ResponseAdapter.OtherFriend_ResponseAdapter.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Friend) {
      when(value) {
        is TestQuery.CharacterFriend -> TestQuery_ResponseAdapter.CharacterFriend_ResponseAdapter.toResponse(writer, value)
        is TestQuery.CharacterDroidFriend -> TestQuery_ResponseAdapter.CharacterDroidFriend_ResponseAdapter.toResponse(writer, value)
        is TestQuery.CharacterHumanFriend -> TestQuery_ResponseAdapter.CharacterHumanFriend_ResponseAdapter.toResponse(writer, value)
        is TestQuery.OtherFriend -> TestQuery_ResponseAdapter.OtherFriend_ResponseAdapter.toResponse(writer, value)
      }
    }
  }

  object CharacterSearch_ResponseAdapter : ResponseAdapter<TestQuery.CharacterSearch> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forList("friends", "friends", null, true, null),
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.CharacterSearch {
      return reader.run {
        var id: String? = null
        var name: String? = null
        var friends: List<TestQuery.Friend?>? = null
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> id = readCustomType<String>(RESPONSE_FIELDS[0] as ResponseField.CustomTypeField)
            1 -> name = readString(RESPONSE_FIELDS[1])
            2 -> friends = readList<TestQuery.Friend>(RESPONSE_FIELDS[2]) { reader ->
              reader.readObject<TestQuery.Friend> { reader ->
                TestQuery_ResponseAdapter.Friend_ResponseAdapter.fromResponse(reader)
              }
            }
            3 -> __typename = readString(RESPONSE_FIELDS[3])
            else -> break
          }
        }
        TestQuery.CharacterSearch(
          id = id!!,
          name = name!!,
          friends = friends,
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.CharacterSearch) {
      writer.writeCustom(RESPONSE_FIELDS[0] as ResponseField.CustomTypeField, value.id)
      writer.writeString(RESPONSE_FIELDS[1], value.name)
      writer.writeList(RESPONSE_FIELDS[2], value.friends) { values, listItemWriter ->
        values?.forEach { value ->
          if(value == null) {
            listItemWriter.writeObject(null)
          } else {
            listItemWriter.writeObject { writer ->
              TestQuery_ResponseAdapter.Friend_ResponseAdapter.toResponse(writer, value)
            }
          }
        }
      }
      writer.writeString(RESPONSE_FIELDS[3], value.__typename)
    }
  }

  object StarshipSearch_ResponseAdapter : ResponseAdapter<TestQuery.StarshipSearch> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.StarshipSearch {
      return reader.run {
        var name: String? = null
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> name = readString(RESPONSE_FIELDS[0])
            1 -> __typename = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.StarshipSearch(
          name = name!!,
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.StarshipSearch) {
      writer.writeString(RESPONSE_FIELDS[0], value.name)
      writer.writeString(RESPONSE_FIELDS[1], value.__typename)
    }
  }

  object OtherSearch_ResponseAdapter : ResponseAdapter<TestQuery.OtherSearch> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.OtherSearch {
      return reader.run {
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            else -> break
          }
        }
        TestQuery.OtherSearch(
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.OtherSearch) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
    }
  }

  object Search_ResponseAdapter : ResponseAdapter<TestQuery.Search> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Search {
      val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
      return when(typename) {
        "Character" -> TestQuery_ResponseAdapter.CharacterSearch_ResponseAdapter.fromResponse(reader, typename)
        "Droid" -> TestQuery_ResponseAdapter.CharacterSearch_ResponseAdapter.fromResponse(reader, typename)
        "Human" -> TestQuery_ResponseAdapter.CharacterSearch_ResponseAdapter.fromResponse(reader, typename)
        "Starship" -> TestQuery_ResponseAdapter.StarshipSearch_ResponseAdapter.fromResponse(reader, typename)
        else -> TestQuery_ResponseAdapter.OtherSearch_ResponseAdapter.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Search) {
      when(value) {
        is TestQuery.CharacterSearch -> TestQuery_ResponseAdapter.CharacterSearch_ResponseAdapter.toResponse(writer, value)
        is TestQuery.StarshipSearch -> TestQuery_ResponseAdapter.StarshipSearch_ResponseAdapter.toResponse(writer, value)
        is TestQuery.OtherSearch -> TestQuery_ResponseAdapter.OtherSearch_ResponseAdapter.toResponse(writer, value)
      }
    }
  }
}
