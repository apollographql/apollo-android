//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var search: List<TestQuery.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.search)
    }
  }

  object Search : Adapter<TestQuery.Search> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Search {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asCharacter: TestQuery.AsCharacter? = null
      if (possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
        asCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsCharacter.fromJson(reader,
            customScalarAdapters)
      }

      reader.rewind()
      var asStarship: TestQuery.AsStarship? = null
      if (possibleTypes("Starship").evaluate(emptySet(), __typename)) {
        asStarship = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsStarship.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Search(
        __typename = __typename,
        asCharacter = asCharacter,
        asStarship = asStarship
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Search
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asCharacter != null) {
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsCharacter.toJson(writer,
            customScalarAdapters, value.asCharacter)
      }

      if (value.asStarship != null) {
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsStarship.toJson(writer,
            customScalarAdapters, value.asStarship)
      }
    }
  }

  object AsCharacter : Adapter<TestQuery.AsCharacter> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "friends")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsCharacter {
      var __typename: String? = null
      var id: String? = null
      var name: String? = null
      var friends: List<TestQuery.Friend2?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> friends = Friend2.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsCharacter(
        __typename = __typename!!,
        id = id!!,
        name = name!!,
        friends = friends
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.AsCharacter
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("friends")
      Friend2.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.friends)
    }
  }

  object Friend2 : Adapter<TestQuery.Friend2> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Friend2 {
      var __typename: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asHuman: TestQuery.AsHuman? = null
      if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
        asHuman = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      reader.rewind()
      var asDroid: TestQuery.AsDroid? = null
      if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
        asDroid = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsDroid.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Friend2(
        __typename = __typename,
        name = name!!,
        asHuman = asHuman,
        asDroid = asDroid
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Friend2
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      if (value.asHuman != null) {
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }

      if (value.asDroid != null) {
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.AsDroid.toJson(writer,
            customScalarAdapters, value.asDroid)
      }
    }
  }

  object AsHuman : Adapter<TestQuery.AsHuman> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "homePlanet", "friends")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsHuman {
      var __typename: String? = null
      var name: String? = null
      var homePlanet: String? = null
      var friends: List<TestQuery.Friend?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsHuman(
        __typename = __typename!!,
        name = name!!,
        homePlanet = homePlanet,
        friends = friends
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.AsHuman
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("homePlanet")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

      writer.name("friends")
      Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
    }
  }

  object Friend : Adapter<TestQuery.Friend> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "firstAppearsIn")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Friend {
      var __typename: String? = null
      var firstAppearsIn: Episode? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> firstAppearsIn = Episode_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Friend(
        __typename = __typename!!,
        firstAppearsIn = firstAppearsIn!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Friend
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("firstAppearsIn")
      Episode_ResponseAdapter.toJson(writer, customScalarAdapters, value.firstAppearsIn)
    }
  }

  object AsDroid : Adapter<TestQuery.AsDroid> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction", "friends")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsDroid {
      var __typename: String? = null
      var name: String? = null
      var primaryFunction: String? = null
      var friends: List<TestQuery.Friend1?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> friends = Friend1.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsDroid(
        __typename = __typename!!,
        name = name!!,
        primaryFunction = primaryFunction,
        friends = friends
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.AsDroid
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("primaryFunction")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

      writer.name("friends")
      Friend1.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
    }
  }

  object Friend1 : Adapter<TestQuery.Friend1> {
    val RESPONSE_NAMES: List<String> = listOf("id")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Friend1 {
      var id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Friend1(
        id = id!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Friend1
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }

  object AsStarship : Adapter<TestQuery.AsStarship> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsStarship {
      var __typename: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsStarship(
        __typename = __typename!!,
        name = name!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.AsStarship
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }
}
