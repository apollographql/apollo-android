//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter
import com.example.union_inline_fragments.selections.TestQuerySelections
import com.example.union_inline_fragments.type.Episode
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun selections(): List<CompiledSelection> = TestQuerySelections.root

  data class Data(
    val search: List<Search?>?
  ) : Query.Data {
    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()
  }

  data class Search(
    val __typename: String,
    /**
     * Synthetic field for inline fragment on Character
     */
    val asCharacter: AsCharacter?,
    /**
     * Synthetic field for inline fragment on Starship
     */
    val asStarship: AsStarship?
  )

  data class AsCharacter(
    val __typename: String,
    /**
     * The ID of the character
     */
    val id: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * The friends of the character, or an empty list if they have none
     */
    val friends: List<Friend2?>?
  ) {
    fun friendsFilterNotNull(): List<Friend2>? = friends?.filterNotNull()
  }

  data class Friend2(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * Synthetic field for inline fragment on Human
     */
    val asHuman: AsHuman?,
    /**
     * Synthetic field for inline fragment on Droid
     */
    val asDroid: AsDroid?
  )

  data class AsHuman(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * The home planet of the human, or null if unknown
     */
    val homePlanet: String?,
    /**
     * This human's friends, or an empty list if they have none
     */
    val friends: List<Friend?>?
  ) {
    fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()
  }

  data class Friend(
    val __typename: String,
    /**
     * The movie this character first appears in
     */
    val firstAppearsIn: Episode
  )

  data class AsDroid(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * This droid's primary function
     */
    val primaryFunction: String?,
    /**
     * This droid's friends, or an empty list if they have none
     */
    val friends: List<Friend1?>?
  ) {
    fun friendsFilterNotNull(): List<Friend1>? = friends?.filterNotNull()
  }

  data class Friend1(
    /**
     * The ID of the character
     */
    val id: String
  )

  data class AsStarship(
    val __typename: String,
    /**
     * The name of the starship
     */
    val name: String
  )

  companion object {
    const val OPERATION_ID: String =
        "2c2de063c729a4ce1b51648279b6afd6372ac91ae33c304f4e33d20fb098cfc6"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   search(text: "test") {
     *     __typename
     *     ... on Character {
     *       id
     *       name
     *       friends {
     *         __typename
     *         ... on Character {
     *           name
     *         }
     *         ... on Human {
     *           homePlanet
     *           friends {
     *             __typename
     *             ... on Character {
     *               firstAppearsIn
     *             }
     *           }
     *         }
     *         ... on Droid {
     *           primaryFunction
     *           friends {
     *             id
     *           }
     *         }
     *       }
     *     }
     *     ... on Starship {
     *       name
     *     }
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery { search(text: \"test\") { __typename ... on Character { id name friends { __typename ... on Character { name } ... on Human { homePlanet friends { __typename ... on Character { firstAppearsIn } } } ... on Droid { primaryFunction friends { id } } } } ... on Starship { name } } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
