//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.selections

import com.apollographql.apollo3.api.CompiledCompoundType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledOtherType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.collections.List

object TestQuerySelections {
  private val onCharacter1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledOtherType("unused").notNull()
        )
      )

  private val onCharacter2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "firstAppearsIn",
          type = CompiledOtherType("unused").notNull()
        )
      )

  private val friends1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledOtherType("unused").notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid", "Human"),
          selections = onCharacter2
        )
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField(
          name = "homePlanet",
          type = CompiledOtherType("unused")
        ),
        CompiledField(
          name = "friends",
          type = CompiledCompoundType("unused").list(),
          selections = friends1
        )
      )

  private val friends2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "id",
          type = CompiledOtherType("unused").notNull()
        )
      )

  private val onDroid: List<CompiledSelection> = listOf(
        CompiledField(
          name = "primaryFunction",
          type = CompiledOtherType("unused")
        ),
        CompiledField(
          name = "friends",
          type = CompiledCompoundType("unused").list(),
          selections = friends2
        )
      )

  private val friends: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledOtherType("unused").notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid", "Human"),
          selections = onCharacter1
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          selections = onHuman
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid"),
          selections = onDroid
        )
      )

  private val onCharacter: List<CompiledSelection> = listOf(
        CompiledField(
          name = "id",
          type = CompiledOtherType("unused").notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledOtherType("unused").notNull()
        ),
        CompiledField(
          name = "friends",
          type = CompiledCompoundType("unused").list(),
          selections = friends
        )
      )

  private val onStarship: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledOtherType("unused").notNull()
        )
      )

  private val search: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledOtherType("unused").notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid", "Human"),
          selections = onCharacter
        ),
        CompiledFragment(
          possibleTypes = listOf("Starship"),
          selections = onStarship
        )
      )

  val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "search",
          type = CompiledCompoundType("unused").list(),
          arguments = mapOf("text" to "test"
          ),
          selections = search
        )
      )
}
