//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.union_inline_fragments.responsefields

import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.Array

object TestQuery_ResponseFields {
  val fields: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("unused").list(),
        fieldName = "search",
        arguments = mapOf("text" to "test"
        ),
        fieldSets = listOf(
          ResponseField.FieldSet(null, OtherSearch.fields),
          ResponseField.FieldSet("Droid", CharacterSearch.fields),
          ResponseField.FieldSet("Human", CharacterSearch.fields),
          ResponseField.FieldSet("Starship", StarshipSearch.fields),
        ),
      ),
    )


    object OtherSearch {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
      )

    }

    object CharacterSearch {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "id",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("unused").list(),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, OtherFriends.fields),
            ResponseField.FieldSet("Droid", DroidFriends.fields),
            ResponseField.FieldSet("Human", HumanFriends.fields),
          ),
        ),
      )


      object OtherFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
        )

      }

      object DroidFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "primaryFunction",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Object("unused").list(),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friends.fields),
            ),
          ),
        )


        object Friends {
          val fields: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Other("unused").notNull(),
              fieldName = "id",
            ),
          )

        }
      }

      object HumanFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "homePlanet",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Object("unused").list(),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friends.fields),
            ),
          ),
        )


        object Friends {
          val fields: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.Named.Other("unused").notNull(),
              fieldName = "firstAppearsIn",
            ),
          )

        }
      }
    }

    object StarshipSearch {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
      )

    }
  }
}
