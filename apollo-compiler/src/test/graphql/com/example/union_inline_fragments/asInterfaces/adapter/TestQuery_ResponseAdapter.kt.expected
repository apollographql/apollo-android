//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        search = search
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    }

    object Search : ResponseAdapter<TestQuery.Data.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterSearch.fromResponse(reader, responseAdapterCache, __typename)
          "Starship",
          -> StarshipSearch.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherSearch.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search
      ) {
        when(value) {
          is TestQuery.Data.CharacterSearch -> CharacterSearch.toResponse(writer,
              responseAdapterCache, value)
          is TestQuery.Data.StarshipSearch -> StarshipSearch.toResponse(writer,
              responseAdapterCache, value)
          is TestQuery.Data.OtherSearch -> OtherSearch.toResponse(writer, responseAdapterCache,
              value)
        }
      }
    }

    object OtherSearch {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherSearch {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherSearch(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }

    object CharacterSearch {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "friends")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.CharacterSearch {
        var __typename: String? = __typename
        var id: String? = null
        var name: String? = null
        var friends: List<TestQuery.Data.CharacterSearch.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.CharacterSearch(
          __typename = __typename!!,
          id = id!!,
          name = name!!,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.CharacterSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.friends)
      }

      object Friends : ResponseAdapter<TestQuery.Data.CharacterSearch.Friends> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.CharacterSearch.Friends {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Droid",
            -> DroidFriends.fromResponse(reader, responseAdapterCache, __typename)
            "Human",
            -> HumanFriends.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherFriends.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.CharacterSearch.Friends
        ) {
          when(value) {
            is TestQuery.Data.CharacterSearch.DroidFriends -> DroidFriends.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.CharacterSearch.HumanFriends -> HumanFriends.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.CharacterSearch.OtherFriends -> OtherFriends.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object OtherFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.CharacterSearch.OtherFriends {
          var __typename: String? = __typename
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.CharacterSearch.OtherFriends(
            __typename = __typename!!,
            name = name!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.CharacterSearch.OtherFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }

      object DroidFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction",
            "friends")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.CharacterSearch.DroidFriends {
          var __typename: String? = __typename
          var name: String? = null
          var primaryFunction: String? = null
          var friends: List<TestQuery.Data.CharacterSearch.DroidFriends.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.CharacterSearch.DroidFriends(
            __typename = __typename!!,
            name = name!!,
            primaryFunction = primaryFunction,
            friends = friends
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.CharacterSearch.DroidFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("primaryFunction")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
              value.primaryFunction)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends : ResponseAdapter<TestQuery.Data.CharacterSearch.DroidFriends.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("id")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.CharacterSearch.DroidFriends.Friends {
            var id: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.CharacterSearch.DroidFriends.Friends(
              id = id!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.CharacterSearch.DroidFriends.Friends
          ) {
            writer.name("id")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
          }
        }
      }

      object HumanFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "homePlanet", "friends")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.CharacterSearch.HumanFriends {
          var __typename: String? = __typename
          var name: String? = null
          var homePlanet: String? = null
          var friends: List<TestQuery.Data.CharacterSearch.HumanFriends.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.CharacterSearch.HumanFriends(
            __typename = __typename!!,
            name = name!!,
            homePlanet = homePlanet,
            friends = friends
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.CharacterSearch.HumanFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("homePlanet")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends : ResponseAdapter<TestQuery.Data.CharacterSearch.HumanFriends.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "firstAppearsIn")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.CharacterSearch.HumanFriends.Friends {
            var __typename: String? = null
            var firstAppearsIn: Episode? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> firstAppearsIn = Episode_ResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.CharacterSearch.HumanFriends.Friends(
              __typename = __typename!!,
              firstAppearsIn = firstAppearsIn!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.CharacterSearch.HumanFriends.Friends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("firstAppearsIn")
            Episode_ResponseAdapter.toResponse(writer, responseAdapterCache, value.firstAppearsIn)
          }
        }
      }
    }

    object StarshipSearch {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.StarshipSearch {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.StarshipSearch(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.StarshipSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }
  }
}
