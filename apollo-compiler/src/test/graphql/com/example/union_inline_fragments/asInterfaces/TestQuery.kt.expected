//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.union_inline_fragments

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter
import com.example.union_inline_fragments.responsefields.TestQuery_ResponseFields
import com.example.union_inline_fragments.type.Episode
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val search: List<Search?>?
  ) : Query.Data {
    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    interface Search {
      val __typename: String

      companion object {
        fun Search.asCharacterSearch() = this as? CharacterSearch

        fun Search.asStarshipSearch() = this as? StarshipSearch
      }
    }

    data class OtherSearch(
      override val __typename: String
    ) : Search

    data class CharacterSearch(
      override val __typename: String,
      /**
       * The ID of the character
       */
      val id: String,
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character, or an empty list if they have none
       */
      val friends: List<Friends?>?
    ) : Search {
      fun friendsFilterNotNull(): List<Friends>? = friends?.filterNotNull()

      interface Friends {
        val __typename: String

        /**
         * The name of the character
         */
        val name: String

        companion object {
          fun Friends.asDroidFriends() = this as? DroidFriends

          fun Friends.asHumanFriends() = this as? HumanFriends
        }
      }

      data class OtherFriends(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String
      ) : Friends

      data class DroidFriends(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * This droid's primary function
         */
        val primaryFunction: String?,
        /**
         * This droid's friends, or an empty list if they have none
         */
        val friends: List<Friends?>?
      ) : Friends {
        fun friendsFilterNotNull(): List<Friends>? = friends?.filterNotNull()

        data class Friends(
          /**
           * The ID of the character
           */
          val id: String
        )
      }

      data class HumanFriends(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The home planet of the human, or null if unknown
         */
        val homePlanet: String?,
        /**
         * This human's friends, or an empty list if they have none
         */
        val friends: List<Friends?>?
      ) : Friends {
        fun friendsFilterNotNull(): List<Friends>? = friends?.filterNotNull()

        data class Friends(
          val __typename: String,
          /**
           * The movie this character first appears in
           */
          val firstAppearsIn: Episode
        )
      }
    }

    data class StarshipSearch(
      override val __typename: String,
      /**
       * The name of the starship
       */
      val name: String
    ) : Search
  }

  companion object {
    const val OPERATION_ID: String =
        "2c2de063c729a4ce1b51648279b6afd6372ac91ae33c304f4e33d20fb098cfc6"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  search(text: "test") {
          |    __typename
          |    ... on Character {
          |      id
          |      name
          |      friends {
          |        __typename
          |        ... on Character {
          |          name
          |        }
          |        ... on Human {
          |          homePlanet
          |          friends {
          |            __typename
          |            ... on Character {
          |              firstAppearsIn
          |            }
          |          }
          |        }
          |        ... on Droid {
          |          primaryFunction
          |          friends {
          |            id
          |          }
          |        }
          |      }
          |    }
          |    ... on Starship {
          |      name
          |    }
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
