// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val nullableListOfNullableSearchAdapter: ResponseAdapter<List<TestQuery.Data.Search?>?> =
      NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Search(responseAdapterCache))))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var search: List<TestQuery.Data.Search?>? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> search = nullableListOfNullableSearchAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      search = search
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("search")
    nullableListOfNullableSearchAdapter.toResponse(writer, value.search)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
        fieldName = "search",
        arguments = mapOf<String, Any?>(
          "text" to "test"),
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", Search.AsCharacter.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", Search.AsCharacter.RESPONSE_FIELDS),
          ResponseField.FieldSet("Starship", Search.AsStarship.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Search(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Search> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val AsCharacterAdapter: AsCharacter =
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsCharacter(responseAdapterCache)

    private val AsStarshipAdapter: AsStarship =
        com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsStarship(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Search {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var asAsCharacter: TestQuery.Data.Search.AsCharacter? = null
      var asAsStarship: TestQuery.Data.Search.AsStarship? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        asAsCharacter = AsCharacterAdapter.fromResponse(reader, __typename)
      }
      if (__typename in arrayOf("Starship")) {
        reader.rewind()
        asAsStarship = AsStarshipAdapter.fromResponse(reader, __typename)
      }

      return TestQuery.Data.Search(
        __typename = __typename!!,
        asAsCharacter = asAsCharacter,
        asAsStarship = asAsStarship
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Search) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.asAsCharacter != null) AsCharacterAdapter.toResponse(writer, value.asAsCharacter)
      if (value.asAsStarship != null) AsStarshipAdapter.toResponse(writer, value.asAsStarship)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class AsCharacter(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val nullableListOfNullableFriendsAdapter:
          ResponseAdapter<List<TestQuery.Data.Search.AsCharacter.Friends?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

      fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.Search.AsCharacter {
        var __typename: String? = __typename
        var id: String? = null
        var name: String? = null
        var friends: List<TestQuery.Data.Search.AsCharacter.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> id = stringAdapter.fromResponse(reader)
            2 -> name = stringAdapter.fromResponse(reader)
            3 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestQuery.Data.Search.AsCharacter(
          __typename = __typename!!,
          id = id!!,
          name = name!!,
          friends = friends
        )
      }

      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Search.AsCharacter) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("id")
        stringAdapter.toResponse(writer, value.id)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "id",
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Droid", Friends.AsCharacter.RESPONSE_FIELDS),
              ResponseField.FieldSet("Human", Friends.AsCharacter.RESPONSE_FIELDS),
              ResponseField.FieldSet("Human", Friends.AsHuman.RESPONSE_FIELDS),
              ResponseField.FieldSet("Droid", Friends.AsDroid.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends> {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val AsCharacterAdapter: AsCharacter =
            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsCharacter.Friends.AsCharacter(responseAdapterCache)

        private val AsHumanAdapter: AsHuman =
            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsCharacter.Friends.AsHuman(responseAdapterCache)

        private val AsDroidAdapter: AsDroid =
            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsCharacter.Friends.AsDroid(responseAdapterCache)

        override fun fromResponse(reader: JsonReader): TestQuery.Data.Search.AsCharacter.Friends {
          val reader = reader.buffer()
          reader.beginObject()

          var __typename: String? = null
          var asAsCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter? = null
          var asAsHuman: TestQuery.Data.Search.AsCharacter.Friends.AsHuman? = null
          var asAsDroid: TestQuery.Data.Search.AsCharacter.Friends.AsDroid? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = stringAdapter.fromResponse(reader)
              else -> break
            }
          }
          if (__typename in arrayOf("Droid", "Human")) {
            reader.rewind()
            asAsCharacter = AsCharacterAdapter.fromResponse(reader, __typename)
          }
          if (__typename in arrayOf("Human")) {
            reader.rewind()
            asAsHuman = AsHumanAdapter.fromResponse(reader, __typename)
          }
          if (__typename in arrayOf("Droid")) {
            reader.rewind()
            asAsDroid = AsDroidAdapter.fromResponse(reader, __typename)
          }

          return TestQuery.Data.Search.AsCharacter.Friends(
            __typename = __typename!!,
            asAsCharacter = asAsCharacter,
            asAsHuman = asAsHuman,
            asAsDroid = asAsDroid
          )
          .also { reader.endObject() }
        }

        override fun toResponse(writer: JsonWriter,
            value: TestQuery.Data.Search.AsCharacter.Friends) {
          writer.beginObject()
          writer.name("__typename")
          stringAdapter.toResponse(writer, value.__typename)
          if (value.asAsCharacter != null) AsCharacterAdapter.toResponse(writer,
              value.asAsCharacter)
          if (value.asAsHuman != null) AsHumanAdapter.toResponse(writer, value.asAsHuman)
          if (value.asAsDroid != null) AsDroidAdapter.toResponse(writer, value.asAsDroid)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class AsCharacter(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Search.AsCharacter.Friends.AsCharacter {
            var __typename: String? = __typename
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsCharacter(
              __typename = __typename!!,
              name = name!!
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }

        class AsHuman(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          private val nullableStringAdapter: ResponseAdapter<String?> =
              NullableResponseAdapter(StringResponseAdapter)

          private val nullableListOfNullableFriendsAdapter:
              ResponseAdapter<List<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends?>?> =
              NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Search.AsCharacter.Friends.AsHuman {
            var __typename: String? = __typename
            var homePlanet: String? = null
            var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> homePlanet = nullableStringAdapter.fromResponse(reader)
                2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsHuman(
              __typename = __typename!!,
              homePlanet = homePlanet,
              friends = friends
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("homePlanet")
            nullableStringAdapter.toResponse(writer, value.homePlanet)
            writer.name("friends")
            nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.Named.Other("String"),
                fieldName = "homePlanet",
              ),
              ResponseField(
                type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
                fieldName = "friends",
                fieldSets = listOf(
                  ResponseField.FieldSet("Droid", Friends.AsCharacter.RESPONSE_FIELDS),
                  ResponseField.FieldSet("Human", Friends.AsCharacter.RESPONSE_FIELDS),
                ),
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }

          class Friends(
            responseAdapterCache: ResponseAdapterCache
          ) : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends> {
            private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

            private val AsCharacterAdapter: AsCharacter =
                com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter(responseAdapterCache)

            override fun fromResponse(reader: JsonReader):
                TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends {
              val reader = reader.buffer()
              reader.beginObject()

              var __typename: String? = null
              var asAsCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = stringAdapter.fromResponse(reader)
                  else -> break
                }
              }
              if (__typename in arrayOf("Droid", "Human")) {
                reader.rewind()
                asAsCharacter = AsCharacterAdapter.fromResponse(reader, __typename)
              }

              return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends(
                __typename = __typename!!,
                asAsCharacter = asAsCharacter
              )
              .also { reader.endObject() }
            }

            override fun toResponse(writer: JsonWriter,
                value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends) {
              writer.beginObject()
              writer.name("__typename")
              stringAdapter.toResponse(writer, value.__typename)
              if (value.asAsCharacter != null) AsCharacterAdapter.toResponse(writer,
                  value.asAsCharacter)
              writer.endObject()
            }

            companion object {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField.Typename
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
            }

            class AsCharacter(
              responseAdapterCache: ResponseAdapterCache
            ) {
              private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

              private val episodeAdapter: ResponseAdapter<Episode> = Episode_ResponseAdapter

              fun fromResponse(reader: JsonReader, __typename: String?):
                  TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter {
                var __typename: String? = __typename
                var firstAppearsIn: Episode? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = stringAdapter.fromResponse(reader)
                    1 -> firstAppearsIn = episodeAdapter.fromResponse(reader)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter(
                  __typename = __typename!!,
                  firstAppearsIn = firstAppearsIn!!
                )
              }

              fun toResponse(writer: JsonWriter,
                  value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter) {
                writer.beginObject()
                writer.name("__typename")
                stringAdapter.toResponse(writer, value.__typename)
                writer.name("firstAppearsIn")
                episodeAdapter.toResponse(writer, value.firstAppearsIn)
                writer.endObject()
              }

              companion object {
                val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                  ResponseField.Typename,
                  ResponseField(
                    type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Episode")),
                    fieldName = "firstAppearsIn",
                  )
                )

                val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
              }
            }
          }
        }

        class AsDroid(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          private val nullableStringAdapter: ResponseAdapter<String?> =
              NullableResponseAdapter(StringResponseAdapter)

          private val nullableListOfNullableFriendsAdapter:
              ResponseAdapter<List<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends?>?> =
              NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Search.AsCharacter.Friends.AsDroid {
            var __typename: String? = __typename
            var primaryFunction: String? = null
            var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> primaryFunction = nullableStringAdapter.fromResponse(reader)
                2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsDroid(
              __typename = __typename!!,
              primaryFunction = primaryFunction,
              friends = friends
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("primaryFunction")
            nullableStringAdapter.toResponse(writer, value.primaryFunction)
            writer.name("friends")
            nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.Named.Other("String"),
                fieldName = "primaryFunction",
              ),
              ResponseField(
                type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
                fieldName = "friends",
                fieldSets = listOf(
                  ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
                ),
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }

          class Friends(
            responseAdapterCache: ResponseAdapterCache
          ) : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends> {
            private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

            override fun fromResponse(reader: JsonReader):
                TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends {
              var id: String? = null
              reader.beginObject()
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> id = stringAdapter.fromResponse(reader)
                  else -> break
                }
              }
              reader.endObject()
              return TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends(
                id = id!!
              )
            }

            override fun toResponse(writer: JsonWriter,
                value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends) {
              writer.beginObject()
              writer.name("id")
              stringAdapter.toResponse(writer, value.id)
              writer.endObject()
            }

            companion object {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  fieldName = "id",
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
            }
          }
        }
      }
    }

    class AsStarship(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.Search.AsStarship {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestQuery.Data.Search.AsStarship(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Search.AsStarship) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
