//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        search = search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.search)
    }

    object Search : Adapter<TestQuery.Data.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Search {
        var __typename: String? = null
        var onCharacter: TestQuery.Data.Search.OnCharacter? = null
        var onStarship: TestQuery.Data.Search.OnStarship? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        check(__typename != null) {
          "__typename was not found"
        }
        if(possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
          reader.rewind()
          onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.fromJson(reader,
              customScalarAdapters)
        }

        if(possibleTypes("Starship").evaluate(emptySet(), __typename)) {
          reader.rewind()
          onStarship = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.fromJson(reader,
              customScalarAdapters)
        }
        return TestQuery.Data.Search(
          __typename = __typename!!,
          onCharacter = onCharacter,
          onStarship = onStarship
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Search
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.toJson(writer,
              customScalarAdapters, value.onCharacter)
        }

        if (value.onStarship != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.toJson(writer,
              customScalarAdapters, value.onStarship)
        }
      }

      object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("id", "name", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Search.OnCharacter {
          var id: String? = null
          var name: String? = null
          var friends: List<TestQuery.Data.Search.OnCharacter.Friend?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> friends = Friend.obj(true).nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Search.OnCharacter(
            id = id!!,
            name = name!!,
            friends = friends
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Search.OnCharacter
        ) {
          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("friends")
          Friend.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
              value.friends)
        }

        object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Search.OnCharacter.Friend {
            var __typename: String? = null
            var onCharacter: TestQuery.Data.Search.OnCharacter.Friend.OnCharacter? = null
            var onHuman: TestQuery.Data.Search.OnCharacter.Friend.OnHuman? = null
            var onDroid: TestQuery.Data.Search.OnCharacter.Friend.OnDroid? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }
            check(__typename != null) {
              "__typename was not found"
            }
            if(possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
              reader.rewind()
              onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.fromJson(reader,
                  customScalarAdapters)
            }

            if(possibleTypes("Human").evaluate(emptySet(), __typename)) {
              reader.rewind()
              onHuman = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.fromJson(reader,
                  customScalarAdapters)
            }

            if(possibleTypes("Droid").evaluate(emptySet(), __typename)) {
              reader.rewind()
              onDroid = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.fromJson(reader,
                  customScalarAdapters)
            }
            return TestQuery.Data.Search.OnCharacter.Friend(
              __typename = __typename!!,
              onCharacter = onCharacter,
              onHuman = onHuman,
              onDroid = onDroid
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.Data.Search.OnCharacter.Friend
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.onCharacter != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.toJson(writer,
                  customScalarAdapters, value.onCharacter)
            }

            if (value.onHuman != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.toJson(writer,
                  customScalarAdapters, value.onHuman)
            }

            if (value.onDroid != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.toJson(writer,
                  customScalarAdapters, value.onDroid)
            }
          }

          object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnCharacter> {
            val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnCharacter {
              var name: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }
              return TestQuery.Data.Search.OnCharacter.Friend.OnCharacter(
                name = name!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.Data.Search.OnCharacter.Friend.OnCharacter
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }

          object OnHuman : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman> {
            val RESPONSE_NAMES: List<String> = listOf("homePlanet", "friends")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnHuman {
              var homePlanet: String? = null
              var friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> friends = Friend.obj(true).nullable().list().nullable().fromJson(reader,
                      customScalarAdapters)
                  else -> break
                }
              }
              return TestQuery.Data.Search.OnCharacter.Friend.OnHuman(
                homePlanet = homePlanet,
                friends = friends
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.Data.Search.OnCharacter.Friend.OnHuman
            ) {
              writer.name("homePlanet")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

              writer.name("friends")
              Friend.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
                  value.friends)
            }

            object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend> {
              val RESPONSE_NAMES: List<String> = listOf("__typename")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                  TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend {
                var __typename: String? = null
                var onCharacter: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }
                check(__typename != null) {
                  "__typename was not found"
                }
                if(possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
                  reader.rewind()
                  onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.fromJson(reader,
                      customScalarAdapters)
                }
                return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend(
                  __typename = __typename!!,
                  onCharacter = onCharacter
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                value: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend
              ) {
                writer.name("__typename")
                StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

                if (value.onCharacter != null) {
                  com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.toJson(writer,
                      customScalarAdapters, value.onCharacter)
                }
              }

              object OnCharacter :
                  Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter> {
                val RESPONSE_NAMES: List<String> = listOf("firstAppearsIn")

                override fun fromJson(reader: JsonReader,
                    customScalarAdapters: CustomScalarAdapters):
                    TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter {
                  var firstAppearsIn: Episode? = null
                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> firstAppearsIn = Episode_ResponseAdapter.fromJson(reader,
                          customScalarAdapters)
                      else -> break
                    }
                  }
                  return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter(
                    firstAppearsIn = firstAppearsIn!!
                  )
                }

                override fun toJson(
                  writer: JsonWriter,
                  customScalarAdapters: CustomScalarAdapters,
                  value: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter
                ) {
                  writer.name("firstAppearsIn")
                  Episode_ResponseAdapter.toJson(writer, customScalarAdapters, value.firstAppearsIn)
                }
              }
            }
          }

          object OnDroid : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid> {
            val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnDroid {
              var primaryFunction: String? = null
              var friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> primaryFunction = NullableStringAdapter.fromJson(reader,
                      customScalarAdapters)
                  1 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                      customScalarAdapters)
                  else -> break
                }
              }
              return TestQuery.Data.Search.OnCharacter.Friend.OnDroid(
                primaryFunction = primaryFunction,
                friends = friends
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.Data.Search.OnCharacter.Friend.OnDroid
            ) {
              writer.name("primaryFunction")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

              writer.name("friends")
              Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
                  value.friends)
            }

            object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend> {
              val RESPONSE_NAMES: List<String> = listOf("id")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                  TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend {
                var id: String? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend(
                  id = id!!
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                value: TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend
              ) {
                writer.name("id")
                StringAdapter.toJson(writer, customScalarAdapters, value.id)
              }
            }
          }
        }
      }

      object OnStarship : Adapter<TestQuery.Data.Search.OnStarship> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Search.OnStarship {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Search.OnStarship(
            name = name!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Search.OnStarship
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
