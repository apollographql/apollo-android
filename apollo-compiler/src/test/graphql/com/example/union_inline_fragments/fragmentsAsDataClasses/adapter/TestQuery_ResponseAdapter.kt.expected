// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
      fieldName = "search",
      arguments = mapOf<String, Any?>(
        "text" to "test"),
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", Search.AsCharacter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", Search.AsCharacter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Starship", Search.AsStarship.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var search: List<TestQuery.Data.Search?>? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> search = Search.nullable().list().nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      search = search
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("search")
    Search.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    writer.endObject()
  }

  object Search : ResponseAdapter<TestQuery.Data.Search> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Search {
      val reader = reader.buffer()
      reader.beginObject()
      var __typename: String? = null

      var asAsCharacter: TestQuery.Data.Search.AsCharacter? = null
      var asAsStarship: TestQuery.Data.Search.AsStarship? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        (reader as MapJsonReader).rewind()
        asAsCharacter = AsCharacter.fromFields(reader, responseAdapterCache)
      }
      if (__typename in arrayOf("Starship")) {
        (reader as MapJsonReader).rewind()
        asAsStarship = AsStarship.fromFields(reader, responseAdapterCache)
      }

      reader.endObject()
      return TestQuery.Data.Search(
        __typename = __typename!!,
        asAsCharacter = asAsCharacter,
        asAsStarship = asAsStarship
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Search
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.asAsCharacter != null)
          AsCharacter.toResponse(writer, responseAdapterCache, value.asAsCharacter)
      if (value.asAsStarship != null)
          AsStarship.toResponse(writer, responseAdapterCache, value.asAsStarship)
      writer.endObject()
    }

    object AsCharacter : ResponseAdapter<TestQuery.Data.Search.AsCharacter> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet("Human", Friends.AsHuman.RESPONSE_FIELDS),
            ResponseField.FieldSet("Droid", Friends.AsDroid.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search.AsCharacter {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search.AsCharacter {
        var __typename: String? = null
        var id: String? = null
        var name: String? = null
        var friends: List<TestQuery.Data.Search.AsCharacter.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.AsCharacter(
          __typename = __typename!!,
          id = id!!,
          name = name!!,
          friends = friends
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.AsCharacter
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.friends)
        writer.endObject()
      }

      object Friends : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.AsCharacter.Friends {
          val reader = reader.buffer()
          reader.beginObject()
          var __typename: String? = null
<<<<<<< HEAD
          var name: String? = null
=======

          var asAsCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter? = null
>>>>>>> ab5258fe0... all compiler tests pass
          var asAsHuman: TestQuery.Data.Search.AsCharacter.Friends.AsHuman? = null
          var asAsDroid: TestQuery.Data.Search.AsCharacter.Friends.AsDroid? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
<<<<<<< HEAD
=======
          if (__typename in arrayOf("Droid", "Human")) {
            (reader as MapJsonReader).rewind()
            asAsCharacter = AsCharacter.fromFields(reader, responseAdapterCache)
          }
>>>>>>> ab5258fe0... all compiler tests pass
          if (__typename in arrayOf("Human")) {
            (reader as MapJsonReader).rewind()
            asAsHuman = AsHuman.fromFields(reader, responseAdapterCache)
          }
          if (__typename in arrayOf("Droid")) {
            (reader as MapJsonReader).rewind()
            asAsDroid = AsDroid.fromFields(reader, responseAdapterCache)
          }

          reader.endObject()
          return TestQuery.Data.Search.AsCharacter.Friends(
            __typename = __typename!!,
            name = name!!,
            asAsHuman = asAsHuman,
            asAsDroid = asAsDroid
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.AsCharacter.Friends
        ) {
          writer.beginObject()
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          if (value.asAsHuman != null)
              AsHuman.toResponse(writer, responseAdapterCache, value.asAsHuman)
          if (value.asAsDroid != null)
              AsDroid.toResponse(writer, responseAdapterCache, value.asAsDroid)
          writer.endObject()
        }

<<<<<<< HEAD
        object AsHuman {
=======
        object AsCharacter : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsCharacter>
            {
>>>>>>> ab5258fe0... all compiler tests pass
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
<<<<<<< HEAD
            ),
=======
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsCharacter {
            reader.beginObject()
            return fromFields(reader, responseAdapterCache).also { reader.endObject() }
          }

          fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsCharacter {
            var __typename: String? = null
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsCharacter(
              __typename = __typename!!,
              name = name!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.endObject()
          }
        }

        object AsHuman : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
>>>>>>> ab5258fe0... all compiler tests pass
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "homePlanet",
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              fieldName = "friends",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

<<<<<<< HEAD
          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestQuery.Data.Search.AsCharacter.Friends.AsHuman {
            var __typename: String? = __typename
            var name: String? = null
=======
          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsHuman {
            reader.beginObject()
            return fromFields(reader, responseAdapterCache).also { reader.endObject() }
          }

          fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsHuman {
            var __typename: String? = null
>>>>>>> ab5258fe0... all compiler tests pass
            var homePlanet: String? = null
            var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsHuman(
              __typename = __typename!!,
              name = name!!,
              homePlanet = homePlanet,
              friends = friends
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("homePlanet")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
            writer.name("friends")
            Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
                value.friends)
            writer.endObject()
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends> {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Episode")),
                fieldName = "firstAppearsIn",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends {
<<<<<<< HEAD
<<<<<<< HEAD
              var __typename: String? = null
              var firstAppearsIn: Episode? = null
              reader.beginObject()
=======
              reader.beginObject()
=======
>>>>>>> ef2ead98d... everything works, yay \o/
              val reader = reader.buffer()
              reader.beginObject()
              var __typename: String? = null

              var asAsCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter? = null
>>>>>>> ab5258fe0... all compiler tests pass
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> firstAppearsIn = Episode_ResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
<<<<<<< HEAD
              reader.endObject()
=======
              if (__typename in arrayOf("Droid", "Human")) {
                (reader as MapJsonReader).rewind()
                asAsCharacter = AsCharacter.fromFields(reader, responseAdapterCache)
              }

<<<<<<< HEAD
>>>>>>> ab5258fe0... all compiler tests pass
=======
              reader.endObject()
>>>>>>> ef2ead98d... everything works, yay \o/
              return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends(
                __typename = __typename!!,
                firstAppearsIn = firstAppearsIn!!
              )
<<<<<<< HEAD
<<<<<<< HEAD
=======
              reader.endObject()
>>>>>>> ab5258fe0... all compiler tests pass
=======
>>>>>>> ef2ead98d... everything works, yay \o/
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends
            ) {
              writer.beginObject()
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("firstAppearsIn")
              Episode_ResponseAdapter.toResponse(writer, responseAdapterCache, value.firstAppearsIn)
              writer.endObject()
            }
<<<<<<< HEAD
=======

            object AsCharacter :
                ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter>
                {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField.Typename,
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Episode")),
                  fieldName = "firstAppearsIn",
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter {
                reader.beginObject()
                return fromFields(reader, responseAdapterCache).also { reader.endObject() }
              }

              fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
                  TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter {
                var __typename: String? = null
                var firstAppearsIn: Episode? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    1 -> firstAppearsIn = Episode_ResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter(
                  __typename = __typename!!,
                  firstAppearsIn = firstAppearsIn!!
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter
              ) {
                writer.beginObject()
                writer.name("__typename")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                writer.name("firstAppearsIn")
                Episode_ResponseAdapter.toResponse(writer, responseAdapterCache,
                    value.firstAppearsIn)
                writer.endObject()
              }
            }
>>>>>>> ab5258fe0... all compiler tests pass
          }
        }

        object AsDroid : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsDroid> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "primaryFunction",
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              fieldName = "friends",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

<<<<<<< HEAD
          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestQuery.Data.Search.AsCharacter.Friends.AsDroid {
            var __typename: String? = __typename
            var name: String? = null
=======
          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsDroid {
            reader.beginObject()
            return fromFields(reader, responseAdapterCache).also { reader.endObject() }
          }

          fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends.AsDroid {
            var __typename: String? = null
>>>>>>> ab5258fe0... all compiler tests pass
            var primaryFunction: String? = null
            var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends.AsDroid(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction,
              friends = friends
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("primaryFunction")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                value.primaryFunction)
            writer.name("friends")
            Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
                value.friends)
            writer.endObject()
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends> {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "id",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends {
              var id: String? = null
              reader.beginObject()
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              reader.endObject()
              return TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends(
                id = id!!
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends
            ) {
              writer.beginObject()
              writer.name("id")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
              writer.endObject()
            }
          }
        }
      }
    }

    object AsStarship : ResponseAdapter<TestQuery.Data.Search.AsStarship> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search.AsStarship {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search.AsStarship {
        var __typename: String? = null
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.AsStarship(
          __typename = __typename!!,
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.AsStarship
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.endObject()
      }
    }
  }
}
