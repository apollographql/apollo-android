//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        search = search
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    }

    object Search : ResponseAdapter<TestQuery.Data.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "asCharacter", "asStarship")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search {
        var __typename: String? = null
        var asCharacter: TestQuery.Data.Search.AsCharacter? = null
        var asStarship: TestQuery.Data.Search.AsStarship? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> asCharacter = AsCharacter.nullable().fromResponse(reader, responseAdapterCache)
            2 -> asStarship = AsStarship.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search(
          __typename = __typename!!,
          asCharacter = asCharacter,
          asStarship = asStarship
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("asCharacter")
        AsCharacter.nullable().toResponse(writer, responseAdapterCache, value.asCharacter)
        writer.name("asStarship")
        AsStarship.nullable().toResponse(writer, responseAdapterCache, value.asStarship)
      }

      object AsCharacter : ResponseAdapter<TestQuery.Data.Search.AsCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "friends")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.AsCharacter {
          var __typename: String? = null
          var id: String? = null
          var name: String? = null
          var friends: List<TestQuery.Data.Search.AsCharacter.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              3 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Search.AsCharacter(
            __typename = __typename!!,
            id = id!!,
            name = name!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.AsCharacter
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("id")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "asCharacter", "asHuman",
              "asDroid")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Search.AsCharacter.Friends {
            var __typename: String? = null
            var asCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter? = null
            var asHuman: TestQuery.Data.Search.AsCharacter.Friends.AsHuman? = null
            var asDroid: TestQuery.Data.Search.AsCharacter.Friends.AsDroid? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> asCharacter = AsCharacter.nullable().fromResponse(reader, responseAdapterCache)
                2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
                3 -> asDroid = AsDroid.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.AsCharacter.Friends(
              __typename = __typename!!,
              asCharacter = asCharacter,
              asHuman = asHuman,
              asDroid = asDroid
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.AsCharacter.Friends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("asCharacter")
            AsCharacter.nullable().toResponse(writer, responseAdapterCache, value.asCharacter)
            writer.name("asHuman")
            AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
            writer.name("asDroid")
            AsDroid.nullable().toResponse(writer, responseAdapterCache, value.asDroid)
          }

          object AsCharacter :
              ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsCharacter> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.AsCharacter.Friends.AsCharacter {
              var __typename: String? = null
              var name: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Search.AsCharacter.Friends.AsCharacter(
                __typename = __typename!!,
                name = name!!
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsCharacter
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            }
          }

          object AsHuman : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "homePlanet", "friends")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.AsCharacter.Friends.AsHuman {
              var __typename: String? = null
              var homePlanet: String? = null
              var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Search.AsCharacter.Friends.AsHuman(
                __typename = __typename!!,
                homePlanet = homePlanet,
                friends = friends
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("homePlanet")
              NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                  value.homePlanet)
              writer.name("friends")
              Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
                  value.friends)
            }

            object Friends :
                ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends> {
              val RESPONSE_NAMES: List<String> = listOf("__typename", "asCharacter")

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends {
                var __typename: String? = null
                var asCharacter: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    1 -> asCharacter = AsCharacter.nullable().fromResponse(reader,
                        responseAdapterCache)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends(
                  __typename = __typename!!,
                  asCharacter = asCharacter
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends
              ) {
                writer.name("__typename")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                writer.name("asCharacter")
                AsCharacter.nullable().toResponse(writer, responseAdapterCache, value.asCharacter)
              }

              object AsCharacter :
                  ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter>
                  {
                val RESPONSE_NAMES: List<String> = listOf("__typename", "firstAppearsIn")

                override fun fromResponse(reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache):
                    TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter {
                  var __typename: String? = null
                  var firstAppearsIn: Episode? = null
                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> __typename = StringResponseAdapter.fromResponse(reader,
                          responseAdapterCache)
                      1 -> firstAppearsIn = Episode_ResponseAdapter.fromResponse(reader,
                          responseAdapterCache)
                      else -> break
                    }
                  }
                  return TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter(
                    __typename = __typename!!,
                    firstAppearsIn = firstAppearsIn!!
                  )
                }

                override fun toResponse(
                  writer: JsonWriter,
                  responseAdapterCache: ResponseAdapterCache,
                  value: TestQuery.Data.Search.AsCharacter.Friends.AsHuman.Friends.AsCharacter
                ) {
                  writer.name("__typename")
                  StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                  writer.name("firstAppearsIn")
                  Episode_ResponseAdapter.toResponse(writer, responseAdapterCache,
                      value.firstAppearsIn)
                }
              }
            }
          }

          object AsDroid : ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsDroid> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "primaryFunction", "friends")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.AsCharacter.Friends.AsDroid {
              var __typename: String? = null
              var primaryFunction: String? = null
              var friends: List<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Search.AsCharacter.Friends.AsDroid(
                __typename = __typename!!,
                primaryFunction = primaryFunction,
                friends = friends
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("primaryFunction")
              NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                  value.primaryFunction)
              writer.name("friends")
              Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
                  value.friends)
            }

            object Friends :
                ResponseAdapter<TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends> {
              val RESPONSE_NAMES: List<String> = listOf("id")

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends {
                var id: String? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends(
                  id = id!!
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestQuery.Data.Search.AsCharacter.Friends.AsDroid.Friends
              ) {
                writer.name("id")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
              }
            }
          }
        }
      }

      object AsStarship : ResponseAdapter<TestQuery.Data.Search.AsStarship> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.AsStarship {
          var __typename: String? = null
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Search.AsStarship(
            __typename = __typename!!,
            name = name!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.AsStarship
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }
  }
}
