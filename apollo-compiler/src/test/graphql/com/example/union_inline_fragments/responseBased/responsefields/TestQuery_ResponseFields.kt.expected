//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.responsefields

import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.MergedField
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.Array

object TestQuery_ResponseFields {
  val fields: Array<MergedField> = arrayOf(
    MergedField(
      type = MergedField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<MergedField> = arrayOf(
      MergedField(
        type = MergedField.Type.Named.Object("unused").list(),
        fieldName = "search",
        arguments = mapOf("text" to "test"
        ),
        fieldSets = listOf(
          FieldSet(null, Search.fields),
          FieldSet("Droid", CharacterSearch.fields),
          FieldSet("Human", CharacterSearch.fields),
          FieldSet("Starship", StarshipSearch.fields),
        ),
      ),
    )


    object Search {
      val fields: Array<MergedField> = arrayOf(
        MergedField.Typename,
      )

    }

    object CharacterSearch {
      val fields: Array<MergedField> = arrayOf(
        MergedField.Typename,
        MergedField(
          type = MergedField.Type.Named.Other("unused").notNull(),
          fieldName = "id",
        ),
        MergedField(
          type = MergedField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
        MergedField(
          type = MergedField.Type.Named.Object("unused").list(),
          fieldName = "friends",
          fieldSets = listOf(
            FieldSet(null, Friend.fields),
            FieldSet("Human", HumanFriend.fields),
            FieldSet("Droid", DroidFriend.fields),
          ),
        ),
      )


      object Friend {
        val fields: Array<MergedField> = arrayOf(
          MergedField.Typename,
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
        )

      }

      object HumanFriend {
        val fields: Array<MergedField> = arrayOf(
          MergedField.Typename,
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          MergedField(
            type = MergedField.Type.Named.Other("unused"),
            fieldName = "homePlanet",
          ),
          MergedField(
            type = MergedField.Type.Named.Object("unused").list(),
            fieldName = "friends",
            fieldSets = listOf(
              FieldSet(null, Friend.fields),
            ),
          ),
        )


        object Friend {
          val fields: Array<MergedField> = arrayOf(
            MergedField.Typename,
            MergedField(
              type = MergedField.Type.Named.Other("unused").notNull(),
              fieldName = "firstAppearsIn",
            ),
          )

        }
      }

      object DroidFriend {
        val fields: Array<MergedField> = arrayOf(
          MergedField.Typename,
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          MergedField(
            type = MergedField.Type.Named.Other("unused"),
            fieldName = "primaryFunction",
          ),
          MergedField(
            type = MergedField.Type.Named.Object("unused").list(),
            fieldName = "friends",
            fieldSets = listOf(
              FieldSet(null, Friend.fields),
            ),
          ),
        )


        object Friend {
          val fields: Array<MergedField> = arrayOf(
            MergedField(
              type = MergedField.Type.Named.Other("unused").notNull(),
              fieldName = "id",
            ),
          )

        }
      }
    }

    object StarshipSearch {
      val fields: Array<MergedField> = arrayOf(
        MergedField.Typename,
        MergedField(
          type = MergedField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
      )

    }
  }
}
