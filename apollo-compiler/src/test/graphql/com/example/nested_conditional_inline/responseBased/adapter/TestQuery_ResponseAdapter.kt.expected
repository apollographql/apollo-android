//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_conditional_inline.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    private object Hero : Adapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Hero {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanHero.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidHero.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherHero.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Hero
      ) {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.DroidHero -> DroidHero.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    object HumanHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var name: String? = null
        var friends: List<TestQuery.Data.HumanHero.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.HumanHero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
            value.friends)
      }

      private object Friend : Adapter<TestQuery.Data.HumanHero.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.HumanHero.Friend {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Human",
            -> HumanFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.HumanHero.Friend
        ) {
          when(value) {
            is TestQuery.Data.HumanHero.HumanFriend -> HumanFriend.toJson(writer,
                customScalarAdapters, value)
            is TestQuery.Data.HumanHero.OtherFriend -> OtherFriend.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      object HumanFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.HumanHero.HumanFriend {
          var __typename: String? = typename
          var name: String? = null
          var height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.HumanFriend(
            __typename = __typename!!,
            name = name!!,
            height = height
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.HumanHero.HumanFriend
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
        }
      }

      object OtherFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.HumanHero.OtherFriend {
          var __typename: String? = typename
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.OtherFriend(
            __typename = __typename!!,
            name = name!!
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.HumanHero.OtherFriend
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    object DroidHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var name: String? = null
        var friends: List<TestQuery.Data.DroidHero.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.DroidHero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
            value.friends)
      }

      private object Friend : Adapter<TestQuery.Data.DroidHero.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.DroidHero.Friend {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Human",
            -> HumanFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.DroidHero.Friend
        ) {
          when(value) {
            is TestQuery.Data.DroidHero.HumanFriend -> HumanFriend.toJson(writer,
                customScalarAdapters, value)
            is TestQuery.Data.DroidHero.OtherFriend -> OtherFriend.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      object HumanFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.DroidHero.HumanFriend {
          var __typename: String? = typename
          var name: String? = null
          var height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.HumanFriend(
            __typename = __typename!!,
            name = name!!,
            height = height
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.DroidHero.HumanFriend
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
        }
      }

      object OtherFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.DroidHero.OtherFriend {
          var __typename: String? = typename
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.OtherFriend(
            __typename = __typename!!,
            name = name!!
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.DroidHero.OtherFriend
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    object OtherHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherHero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }
  }
}
