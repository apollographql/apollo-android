//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.nested_conditional_inline.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.nested_conditional_inline.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asHuman", "asDroid")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var name: String? = null
        var asHuman: TestQuery.Data.Hero.AsHuman? = null
        var asDroid: TestQuery.Data.Hero.AsDroid? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
            3 -> asDroid = AsDroid.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Hero(
          __typename = __typename!!,
          name = name!!,
          asHuman = asHuman,
          asDroid = asDroid
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("asHuman")
        AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
        writer.name("asDroid")
        AsDroid.nullable().toResponse(writer, responseAdapterCache, value.asDroid)
      }

      object AsHuman : ResponseAdapter<TestQuery.Data.Hero.AsHuman> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Hero.AsHuman {
          var __typename: String? = null
          var name: String? = null
          var friends: List<TestQuery.Data.Hero.AsHuman.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.AsHuman(
            __typename = __typename!!,
            name = name!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.AsHuman
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends : ResponseAdapter<TestQuery.Data.Hero.AsHuman.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asHuman")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Hero.AsHuman.Friends {
            var __typename: String? = null
            var name: String? = null
            var asHuman: TestQuery.Data.Hero.AsHuman.Friends.AsHuman? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Hero.AsHuman.Friends(
              __typename = __typename!!,
              name = name!!,
              asHuman = asHuman
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Hero.AsHuman.Friends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("asHuman")
            AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
          }

          object AsHuman : ResponseAdapter<TestQuery.Data.Hero.AsHuman.Friends.AsHuman> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Hero.AsHuman.Friends.AsHuman {
              var __typename: String? = null
              var name: String? = null
              var height: Double? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> height = NullableDoubleResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Hero.AsHuman.Friends.AsHuman(
                __typename = __typename!!,
                name = name!!,
                height = height
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Hero.AsHuman.Friends.AsHuman
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.name("height")
              NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
            }
          }
        }
      }

      object AsDroid : ResponseAdapter<TestQuery.Data.Hero.AsDroid> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Hero.AsDroid {
          var __typename: String? = null
          var name: String? = null
          var friends: List<TestQuery.Data.Hero.AsDroid.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.AsDroid(
            __typename = __typename!!,
            name = name!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.AsDroid
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends : ResponseAdapter<TestQuery.Data.Hero.AsDroid.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asHuman")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Hero.AsDroid.Friends {
            var __typename: String? = null
            var name: String? = null
            var asHuman: TestQuery.Data.Hero.AsDroid.Friends.AsHuman? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Hero.AsDroid.Friends(
              __typename = __typename!!,
              name = name!!,
              asHuman = asHuman
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Hero.AsDroid.Friends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("asHuman")
            AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
          }

          object AsHuman : ResponseAdapter<TestQuery.Data.Hero.AsDroid.Friends.AsHuman> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Hero.AsDroid.Friends.AsHuman {
              var __typename: String? = null
              var name: String? = null
              var height: Double? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> height = NullableDoubleResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Hero.AsDroid.Friends.AsHuman(
                __typename = __typename!!,
                name = name!!,
                height = height
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Hero.AsDroid.Friends.AsHuman
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.name("height")
              NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
            }
          }
        }
      }
    }
  }
}
