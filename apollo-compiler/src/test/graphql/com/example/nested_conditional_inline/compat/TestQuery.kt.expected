//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter
import com.example.nested_conditional_inline.adapter.TestQuery_VariablesAdapter
import com.example.nested_conditional_inline.selections.TestQuerySelections
import com.example.nested_conditional_inline.type.Episode
import kotlin.Double
import kotlin.String
import kotlin.collections.List

data class TestQuery(
  val episode: Episode?
) : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    TestQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun selections(): List<CompiledSelection> = TestQuerySelections.root

  data class Data(
    val hero: Hero?
  ) : Query.Data

  data class Hero(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * Synthetic field for inline fragment on Human
     */
    val asHuman: AsHuman1?,
    /**
     * Synthetic field for inline fragment on Droid
     */
    val asDroid: AsDroid?
  )

  data class AsHuman1(
    /**
     * This human's friends, or an empty list if they have none
     */
    val friends: List<Friend?>?,
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String
  ) {
    fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()
  }

  data class Friend(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * Synthetic field for inline fragment on Human
     */
    val asHuman: AsHuman?
  )

  data class AsHuman(
    /**
     * Height in the preferred unit, default is meters
     */
    val height: Double?,
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String
  )

  data class AsDroid(
    /**
     * This droid's friends, or an empty list if they have none
     */
    val friends: List<Friend1?>?,
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String
  ) {
    fun friendsFilterNotNull(): List<Friend1>? = friends?.filterNotNull()
  }

  data class Friend1(
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String,
    /**
     * Synthetic field for inline fragment on Human
     */
    val asHuman: AsHuman2?
  )

  data class AsHuman2(
    /**
     * Height in the preferred unit, default is meters
     */
    val height: Double?,
    val __typename: String,
    /**
     * The name of the character
     */
    val name: String
  )

  companion object {
    const val OPERATION_ID: String =
        "a9f066a7d1092096ab154f16f32114a4bd71e959b789f37879249cdf6309ea86"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery($episode: Episode) {
     *   hero(episode: $episode) {
     *     __typename
     *     name
     *     ... on Human {
     *       friends {
     *         __typename
     *         name
     *         ... on Human {
     *           height(unit: FOOT)
     *         }
     *       }
     *     }
     *     ... on Droid {
     *       friends {
     *         __typename
     *         name
     *         ... on Human {
     *           height(unit: METER)
     *         }
     *       }
     *     }
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery(${'$'}episode: Episode) { hero(episode: ${'$'}episode) { __typename name ... on Human { friends { __typename name ... on Human { height(unit: FOOT) } } } ... on Droid { friends { __typename name ... on Human { height(unit: METER) } } } } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
