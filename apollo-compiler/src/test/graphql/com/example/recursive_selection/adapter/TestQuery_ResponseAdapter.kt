// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.recursive_selection.adapter

import com.apollographql.apollo.api.ResponseAdapterCache
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.StringResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.example.recursive_selection.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val nullableTreeAdapter: ResponseAdapter<TestQuery.Data.Tree?> =
      NullableResponseAdapter(Tree(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var tree: TestQuery.Data.Tree? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> tree = nullableTreeAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      tree = tree
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("tree")
    nullableTreeAdapter.toResponse(writer, value.tree)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Tree"),
        fieldName = "tree",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Tree.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Tree(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Tree> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val listOfChildrenAdapter: ResponseAdapter<List<TestQuery.Data.Tree.Children>> =
        ListResponseAdapter(Children(responseAdapterCache))

    private val nullableParentAdapter: ResponseAdapter<TestQuery.Data.Tree.Parent?> =
        NullableResponseAdapter(Parent(responseAdapterCache))

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Tree {
      var name: String? = null
      var children: List<TestQuery.Data.Tree.Children>? = null
      var parent: TestQuery.Data.Tree.Parent? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = stringAdapter.fromResponse(reader)
          1 -> children = listOfChildrenAdapter.fromResponse(reader)
          2 -> parent = nullableParentAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.Tree(
        name = name!!,
        children = children!!,
        parent = parent
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Tree) {
      writer.beginObject()
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("children")
      listOfChildrenAdapter.toResponse(writer, value.children)
      writer.name("parent")
      nullableParentAdapter.toResponse(writer, value.parent)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Tree")))),
          fieldName = "children",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Children.RESPONSE_FIELDS)
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("Tree"),
          fieldName = "parent",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Parent.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Children(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<TestQuery.Data.Tree.Children> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      override fun fromResponse(reader: JsonReader): TestQuery.Data.Tree.Children {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.Tree.Children(
          name = name!!
        )
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Tree.Children) {
        writer.beginObject()
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }

    class Parent(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<TestQuery.Data.Tree.Parent> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      override fun fromResponse(reader: JsonReader): TestQuery.Data.Tree.Parent {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.Tree.Parent(
          name = name!!
        )
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Tree.Parent) {
        writer.beginObject()
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
