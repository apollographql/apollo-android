//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.recursive_selection.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.recursive_selection.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("tree")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var tree: TestQuery.Data.Tree? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> tree = Tree.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        tree = tree
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("tree")
      Tree.obj().nullable().toJson(writer, customScalarAdapters, value.tree)
    }

    object Tree : Adapter<TestQuery.Data.Tree> {
      val RESPONSE_NAMES: List<String> = listOf("name", "children", "parent")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Tree {
        var name: String? = null
        var children: List<TestQuery.Data.Tree.Child>? = null
        var parent: TestQuery.Data.Tree.Parent? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> children = Child.obj().list().fromJson(reader, customScalarAdapters)
            2 -> parent = Parent.obj().nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.Tree(
          name = name!!,
          children = children!!,
          parent = parent
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Tree
      ) {
        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("children")
        Child.obj().list().toJson(writer, customScalarAdapters, value.children)

        writer.name("parent")
        Parent.obj().nullable().toJson(writer, customScalarAdapters, value.parent)
      }

      object Child : Adapter<TestQuery.Data.Tree.Child> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Tree.Child {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Tree.Child(
            name = name!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Tree.Child
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      object Parent : Adapter<TestQuery.Data.Tree.Parent> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Tree.Parent {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Tree.Parent(
            name = name!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Tree.Parent
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
