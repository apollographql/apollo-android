//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.named_fragment_with_variables.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.possibleTypes
import com.example.named_fragment_with_variables.GetUser
import com.example.named_fragment_with_variables.fragment.QueryFragment
import kotlin.String
import kotlin.collections.List

object GetUser_ResponseAdapter {
  object Data : Adapter<GetUser.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUser.Data {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      val fragments = com.example.named_fragment_with_variables.adapter.GetUser_ResponseAdapter.Data.Fragments.fromJson(reader,
          customScalarAdapters)

      return GetUser.Data(
        __typename = __typename,
        fragments = fragments
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetUser.Data
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.example.named_fragment_with_variables.adapter.GetUser_ResponseAdapter.Data.Fragments.toJson(writer,
          customScalarAdapters, value.fragments)
    }

    private object Fragments : Adapter<GetUser.Data.Fragments> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          GetUser.Data.Fragments {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var queryFragment: QueryFragment? = null
        if (possibleTypes("Query").evaluate(emptySet(), __typename)) {
          queryFragment = com.example.named_fragment_with_variables.fragment.QueryFragmentImpl_ResponseAdapter.QueryFragment.fromJson(reader,
              customScalarAdapters)
        }

        return GetUser.Data.Fragments(
          queryFragment = queryFragment
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: GetUser.Data.Fragments
      ) {
        if (value.queryFragment != null) {
          com.example.named_fragment_with_variables.fragment.QueryFragmentImpl_ResponseAdapter.QueryFragment.toJson(writer,
              customScalarAdapters, value.queryFragment)
        }
      }
    }
  }
}
