// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables.fragment.adapter

import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.named_fragment_with_variables.fragment.QueryFragment
import com.example.named_fragment_with_variables.fragment.UserFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class QueryFragment_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<QueryFragment.Data> {
  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

  private val nullableOrganizationAdapter: ResponseAdapter<QueryFragment.Data.Organization?> =
      NullableResponseAdapter(Organization(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): QueryFragment.Data {
    var __typename: String? = null
    var organization: QueryFragment.Data.Organization? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        1 -> organization = nullableOrganizationAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return QueryFragment.Data(
      __typename = __typename!!,
      organization = organization
    )
  }

  override fun toResponse(writer: JsonWriter, value: QueryFragment.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    writer.name("organization")
    nullableOrganizationAdapter.toResponse(writer, value.organization)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Object("Organization"),
        fieldName = "organization",
        arguments = mapOf<String, Any?>(
          "id" to Variable("organizationId")),
        fieldSets = listOf(
          ResponseField.FieldSet(null, Organization.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Organization(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<QueryFragment.Data.Organization> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val listOfUserAdapter: ResponseAdapter<List<QueryFragment.Data.Organization.User>> =
        ListResponseAdapter(User(responseAdapterCache))

    override fun fromResponse(reader: JsonReader): QueryFragment.Data.Organization {
      var id: String? = null
      var user: List<QueryFragment.Data.Organization.User>? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = stringAdapter.fromResponse(reader)
          1 -> user = listOfUserAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return QueryFragment.Data.Organization(
        id = id!!,
        user = user!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Organization) {
      writer.beginObject()
      writer.name("id")
      stringAdapter.toResponse(writer, value.id)
      writer.name("user")
      listOfUserAdapter.toResponse(writer, value.user)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("User")))),
          fieldName = "user",
          arguments = mapOf<String, Any?>(
            "query" to Variable("query")),
          fieldSets = listOf(
            ResponseField.FieldSet("User", UserFragment_ResponseAdapter.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class User(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<QueryFragment.Data.Organization.User> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val UserFragmentAdapter: UserFragment_ResponseAdapter =
          com.example.named_fragment_with_variables.fragment.adapter.UserFragment_ResponseAdapter(responseAdapterCache)

      override fun fromResponse(reader: JsonReader): QueryFragment.Data.Organization.User {
        val reader = reader.buffer()
        reader.beginObject()

        var __typename: String? = null
        var userFragment: UserFragment.Data? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        if (__typename in arrayOf("User")) {
          reader.rewind()
          userFragment = UserFragmentAdapter.fromResponse(reader)
        }

        return QueryFragment.Data.Organization.User(
          __typename = __typename!!,
          userFragment = userFragment
        )
        .also { reader.endObject() }
      }

      override fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Organization.User) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        if (value.userFragment != null) UserFragmentAdapter.toResponse(writer, value.userFragment)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
