// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables.fragment.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.named_fragment_with_variables.fragment.QueryFragment
import com.example.named_fragment_with_variables.fragment.UserFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object QueryFragment_ResponseAdapter : ResponseAdapter<QueryFragment.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.Named.Object("Organization"),
      fieldName = "organization",
      arguments = mapOf<String, Any?>(
        "id" to Variable("organizationId")),
      fieldSets = listOf(
        ResponseField.FieldSet(null, Organization.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      QueryFragment.Data {
    reader.beginObject()
    return fromFields(reader, responseAdapterCache).also { reader.endObject() }
  }

  fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      QueryFragment.Data {
    var __typename: String? = null
    var organization: QueryFragment.Data.Organization? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> organization = Organization.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return QueryFragment.Data(
      __typename = __typename!!,
      organization = organization
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: QueryFragment.Data
  ) {
    writer.beginObject()
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("organization")
    Organization.nullable().toResponse(writer, responseAdapterCache, value.organization)
    writer.endObject()
  }

  object Organization : ResponseAdapter<QueryFragment.Data.Organization> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "id",
      ),
      ResponseField(
        type =
            ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("User")))),
        fieldName = "user",
        arguments = mapOf<String, Any?>(
          "query" to Variable("query")),
        fieldSets = listOf(
          ResponseField.FieldSet("User", UserFragment_ResponseAdapter.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        QueryFragment.Data.Organization {
      reader.beginObject()
      var id: String? = null
      var user: List<QueryFragment.Data.Organization.User>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> user = User.list().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return QueryFragment.Data.Organization(
        id = id!!,
        user = user!!
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: QueryFragment.Data.Organization
    ) {
      writer.beginObject()
      writer.name("id")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
      writer.name("user")
      User.list().toResponse(writer, responseAdapterCache, value.user)
      writer.endObject()
    }

    object User : ResponseAdapter<QueryFragment.Data.Organization.User> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          QueryFragment.Data.Organization.User {
        reader.beginObject()
        val reader = reader.buffer()
        var __typename: String? = null

        var userFragment: UserFragment.Data? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        if (__typename in arrayOf("User")) {
          reader.rewind()
          userFragment = UserFragment_ResponseAdapter.fromFields(reader, responseAdapterCache)
        }

        return QueryFragment.Data.Organization.User(
          __typename = __typename!!,
          userFragment = userFragment
        )
        reader.endObject()
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: QueryFragment.Data.Organization.User
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        if (value.userFragment != null)
            UserFragment_ResponseAdapter.toResponse(writer, responseAdapterCache, value.userFragment)
        writer.endObject()
      }
    }
  }
}
