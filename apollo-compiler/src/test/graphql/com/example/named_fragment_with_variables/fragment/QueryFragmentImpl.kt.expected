// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables.fragment

import com.apollographql.apollo3.api.Fragment
import com.apollographql.apollo3.api.Operation
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.internal.InputFieldMarshaller
import com.apollographql.apollo3.api.internal.ResponseAdapter
import com.example.named_fragment_with_variables.fragment.adapter.QueryFragmentImpl_ResponseAdapter
import com.example.named_fragment_with_variables.type.UserQuery
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient

data class QueryFragmentImpl(
  val organizationId: String,
  val query: UserQuery,
  val size: Int
) : Fragment<QueryFragmentImpl.Data> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["organizationId"] = this@QueryFragmentImpl.organizationId
      this["query"] = this@QueryFragmentImpl.query
      this["size"] = this@QueryFragmentImpl.size
    }

    override fun marshaller(): InputFieldMarshaller {
      return InputFieldMarshaller.invoke { writer ->
        writer.writeString("organizationId", this@QueryFragmentImpl.organizationId)
        writer.writeObject("query", this@QueryFragmentImpl.query.marshaller())
        writer.writeInt("size", this@QueryFragmentImpl.size)
      }
    }
  }

  override fun adapter(customScalarAdapters: ResponseAdapterCache): ResponseAdapter<Data> {
    val adapter = customScalarAdapters.getFragmentAdapter("QueryFragmentImpl") {
      QueryFragmentImpl_ResponseAdapter(customScalarAdapters)
    }
    return adapter
  }

  override fun responseFields(): List<ResponseField.FieldSet> = listOf(
    ResponseField.FieldSet(null, QueryFragmentImpl_ResponseAdapter.RESPONSE_FIELDS)
  )
  override fun variables(): Operation.Variables = variables

  data class Data(
    override val __typename: String = "Query",
    override val organization: Organization?
  ) : QueryFragment, Fragment.Data {
    data class Organization(
      override val id: String,
      override val user: List<User>
    ) : QueryFragment.Organization {
      interface User : QueryFragment.Organization.User {
        data class UserUser(
          override val __typename: String,
          override val firstName: String,
          override val lastName: String,
          override val avatar: String
        ) : QueryFragment.Organization.User, QueryFragment.Organization.User.User, UserFragment,
            User

        data class OtherUser(
          override val __typename: String
        ) : QueryFragment.Organization.User, User

        companion object {
          fun User.asUserUser(): UserUser? = this as? UserUser
        }
      }
    }
  }
}
