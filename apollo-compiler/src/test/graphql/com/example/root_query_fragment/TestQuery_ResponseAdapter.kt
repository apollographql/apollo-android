// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forString("__typename", "__typename", null, false, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return Data.fromResponse(reader, __typename)
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    Data.toResponse(writer, value)
  }

  object Data : ResponseAdapter<TestQuery.Data> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
      val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
      return when(typename) {
        "Query" -> QueryDatum.fromResponse(reader, typename)
        else -> OtherDatum.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
      when(value) {
        is TestQuery.Data.QueryDatum -> QueryDatum.toResponse(writer, value)
        is TestQuery.Data.OtherDatum -> OtherDatum.toResponse(writer, value)
      }
    }

    object QueryDatum : ResponseAdapter<TestQuery.Data.QueryDatum> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forObject("hero", "hero", null, true, null)
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.QueryDatum {
        return reader.run {
          var __typename: String? = __typename
          var hero: TestQuery.Data.QueryDatum.Hero? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> hero = readObject<TestQuery.Data.QueryDatum.Hero>(RESPONSE_FIELDS[1]) { reader ->
                Hero.fromResponse(reader)
              }
              else -> break
            }
          }
          TestQuery.Data.QueryDatum(
            __typename = __typename!!,
            hero = hero
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryDatum) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        if(value.hero == null) {
          writer.writeObject(RESPONSE_FIELDS[1], null)
        } else {
          writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
            Hero.toResponse(writer, value.hero)
          }
        }
      }

      object Hero : ResponseAdapter<TestQuery.Data.QueryDatum.Hero> {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("name", "name", null, false, null)
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryDatum.Hero {
          return reader.run {
            var name: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> name = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            TestQuery.Data.QueryDatum.Hero(
              name = name!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryDatum.Hero) {
          writer.writeString(RESPONSE_FIELDS[0], value.name)
        }
      }
    }

    object OtherDatum : ResponseAdapter<TestQuery.Data.OtherDatum> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null)
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.OtherDatum {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          TestQuery.Data.OtherDatum(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.OtherDatum) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }
}
