// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.apollographql.apollo.exception.UnexpectedNullValue
import com.example.root_query_fragment.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestQuery.Data> {
  val queryDataAdapter: QueryData =
      com.example.root_query_fragment.adapter.TestQuery_ResponseAdapter.QueryData(customScalarAdapters)

  val otherDataAdapter: OtherData =
      com.example.root_query_fragment.adapter.TestQuery_ResponseAdapter.OtherData(customScalarAdapters)

  override fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data {
    reader.beginObject()
    check(reader.nextName() == "__typename")
    val typename = reader.nextString()

    return when(typename) {
      "Query" -> queryDataAdapter.fromResponse(reader, typename)
      else -> otherDataAdapter.fromResponse(reader, typename)
    }
    .also { reader.endObject() }
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    when(value) {
      is TestQuery.Data.QueryData -> queryDataAdapter.toResponse(writer, value)
      is TestQuery.Data.OtherData -> otherDataAdapter.toResponse(writer, value)
    }
  }

  class QueryData(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.QueryData> {
    val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

    val heroAdapter: ResponseAdapter<TestQuery.Data.QueryData.Hero?> =
        NullableResponseAdapter(Hero(customScalarAdapters))

    override fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.QueryData {
      var __typename: String? = __typename
      var hero: TestQuery.Data.QueryData.Hero? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
              UnexpectedNullValue("__typename")
          1 -> hero = heroAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.QueryData(
        __typename = __typename!!,
        hero = hero
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.QueryData) {
      __typenameAdapter.toResponse(writer, value.__typename)
      heroAdapter.toResponse(writer, value.hero)
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("Character"),
          responseName = "hero",
          fieldName = "hero",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet(null, Hero.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Hero(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<TestQuery.Data.QueryData.Hero> {
      val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

      override fun fromResponse(reader: JsonReader, __typename: String?):
          TestQuery.Data.QueryData.Hero {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.QueryData.Hero(
          name = name!!
        )
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.QueryData.Hero) {
        nameAdapter.toResponse(writer, value.name)
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }

  class OtherData(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.OtherData> {
    val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

    override fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.OtherData {
      var __typename: String? = __typename
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
              UnexpectedNullValue("__typename")
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.OtherData(
        __typename = __typename!!
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.OtherData) {
      __typenameAdapter.toResponse(writer, value.__typename)
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }
}
