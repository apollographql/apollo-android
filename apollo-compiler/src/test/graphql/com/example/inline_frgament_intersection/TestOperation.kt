// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_frgament_intersection

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter
import com.example.inline_frgament_intersection.type.Race
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestOperation : Query<TestOperation.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun responseFieldMapper(): ResponseFieldMapper<Data> {
    return ResponseFieldMapper { reader ->
      TestOperation_ResponseAdapter.fromResponse(reader)
    }
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return parse(Buffer().write(byteString), scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> {
    return parse(source, DEFAULT)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> {
    return parse(byteString, DEFAULT)
  }

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString {
    return OperationRequestBodyComposer.compose(
      operation = this,
      autoPersistQueries = false,
      withQueryDocument = true,
      scalarTypeAdapters = scalarTypeAdapters
    )
  }

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class Data(
    val random: Random
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller { writer ->
        TestOperation_ResponseAdapter.Data.toResponse(writer, this)
      }
    }

    interface Random {
      val __typename: String

      fun marshaller(): ResponseFieldMarshaller

      interface Being : Random {
        override val __typename: String

        val name: String

        val friends: List<Friend>

        override fun marshaller(): ResponseFieldMarshaller

        interface Friend {
          val __typename: String

          val name: String

          fun marshaller(): ResponseFieldMarshaller

          interface Wookie : Friend {
            override val __typename: String

            override val name: String

            val lifeExpectancy: Double?

            override fun marshaller(): ResponseFieldMarshaller
          }

          companion object {
            fun Friend.asWookie(): Wookie? = this as? Wookie
          }
        }

        interface Human : Being {
          override val __typename: String

          override val name: String

          override val friends: List<Friend>

          val profilePictureUrl: String?

          override fun marshaller(): ResponseFieldMarshaller

          interface Friend : Being.Friend {
            override val __typename: String

            override val name: String

            val isFamous: Boolean?

            override fun marshaller(): ResponseFieldMarshaller

            interface Wookie : Being.Friend, Being.Friend.Wookie, Friend {
              override val __typename: String

              override val name: String

              override val lifeExpectancy: Double?

              override val isFamous: Boolean?

              val race: Race

              override fun marshaller(): ResponseFieldMarshaller
            }

            companion object {
              fun Friend.asWookie(): Wookie? = this as? Wookie
            }
          }
        }
      }

      interface Wookie : Random {
        override val __typename: String

        val race: Race

        val friends: List<Friend>

        override fun marshaller(): ResponseFieldMarshaller

        interface Friend {
          val lifeExpectancy: Double?

          fun marshaller(): ResponseFieldMarshaller
        }
      }

      interface BeingRandom : Random, Being {
        override val __typename: String

        override val name: String

        override val friends: List<Friend>

        override fun marshaller(): ResponseFieldMarshaller

        interface Friend : Being.Friend {
          override val __typename: String

          override val name: String

          override fun marshaller(): ResponseFieldMarshaller

          interface Wookie : Being.Friend, Being.Friend.Wookie, Friend {
            override val __typename: String

            override val name: String

            override val lifeExpectancy: Double?

            override fun marshaller(): ResponseFieldMarshaller
          }

          companion object {
            fun Friend.asWookie(): Being.Friend.Wookie? = this as? Being.Friend.Wookie
          }
        }

        interface Human : Being, Being.Human, BeingRandom {
          override val __typename: String

          override val name: String

          override val friends: List<Friend>

          override val profilePictureUrl: String?

          override fun marshaller(): ResponseFieldMarshaller

          interface Friend : Being.Friend, Being.Human.Friend, BeingRandom.Friend {
            override val __typename: String

            override val name: String

            override val isFamous: Boolean?

            override fun marshaller(): ResponseFieldMarshaller

            interface Wookie : Being.Friend, Being.Friend.Wookie, Being.Human.Friend.Wookie,
                Being.Human.Friend, BeingRandom.Friend, BeingRandom.Friend.Wookie, Friend {
              override val __typename: String

              override val name: String

              override val lifeExpectancy: Double?

              override val isFamous: Boolean?

              override val race: Race

              override fun marshaller(): ResponseFieldMarshaller
            }

            companion object {
              fun Friend.asWookie(): Being.Human.Friend.Wookie? = this as? Being.Human.Friend.Wookie
            }
          }
        }

        data class HumanBeingRandom(
          override val __typename: String,
          override val name: String,
          override val friends: List<Friend>,
          override val profilePictureUrl: String?
        ) : Being, Being.Human, BeingRandom, Human {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestOperation_ResponseAdapter.Data.Random.BeingRandom.HumanBeingRandom.toResponse(writer, this)
            }
          }

          interface Friend : Being.Friend, BeingRandom.Friend, Being.Human.Friend, Human.Friend {
            override val __typename: String

            override val name: String

            override val isFamous: Boolean?

            override fun marshaller(): ResponseFieldMarshaller

            interface Wookie : Being.Friend, Being.Friend.Wookie, BeingRandom.Friend,
                BeingRandom.Friend.Wookie, Friend, Being.Human.Friend.Wookie, Being.Human.Friend,
                Human.Friend.Wookie, Human.Friend {
              override val __typename: String

              override val name: String

              override val lifeExpectancy: Double?

              override val isFamous: Boolean?

              override val race: Race

              override fun marshaller(): ResponseFieldMarshaller
            }

            data class WookieFriend(
              override val __typename: String,
              override val name: String,
              override val isFamous: Boolean?,
              override val lifeExpectancy: Double?,
              override val race: Race
            ) : Being.Friend, Being.Friend.Wookie, BeingRandom.Friend, BeingRandom.Friend.Wookie,
                Friend, Wookie, Being.Human.Friend.Wookie, Being.Human.Friend, Human.Friend.Wookie,
                Human.Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestOperation_ResponseAdapter.Data.Random.BeingRandom.HumanBeingRandom.Friend.WookieFriend.toResponse(writer, this)
                }
              }
            }

            data class OtherFriend(
              override val __typename: String,
              override val name: String,
              override val isFamous: Boolean?
            ) : Being.Friend, BeingRandom.Friend, Friend, Being.Human.Friend, Human.Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestOperation_ResponseAdapter.Data.Random.BeingRandom.HumanBeingRandom.Friend.OtherFriend.toResponse(writer, this)
                }
              }
            }

            companion object {
              fun Friend.asFriends(): Human.Friend? = this as? Human.Friend

              fun Friend.asWookie(): Human.Friend.Wookie? = this as? Human.Friend.Wookie
            }
          }
        }

        data class OtherBeingRandom(
          override val __typename: String,
          override val name: String,
          override val friends: List<Friend>
        ) : Random, Being, BeingRandom {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestOperation_ResponseAdapter.Data.Random.BeingRandom.OtherBeingRandom.toResponse(writer, this)
            }
          }

          interface Friend : Being.Friend, BeingRandom.Friend {
            override val __typename: String

            override val name: String

            override fun marshaller(): ResponseFieldMarshaller

            interface Wookie : Being.Friend, Being.Friend.Wookie, BeingRandom.Friend,
                BeingRandom.Friend.Wookie, Friend {
              override val __typename: String

              override val name: String

              override val lifeExpectancy: Double?

              override fun marshaller(): ResponseFieldMarshaller
            }

            data class WookieFriend(
              override val __typename: String,
              override val name: String,
              override val lifeExpectancy: Double?
            ) : Being.Friend, Being.Friend.Wookie, BeingRandom.Friend, BeingRandom.Friend.Wookie,
                Wookie, Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestOperation_ResponseAdapter.Data.Random.BeingRandom.OtherBeingRandom.Friend.WookieFriend.toResponse(writer, this)
                }
              }
            }

            data class OtherFriend(
              override val __typename: String,
              override val name: String
            ) : Being.Friend, BeingRandom.Friend, Friend {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestOperation_ResponseAdapter.Data.Random.BeingRandom.OtherBeingRandom.Friend.OtherFriend.toResponse(writer, this)
                }
              }
            }

            companion object {
              fun Friend.asFriends(): BeingRandom.Friend? = this as? BeingRandom.Friend

              fun Friend.asWookie(): Wookie? = this as? Wookie
            }
          }
        }

        companion object {
          fun BeingRandom.asBeing(): Being? = this as? Being

          fun BeingRandom.asHuman(): Human? = this as? Human
        }
      }

      data class BeingWookieRandom(
        override val __typename: String,
        override val name: String,
        override val friends: List<Friend>,
        override val race: Race
      ) : Random, Being, Wookie {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestOperation_ResponseAdapter.Data.Random.BeingWookieRandom.toResponse(writer, this)
          }
        }

        interface Friend : Being.Friend, Wookie.Friend {
          override val __typename: String

          override val name: String

          override val lifeExpectancy: Double?

          override fun marshaller(): ResponseFieldMarshaller

          interface Wookie : Being.Friend, Being.Friend.Wookie, Friend {
            override val __typename: String

            override val name: String

            override val lifeExpectancy: Double?

            override fun marshaller(): ResponseFieldMarshaller
          }

          data class WookieFriend(
            override val __typename: String,
            override val name: String,
            override val lifeExpectancy: Double?
          ) : Being.Friend, Being.Friend.Wookie, Friend, Wookie {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestOperation_ResponseAdapter.Data.Random.BeingWookieRandom.Friend.WookieFriend.toResponse(writer, this)
              }
            }
          }

          data class OtherFriend(
            override val __typename: String,
            override val name: String,
            override val lifeExpectancy: Double?
          ) : Being.Friend, Friend, Random.Wookie.Friend {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestOperation_ResponseAdapter.Data.Random.BeingWookieRandom.Friend.OtherFriend.toResponse(writer, this)
              }
            }
          }

          companion object {
            fun Friend.asFriends(): Being.Friend? = this as? Being.Friend

            fun Friend.asWookie(): Wookie? = this as? Wookie
          }
        }
      }

      data class OtherRandom(
        override val __typename: String
      ) : Random {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestOperation_ResponseAdapter.Data.Random.OtherRandom.toResponse(writer, this)
          }
        }
      }

      companion object {
        fun Random.asBeing(): Being? = this as? Being

        fun Random.asWookie(): Wookie? = this as? Wookie
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "c99acd467295cdc6cf49f2f0e260f5879de276fba742d6faa161453e53fbf9d4"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestOperation {
          |  random {
          |    __typename
          |    ... on Being {
          |      __typename
          |      name
          |      friends {
          |        __typename
          |        name
          |        ... on Wookie {
          |          lifeExpectancy
          |        }
          |      }
          |      ... on Human {
          |        profilePictureUrl
          |        friends {
          |          __typename
          |          isFamous
          |          ... on Wookie {
          |            race
          |          }
          |        }
          |      }
          |    }
          |    ... on Wookie {
          |      race
          |      friends {
          |        lifeExpectancy
          |      }
          |    }
          |    ... on Being {
          |      friends {
          |        __typename
          |        ... on Wookie {
          |          lifeExpectancy
          |        }
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "TestOperation"
      }
    }
  }
}
