//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_frgament_intersection.responsefields

import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.Array

object TestOperation_ResponseFields {
  val fields: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("unused").notNull(),
        fieldName = "random",
        fieldSets = listOf(
          ResponseField.FieldSet(null, OtherRandom.fields),
          ResponseField.FieldSet("Human", BeingHumanRandom.fields),
          ResponseField.FieldSet("Wookie", BeingWookieRandom.fields),
        ),
      ),
    )


    object OtherRandom {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
      )

    }

    object BeingHumanRandom {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("unused").notNull().list().notNull(),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, OtherFriends.fields),
            ResponseField.FieldSet("Wookie", WookieFriends.fields),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("unused"),
          fieldName = "profilePictureUrl",
        ),
      )


      object OtherFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "isFamous",
          ),
        )

      }

      object WookieFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "lifeExpectancy",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "isFamous",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "race",
          ),
        )

      }
    }

    object BeingWookieRandom {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("unused").notNull().list().notNull(),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, OtherFriends.fields),
            ResponseField.FieldSet("Wookie", WookieFriends.fields),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("unused").notNull(),
          fieldName = "race",
        ),
      )


      object OtherFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "lifeExpectancy",
          ),
        )

      }

      object WookieFriends {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused").notNull(),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "lifeExpectancy",
          ),
        )

      }
    }
  }
}
