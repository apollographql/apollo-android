// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_frgament_intersection.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.booleanResponseAdapter
import com.apollographql.apollo.api.internal.doubleResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.example.inline_frgament_intersection.TestOperation
import com.example.inline_frgament_intersection.type.Race
import com.example.inline_frgament_intersection.type.Race_ResponseAdapter
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestOperation_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestOperation.Data> {
  val randomAdapter: ResponseAdapter<TestOperation.Data.Random> = Random(customScalarAdapters)

  override fun fromResponse(reader: JsonReader): TestOperation.Data {
    var random: TestOperation.Data.Random? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> random = randomAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestOperation.Data(
      random = random!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestOperation.Data) {
    writer.beginObject()
    writer.name("random")
    randomAdapter.toResponse(writer, value.random)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Anything")),
        fieldName = "random",
        fieldSets = listOf(
          ResponseField.FieldSet("Human", Random.BeingHumanRandom.RESPONSE_FIELDS),
          ResponseField.FieldSet("Wookie", Random.BeingWookieRandom.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Random.OtherRandom.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Random(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestOperation.Data.Random> {
    val BeingHumanRandomAdapter: BeingHumanRandom =
        com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingHumanRandom(customScalarAdapters)

    val BeingWookieRandomAdapter: BeingWookieRandom =
        com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingWookieRandom(customScalarAdapters)

    val OtherRandomAdapter: OtherRandom =
        com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.OtherRandom(customScalarAdapters)

    override fun fromResponse(reader: JsonReader): TestOperation.Data.Random {
      reader.beginObject()
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()

      return when(typename) {
        "Human" -> BeingHumanRandomAdapter.fromResponse(reader, typename)
        "Wookie" -> BeingWookieRandomAdapter.fromResponse(reader, typename)
        else -> OtherRandomAdapter.fromResponse(reader, typename)
      }
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random) {
      when(value) {
        is TestOperation.Data.Random.BeingHumanRandom -> BeingHumanRandomAdapter.toResponse(writer, value)
        is TestOperation.Data.Random.BeingWookieRandom -> BeingWookieRandomAdapter.toResponse(writer, value)
        is TestOperation.Data.Random.OtherRandom -> OtherRandomAdapter.toResponse(writer, value)
      }
    }

<<<<<<< HEAD
    class BeingHumanRandom(
      customScalarAdapters: CustomScalarAdapters
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      val listOfFriendsAdapter:
          ResponseAdapter<List<TestOperation.Data.Random.BeingHumanRandom.Friends>> =
          ListResponseAdapter(Friends(customScalarAdapters))
=======
    object BeingHumanRandom : ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          responseName = "friends",
          fieldName = "friends",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          responseName = "profilePictureUrl",
          fieldName = "profilePictureUrl",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )
>>>>>>> dev-3.x

      val nullableStringAdapter: ResponseAdapter<String?> =
          NullableResponseAdapter(stringResponseAdapter)

      fun fromResponse(reader: JsonReader, __typename: String?):
          TestOperation.Data.Random.BeingHumanRandom {
<<<<<<< HEAD
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestOperation.Data.Random.BeingHumanRandom.Friends>? = null
        var profilePictureUrl: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> friends = listOfFriendsAdapter.fromResponse(reader)
            3 -> profilePictureUrl = nullableStringAdapter.fromResponse(reader)
            else -> break
=======
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var friends: List<TestOperation.Data.Random.BeingHumanRandom.Friends>? = null
          var profilePictureUrl: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> friends = readList<TestOperation.Data.Random.BeingHumanRandom.Friends>(RESPONSE_FIELDS[2]) { reader ->
                reader.readObject<TestOperation.Data.Random.BeingHumanRandom.Friends> { reader ->
                  Friends.fromResponse(reader)
                }
              }?.map { it!! }
              3 -> profilePictureUrl = readString(RESPONSE_FIELDS[3])
              else -> break
            }
>>>>>>> dev-3.x
          }
        }
        return TestOperation.Data.Random.BeingHumanRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          profilePictureUrl = profilePictureUrl
        )
      }

<<<<<<< HEAD
      fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random.BeingHumanRandom) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        listOfFriendsAdapter.toResponse(writer, value.friends)
        writer.name("profilePictureUrl")
        nullableStringAdapter.toResponse(writer, value.profilePictureUrl)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
            ),
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "profilePictureUrl",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom.Friends> {
        val WookieFriendsAdapter: WookieFriends =
            com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingHumanRandom.Friends.WookieFriends(customScalarAdapters)

        val OtherFriendsAdapter: OtherFriends =
            com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingHumanRandom.Friends.OtherFriends(customScalarAdapters)

        override fun fromResponse(reader: JsonReader):
            TestOperation.Data.Random.BeingHumanRandom.Friends {
          reader.beginObject()
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()

          return when(typename) {
            "Wookie" -> WookieFriendsAdapter.fromResponse(reader, typename)
            else -> OtherFriendsAdapter.fromResponse(reader, typename)
=======
      override fun toResponse(writer: ResponseWriter,
          value: TestOperation.Data.Random.BeingHumanRandom) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeList(RESPONSE_FIELDS[2], value.friends) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Friends.toResponse(writer, value)
          }
        }
        writer.writeString(RESPONSE_FIELDS[3], value.profilePictureUrl)
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom.Friends> {
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestOperation.Data.Random.BeingHumanRandom.Friends {
          val typename = __typename ?: reader.readString(ResponseField.Typename)
          return when(typename) {
            "Wookie" -> WookieFriends.fromResponse(reader, typename)
            else -> OtherFriends.fromResponse(reader, typename)
>>>>>>> dev-3.x
          }
          .also { reader.endObject() }
        }

<<<<<<< HEAD
        override fun toResponse(writer: JsonWriter,
            value: TestOperation.Data.Random.BeingHumanRandom.Friends) {
          when(value) {
            is TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends -> WookieFriendsAdapter.toResponse(writer, value)
            is TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends -> OtherFriendsAdapter.toResponse(writer, value)
          }
        }

        class WookieFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableBooleanAdapter: ResponseAdapter<Boolean?> =
              NullableResponseAdapter(booleanResponseAdapter)

          val nullableFloatAdapter: ResponseAdapter<Double?> =
              NullableResponseAdapter(doubleResponseAdapter)

          val raceAdapter: ResponseAdapter<Race> = Race_ResponseAdapter

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends {
            var __typename: String? = __typename
            var name: String? = null
            var isFamous: Boolean? = null
            var lifeExpectancy: Double? = null
            var race: Race? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> isFamous = nullableBooleanAdapter.fromResponse(reader)
                3 -> lifeExpectancy = nullableFloatAdapter.fromResponse(reader)
                4 -> race = raceAdapter.fromResponse(reader)
                else -> break
              }
=======
        override fun toResponse(writer: ResponseWriter,
            value: TestOperation.Data.Random.BeingHumanRandom.Friends) {
          when(value) {
            is TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends -> WookieFriends.toResponse(writer, value)
            is TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends -> OtherFriends.toResponse(writer, value)
          }
        }

        object WookieFriends :
            ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Boolean"),
              responseName = "isFamous",
              fieldName = "isFamous",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              responseName = "lifeExpectancy",
              fieldName = "lifeExpectancy",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
              responseName = "race",
              fieldName = "race",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var isFamous: Boolean? = null
              var lifeExpectancy: Double? = null
              var race: Race? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> isFamous = readBoolean(RESPONSE_FIELDS[2])
                  3 -> lifeExpectancy = readDouble(RESPONSE_FIELDS[3])
                  4 -> race = readString(RESPONSE_FIELDS[4])?.let { Race.safeValueOf(it) }
                  else -> break
                }
              }
              TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends(
                __typename = __typename!!,
                name = name!!,
                isFamous = isFamous,
                lifeExpectancy = lifeExpectancy,
                race = race!!
              )
>>>>>>> dev-3.x
            }
            return TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends(
              __typename = __typename!!,
              name = name!!,
              isFamous = isFamous,
              lifeExpectancy = lifeExpectancy,
              race = race!!
            )
          }

<<<<<<< HEAD
          fun toResponse(writer: JsonWriter,
              value: TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("isFamous")
            nullableBooleanAdapter.toResponse(writer, value.isFamous)
            writer.name("lifeExpectancy")
            nullableFloatAdapter.toResponse(writer, value.lifeExpectancy)
            writer.name("race")
            raceAdapter.toResponse(writer, value.race)
            writer.endObject()
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeBoolean(RESPONSE_FIELDS[2], value.isFamous)
            writer.writeDouble(RESPONSE_FIELDS[3], value.lifeExpectancy)
            writer.writeString(RESPONSE_FIELDS[4], value.race.rawValue)
>>>>>>> dev-3.x
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Boolean"),
                fieldName = "isFamous",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Float"),
                fieldName = "lifeExpectancy",
              ),
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
                fieldName = "race",
              )
=======
        object OtherFriends :
            ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Boolean"),
              responseName = "isFamous",
              fieldName = "isFamous",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
>>>>>>> dev-3.x
            )

<<<<<<< HEAD
            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }

        class OtherFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableBooleanAdapter: ResponseAdapter<Boolean?> =
              NullableResponseAdapter(booleanResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends {
            var __typename: String? = __typename
            var name: String? = null
            var isFamous: Boolean? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> isFamous = nullableBooleanAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var isFamous: Boolean? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> isFamous = readBoolean(RESPONSE_FIELDS[2])
                  else -> break
                }
              }
              TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends(
                __typename = __typename!!,
                name = name!!,
                isFamous = isFamous
              )
>>>>>>> dev-3.x
            }
            return TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends(
              __typename = __typename!!,
              name = name!!,
              isFamous = isFamous
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("isFamous")
            nullableBooleanAdapter.toResponse(writer, value.isFamous)
            writer.endObject()
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Boolean"),
                fieldName = "isFamous",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeBoolean(RESPONSE_FIELDS[2], value.isFamous)
>>>>>>> dev-3.x
          }
        }
      }
    }

<<<<<<< HEAD
    class BeingWookieRandom(
      customScalarAdapters: CustomScalarAdapters
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter
=======
    object BeingWookieRandom : ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          responseName = "friends",
          fieldName = "friends",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
          responseName = "race",
          fieldName = "race",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )
>>>>>>> dev-3.x

      val listOfFriendsAdapter:
          ResponseAdapter<List<TestOperation.Data.Random.BeingWookieRandom.Friends>> =
          ListResponseAdapter(Friends(customScalarAdapters))

      val raceAdapter: ResponseAdapter<Race> = Race_ResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?):
          TestOperation.Data.Random.BeingWookieRandom {
<<<<<<< HEAD
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestOperation.Data.Random.BeingWookieRandom.Friends>? = null
        var race: Race? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> friends = listOfFriendsAdapter.fromResponse(reader)
            3 -> race = raceAdapter.fromResponse(reader)
            else -> break
=======
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var friends: List<TestOperation.Data.Random.BeingWookieRandom.Friends>? = null
          var race: Race? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> friends = readList<TestOperation.Data.Random.BeingWookieRandom.Friends>(RESPONSE_FIELDS[2]) { reader ->
                reader.readObject<TestOperation.Data.Random.BeingWookieRandom.Friends> { reader ->
                  Friends.fromResponse(reader)
                }
              }?.map { it!! }
              3 -> race = readString(RESPONSE_FIELDS[3])?.let { Race.safeValueOf(it) }
              else -> break
            }
>>>>>>> dev-3.x
          }
        }
        return TestOperation.Data.Random.BeingWookieRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          race = race!!
        )
      }

<<<<<<< HEAD
      fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random.BeingWookieRandom) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        listOfFriendsAdapter.toResponse(writer, value.friends)
        writer.name("race")
        raceAdapter.toResponse(writer, value.race)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
            ),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
            fieldName = "race",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom.Friends> {
        val WookieFriendsAdapter: WookieFriends =
            com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingWookieRandom.Friends.WookieFriends(customScalarAdapters)

        val OtherFriendsAdapter: OtherFriends =
            com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.BeingWookieRandom.Friends.OtherFriends(customScalarAdapters)

        override fun fromResponse(reader: JsonReader):
            TestOperation.Data.Random.BeingWookieRandom.Friends {
          reader.beginObject()
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()

          return when(typename) {
            "Wookie" -> WookieFriendsAdapter.fromResponse(reader, typename)
            else -> OtherFriendsAdapter.fromResponse(reader, typename)
=======
      override fun toResponse(writer: ResponseWriter,
          value: TestOperation.Data.Random.BeingWookieRandom) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeList(RESPONSE_FIELDS[2], value.friends) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Friends.toResponse(writer, value)
          }
        }
        writer.writeString(RESPONSE_FIELDS[3], value.race.rawValue)
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom.Friends> {
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestOperation.Data.Random.BeingWookieRandom.Friends {
          val typename = __typename ?: reader.readString(ResponseField.Typename)
          return when(typename) {
            "Wookie" -> WookieFriends.fromResponse(reader, typename)
            else -> OtherFriends.fromResponse(reader, typename)
>>>>>>> dev-3.x
          }
          .also { reader.endObject() }
        }

<<<<<<< HEAD
        override fun toResponse(writer: JsonWriter,
            value: TestOperation.Data.Random.BeingWookieRandom.Friends) {
          when(value) {
            is TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends -> WookieFriendsAdapter.toResponse(writer, value)
            is TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends -> OtherFriendsAdapter.toResponse(writer, value)
          }
        }

        class WookieFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableFloatAdapter: ResponseAdapter<Double?> =
              NullableResponseAdapter(doubleResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends {
            var __typename: String? = __typename
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> lifeExpectancy = nullableFloatAdapter.fromResponse(reader)
                else -> break
              }
=======
        override fun toResponse(writer: ResponseWriter,
            value: TestOperation.Data.Random.BeingWookieRandom.Friends) {
          when(value) {
            is TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends -> WookieFriends.toResponse(writer, value)
            is TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends -> OtherFriends.toResponse(writer, value)
          }
        }

        object WookieFriends :
            ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              responseName = "lifeExpectancy",
              fieldName = "lifeExpectancy",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var lifeExpectancy: Double? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> lifeExpectancy = readDouble(RESPONSE_FIELDS[2])
                  else -> break
                }
              }
              TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends(
                __typename = __typename!!,
                name = name!!,
                lifeExpectancy = lifeExpectancy
              )
>>>>>>> dev-3.x
            }
            return TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

<<<<<<< HEAD
          fun toResponse(writer: JsonWriter,
              value: TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("lifeExpectancy")
            nullableFloatAdapter.toResponse(writer, value.lifeExpectancy)
            writer.endObject()
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeDouble(RESPONSE_FIELDS[2], value.lifeExpectancy)
>>>>>>> dev-3.x
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Float"),
                fieldName = "lifeExpectancy",
              )
=======
        object OtherFriends :
            ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              responseName = "lifeExpectancy",
              fieldName = "lifeExpectancy",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
>>>>>>> dev-3.x
            )

<<<<<<< HEAD
            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }

        class OtherFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableFloatAdapter: ResponseAdapter<Double?> =
              NullableResponseAdapter(doubleResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends {
            var __typename: String? = __typename
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> lifeExpectancy = nullableFloatAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var lifeExpectancy: Double? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> lifeExpectancy = readDouble(RESPONSE_FIELDS[2])
                  else -> break
                }
              }
              TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends(
                __typename = __typename!!,
                name = name!!,
                lifeExpectancy = lifeExpectancy
              )
>>>>>>> dev-3.x
            }
            return TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("lifeExpectancy")
            nullableFloatAdapter.toResponse(writer, value.lifeExpectancy)
            writer.endObject()
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Float"),
                fieldName = "lifeExpectancy",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeDouble(RESPONSE_FIELDS[2], value.lifeExpectancy)
>>>>>>> dev-3.x
          }
        }
      }
    }

    class OtherRandom(
      customScalarAdapters: CustomScalarAdapters
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?):
          TestOperation.Data.Random.OtherRandom {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestOperation.Data.Random.OtherRandom(
          __typename = __typename!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random.OtherRandom) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
