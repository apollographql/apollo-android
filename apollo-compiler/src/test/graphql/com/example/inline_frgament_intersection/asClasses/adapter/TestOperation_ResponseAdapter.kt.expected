//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_frgament_intersection.adapter

import com.apollographql.apollo3.api.NullableBooleanResponseAdapter
import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.inline_frgament_intersection.TestOperation
import com.example.inline_frgament_intersection.type.Race
import com.example.inline_frgament_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestOperation_ResponseAdapter {
  object Data : ResponseAdapter<TestOperation.Data> {
    val RESPONSE_NAMES: List<String> = listOf("random")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestOperation.Data {
      var random: TestOperation.Data.Random? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> random = Random.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestOperation.Data(
        random = random!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestOperation.Data
    ) {
      writer.name("random")
      Random.toResponse(writer, responseAdapterCache, value.random)
    }

    object Random : ResponseAdapter<TestOperation.Data.Random> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "asBeing", "asWookie")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestOperation.Data.Random {
        var __typename: String? = null
        var asBeing: TestOperation.Data.Random.AsBeing? = null
        var asWookie: TestOperation.Data.Random.AsWookie? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> asBeing = AsBeing.nullable().fromResponse(reader, responseAdapterCache)
            2 -> asWookie = AsWookie.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random(
          __typename = __typename!!,
          asBeing = asBeing,
          asWookie = asWookie
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("asBeing")
        AsBeing.nullable().toResponse(writer, responseAdapterCache, value.asBeing)
        writer.name("asWookie")
        AsWookie.nullable().toResponse(writer, responseAdapterCache, value.asWookie)
      }

      object AsBeing : ResponseAdapter<TestOperation.Data.Random.AsBeing> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends", "asHuman")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.AsBeing {
          var __typename: String? = null
          var name: String? = null
          var friends: List<TestOperation.Data.Random.AsBeing.Friends>? = null
          var asHuman: TestOperation.Data.Random.AsBeing.AsHuman? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> friends = Friends.list().fromResponse(reader, responseAdapterCache)
              3 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.Random.AsBeing(
            __typename = __typename!!,
            name = name!!,
            friends = friends!!,
            asHuman = asHuman
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.AsBeing
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("friends")
          Friends.list().toResponse(writer, responseAdapterCache, value.friends)
          writer.name("asHuman")
          AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
        }

        object Friends : ResponseAdapter<TestOperation.Data.Random.AsBeing.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asWookie")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestOperation.Data.Random.AsBeing.Friends {
            var __typename: String? = null
            var name: String? = null
            var asWookie: TestOperation.Data.Random.AsBeing.Friends.AsWookie? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> asWookie = AsWookie.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.AsBeing.Friends(
              __typename = __typename!!,
              name = name!!,
              asWookie = asWookie
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.AsBeing.Friends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("asWookie")
            AsWookie.nullable().toResponse(writer, responseAdapterCache, value.asWookie)
          }

          object AsWookie : ResponseAdapter<TestOperation.Data.Random.AsBeing.Friends.AsWookie> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestOperation.Data.Random.AsBeing.Friends.AsWookie {
              var __typename: String? = null
              var name: String? = null
              var lifeExpectancy: Double? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return TestOperation.Data.Random.AsBeing.Friends.AsWookie(
                __typename = __typename!!,
                name = name!!,
                lifeExpectancy = lifeExpectancy
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestOperation.Data.Random.AsBeing.Friends.AsWookie
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.name("lifeExpectancy")
              NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                  value.lifeExpectancy)
            }
          }
        }

        object AsHuman : ResponseAdapter<TestOperation.Data.Random.AsBeing.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends",
              "profilePictureUrl")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestOperation.Data.Random.AsBeing.AsHuman {
            var __typename: String? = null
            var name: String? = null
            var friends: List<TestOperation.Data.Random.AsBeing.AsHuman.Friends>? = null
            var profilePictureUrl: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> friends = Friends.list().fromResponse(reader, responseAdapterCache)
                3 -> profilePictureUrl = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.AsBeing.AsHuman(
              __typename = __typename!!,
              name = name!!,
              friends = friends!!,
              profilePictureUrl = profilePictureUrl
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.AsBeing.AsHuman
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("friends")
            Friends.list().toResponse(writer, responseAdapterCache, value.friends)
            writer.name("profilePictureUrl")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                value.profilePictureUrl)
          }

          object Friends : ResponseAdapter<TestOperation.Data.Random.AsBeing.AsHuman.Friends> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous", "asWookie")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestOperation.Data.Random.AsBeing.AsHuman.Friends {
              var __typename: String? = null
              var name: String? = null
              var isFamous: Boolean? = null
              var asWookie: TestOperation.Data.Random.AsBeing.AsHuman.Friends.AsWookie? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  3 -> asWookie = AsWookie.nullable().fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return TestOperation.Data.Random.AsBeing.AsHuman.Friends(
                __typename = __typename!!,
                name = name!!,
                isFamous = isFamous,
                asWookie = asWookie
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestOperation.Data.Random.AsBeing.AsHuman.Friends
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.name("isFamous")
              NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache,
                  value.isFamous)
              writer.name("asWookie")
              AsWookie.nullable().toResponse(writer, responseAdapterCache, value.asWookie)
            }

            object AsWookie :
                ResponseAdapter<TestOperation.Data.Random.AsBeing.AsHuman.Friends.AsWookie> {
              val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous",
                  "lifeExpectancy", "race")

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  TestOperation.Data.Random.AsBeing.AsHuman.Friends.AsWookie {
                var __typename: String? = null
                var name: String? = null
                var isFamous: Boolean? = null
                var lifeExpectancy: Double? = null
                var race: Race? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                    2 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    3 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    4 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
                    else -> break
                  }
                }
                return TestOperation.Data.Random.AsBeing.AsHuman.Friends.AsWookie(
                  __typename = __typename!!,
                  name = name!!,
                  isFamous = isFamous,
                  lifeExpectancy = lifeExpectancy,
                  race = race!!
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestOperation.Data.Random.AsBeing.AsHuman.Friends.AsWookie
              ) {
                writer.name("__typename")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                writer.name("name")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
                writer.name("isFamous")
                NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache,
                    value.isFamous)
                writer.name("lifeExpectancy")
                NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                    value.lifeExpectancy)
                writer.name("race")
                Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
              }
            }
          }
        }
      }

      object AsWookie : ResponseAdapter<TestOperation.Data.Random.AsWookie> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "race", "friends")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.AsWookie {
          var __typename: String? = null
          var race: Race? = null
          var friends: List<TestOperation.Data.Random.AsWookie.Friends>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> friends = Friends.list().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.Random.AsWookie(
            __typename = __typename!!,
            race = race!!,
            friends = friends!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.AsWookie
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("race")
          Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
          writer.name("friends")
          Friends.list().toResponse(writer, responseAdapterCache, value.friends)
        }

        object Friends : ResponseAdapter<TestOperation.Data.Random.AsWookie.Friends> {
          val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestOperation.Data.Random.AsWookie.Friends {
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.AsWookie.Friends(
              lifeExpectancy = lifeExpectancy
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.AsWookie.Friends
          ) {
            writer.name("lifeExpectancy")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                value.lifeExpectancy)
          }
        }
      }
    }
  }
}
