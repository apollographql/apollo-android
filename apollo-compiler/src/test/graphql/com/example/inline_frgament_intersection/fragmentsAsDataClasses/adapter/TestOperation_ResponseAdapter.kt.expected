// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_frgament_intersection.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.inline_frgament_intersection.TestOperation
import com.example.inline_frgament_intersection.type.Race
import com.example.inline_frgament_intersection.type.Race_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestOperation_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestOperation.Data> {
  private val randomAdapter: ResponseAdapter<TestOperation.Data.Random> =
      Random(responseAdapterCache)

  override fun fromResponse(reader: JsonReader): TestOperation.Data {
    var random: TestOperation.Data.Random? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> random = randomAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestOperation.Data(
      random = random!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestOperation.Data) {
    writer.beginObject()
    writer.name("random")
    randomAdapter.toResponse(writer, value.random)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Anything")),
        fieldName = "random",
        fieldSets = listOf(
          ResponseField.FieldSet("Human", Random.AsBeing.RESPONSE_FIELDS),
          ResponseField.FieldSet("Wookie", Random.AsBeing.RESPONSE_FIELDS),
          ResponseField.FieldSet("Wookie", Random.AsWookie.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Random(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestOperation.Data.Random> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val AsBeingAdapter: AsBeing =
        com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.AsBeing(responseAdapterCache)

    private val AsWookieAdapter: AsWookie =
        com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.AsWookie(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): TestOperation.Data.Random {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var asAsBeing: TestOperation.Data.Random.AsBeing? = null
      var asAsWookie: TestOperation.Data.Random.AsWookie? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Human", "Wookie")) {
        reader.rewind()
        asAsBeing = AsBeingAdapter.fromResponse(reader, __typename)
      }
      if (__typename in arrayOf("Wookie")) {
        reader.rewind()
        asAsWookie = AsWookieAdapter.fromResponse(reader, __typename)
      }

      return TestOperation.Data.Random(
        __typename = __typename!!,
        asAsBeing = asAsBeing,
        asAsWookie = asAsWookie
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.asAsBeing != null) AsBeingAdapter.toResponse(writer, value.asAsBeing)
      if (value.asAsWookie != null) AsWookieAdapter.toResponse(writer, value.asAsWookie)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class AsBeing(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val listOfFriendsAdapter:
          ResponseAdapter<List<TestOperation.Data.Random.AsBeing.Friends>> =
          ListResponseAdapter(Friends(responseAdapterCache))

      fun fromResponse(reader: JsonReader, __typename: String?): TestOperation.Data.Random.AsBeing {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestOperation.Data.Random.AsBeing.Friends>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> friends = listOfFriendsAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestOperation.Data.Random.AsBeing(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random.AsBeing) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        listOfFriendsAdapter.toResponse(writer, value.friends)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Wookie", Friends.AsWookie.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<TestOperation.Data.Random.AsBeing.Friends> {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val AsWookieAdapter: AsWookie =
            com.example.inline_frgament_intersection.adapter.TestOperation_ResponseAdapter.Random.AsBeing.Friends.AsWookie(responseAdapterCache)

        override fun fromResponse(reader: JsonReader): TestOperation.Data.Random.AsBeing.Friends {
          val reader = reader.buffer()
          reader.beginObject()

          var __typename: String? = null
          var name: String? = null
          var asAsWookie: TestOperation.Data.Random.AsBeing.Friends.AsWookie? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = stringAdapter.fromResponse(reader)
              1 -> name = stringAdapter.fromResponse(reader)
              else -> break
            }
          }
          if (__typename in arrayOf("Wookie")) {
            reader.rewind()
            asAsWookie = AsWookieAdapter.fromResponse(reader, __typename)
          }

          return TestOperation.Data.Random.AsBeing.Friends(
            __typename = __typename!!,
            name = name!!,
            asAsWookie = asAsWookie
          )
          .also { reader.endObject() }
        }

        override fun toResponse(writer: JsonWriter,
            value: TestOperation.Data.Random.AsBeing.Friends) {
          writer.beginObject()
          writer.name("__typename")
          stringAdapter.toResponse(writer, value.__typename)

          writer.name("name")
          stringAdapter.toResponse(writer, value.name)
          if (value.asAsWookie != null) AsWookieAdapter.toResponse(writer, value.asAsWookie)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class AsWookie(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          private val nullableFloatAdapter: ResponseAdapter<Double?> =
              NullableResponseAdapter(DoubleResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestOperation.Data.Random.AsBeing.Friends.AsWookie {
            var __typename: String? = __typename
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> lifeExpectancy = nullableFloatAdapter.fromResponse(reader)
                else -> break
              }
            }
            return TestOperation.Data.Random.AsBeing.Friends.AsWookie(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestOperation.Data.Random.AsBeing.Friends.AsWookie) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("lifeExpectancy")
            nullableFloatAdapter.toResponse(writer, value.lifeExpectancy)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Float"),
                fieldName = "lifeExpectancy",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }

    class AsWookie(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val raceAdapter: ResponseAdapter<Race> = Race_ResponseAdapter

      private val listOfFriendsAdapter:
          ResponseAdapter<List<TestOperation.Data.Random.AsWookie.Friends>> =
          ListResponseAdapter(Friends(responseAdapterCache))

      fun fromResponse(reader: JsonReader, __typename: String?):
          TestOperation.Data.Random.AsWookie {
        var __typename: String? = __typename
        var race: Race? = null
        var friends: List<TestOperation.Data.Random.AsWookie.Friends>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> race = raceAdapter.fromResponse(reader)
            2 -> friends = listOfFriendsAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestOperation.Data.Random.AsWookie(
          __typename = __typename!!,
          race = race!!,
          friends = friends!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestOperation.Data.Random.AsWookie) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("race")
        raceAdapter.toResponse(writer, value.race)
        writer.name("friends")
        listOfFriendsAdapter.toResponse(writer, value.friends)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
            fieldName = "race",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<TestOperation.Data.Random.AsWookie.Friends> {
        private val nullableFloatAdapter: ResponseAdapter<Double?> =
            NullableResponseAdapter(DoubleResponseAdapter)

        override fun fromResponse(reader: JsonReader): TestOperation.Data.Random.AsWookie.Friends {
          var lifeExpectancy: Double? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> lifeExpectancy = nullableFloatAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return TestOperation.Data.Random.AsWookie.Friends(
            lifeExpectancy = lifeExpectancy
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: TestOperation.Data.Random.AsWookie.Friends) {
          writer.beginObject()
          writer.name("lifeExpectancy")
          nullableFloatAdapter.toResponse(writer, value.lifeExpectancy)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "lifeExpectancy",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }
      }
    }
  }
}
