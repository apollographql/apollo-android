// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.fragment.adapter

import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.root_query_fragment_with_nested_fragments.fragment.DroidFragment
import com.example.root_query_fragment_with_nested_fragments.fragment.HeroFragment
import com.example.root_query_fragment_with_nested_fragments.fragment.QueryFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class QueryFragment_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<QueryFragment.Data> {
  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

  private val nullableHeroAdapter: ResponseAdapter<QueryFragment.Data.Hero?> =
      NullableResponseAdapter(Hero(responseAdapterCache))

  private val nullableDroidAdapter: ResponseAdapter<QueryFragment.Data.Droid?> =
      NullableResponseAdapter(Droid(responseAdapterCache))

  private val nullableHumanAdapter: ResponseAdapter<QueryFragment.Data.Human?> =
      NullableResponseAdapter(Human(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): QueryFragment.Data {
    var __typename: String? = null
    var hero: QueryFragment.Data.Hero? = null
    var droid: QueryFragment.Data.Droid? = null
    var human: QueryFragment.Data.Human? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        1 -> hero = nullableHeroAdapter.fromResponse(reader)
        2 -> droid = nullableDroidAdapter.fromResponse(reader)
        3 -> human = nullableHumanAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return QueryFragment.Data(
      __typename = __typename!!,
      hero = hero,
      droid = droid,
      human = human
    )
  }

  override fun toResponse(writer: JsonWriter, value: QueryFragment.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    writer.name("hero")
    nullableHeroAdapter.toResponse(writer, value.hero)
    writer.name("droid")
    nullableDroidAdapter.toResponse(writer, value.droid)
    writer.name("human")
    nullableHumanAdapter.toResponse(writer, value.human)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", HeroFragment_ResponseAdapter.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", HeroFragment_ResponseAdapter.RESPONSE_FIELDS),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Droid"),
        fieldName = "droid",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", DroidFragment_ResponseAdapter.RESPONSE_FIELDS),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Human"),
        fieldName = "human",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        fieldSets = listOf(
          ResponseField.FieldSet("Human", Human.AsHuman.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Hero(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<QueryFragment.Data.Hero> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val HeroFragmentAdapter: HeroFragment_ResponseAdapter =
        com.example.root_query_fragment_with_nested_fragments.fragment.adapter.HeroFragment_ResponseAdapter(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): QueryFragment.Data.Hero {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var heroFragment: HeroFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        reader.rewind()
        heroFragment = HeroFragmentAdapter.fromResponse(reader)
      }

      return QueryFragment.Data.Hero(
        __typename = __typename!!,
        heroFragment = heroFragment
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Hero) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.heroFragment != null) HeroFragmentAdapter.toResponse(writer, value.heroFragment)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }

  class Droid(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<QueryFragment.Data.Droid> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val DroidFragmentAdapter: DroidFragment_ResponseAdapter =
        com.example.root_query_fragment_with_nested_fragments.fragment.adapter.DroidFragment_ResponseAdapter(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): QueryFragment.Data.Droid {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var droidFragment: DroidFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid")) {
        reader.rewind()
        droidFragment = DroidFragmentAdapter.fromResponse(reader)
      }

      return QueryFragment.Data.Droid(
        __typename = __typename!!,
        droidFragment = droidFragment
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Droid) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.droidFragment != null) DroidFragmentAdapter.toResponse(writer, value.droidFragment)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }

  class Human(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<QueryFragment.Data.Human> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val AsHumanAdapter: AsHuman =
        com.example.root_query_fragment_with_nested_fragments.fragment.adapter.QueryFragment_ResponseAdapter.Human.AsHuman(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): QueryFragment.Data.Human {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var asAsHuman: QueryFragment.Data.Human.AsHuman? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        reader.rewind()
        asAsHuman = AsHumanAdapter.fromResponse(reader, __typename)
      }

      return QueryFragment.Data.Human(
        __typename = __typename!!,
        asAsHuman = asAsHuman
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Human) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.asAsHuman != null) AsHumanAdapter.toResponse(writer, value.asAsHuman)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class AsHuman(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val nullableStringAdapter: ResponseAdapter<String?> =
          NullableResponseAdapter(StringResponseAdapter)

      fun fromResponse(reader: JsonReader, __typename: String?): QueryFragment.Data.Human.AsHuman {
        var __typename: String? = __typename
        var name: String? = null
        var homePlanet: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> homePlanet = nullableStringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return QueryFragment.Data.Human.AsHuman(
          __typename = __typename!!,
          name = name!!,
          homePlanet = homePlanet
        )
      }

      fun toResponse(writer: JsonWriter, value: QueryFragment.Data.Human.AsHuman) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("homePlanet")
        nullableStringAdapter.toResponse(writer, value.homePlanet)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "homePlanet",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
