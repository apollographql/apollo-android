//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typename_always_first.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.typename_always_first.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero", "__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Hero? = null
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero,
        __typename = __typename!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)

      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
    }

    object Hero : Adapter<TestQuery.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Hero {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asHuman: TestQuery.AsHuman? = null
        if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
          asHuman = com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.AsHuman.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var asDroid: TestQuery.AsDroid? = null
        if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
          asDroid = com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.AsDroid.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Hero(
          __typename = __typename,
          asHuman = asHuman,
          asDroid = asDroid
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Hero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.asHuman != null) {
          com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.AsHuman.toJson(writer,
              customScalarAdapters, value.asHuman)
        }

        if (value.asDroid != null) {
          com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.AsDroid.toJson(writer,
              customScalarAdapters, value.asDroid)
        }
      }

      object AsHuman : Adapter<TestQuery.AsHuman> {
        val RESPONSE_NAMES: List<String> = listOf("height", "__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsHuman {
          var height: Double? = null
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsHuman(
            height = height,
            __typename = __typename!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsHuman
        ) {
          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }
      }

      object AsDroid : Adapter<TestQuery.AsDroid> {
        val RESPONSE_NAMES: List<String> = listOf("name", "__typename", "primaryFunction")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsDroid {
          var name: String? = null
          var __typename: String? = null
          var primaryFunction: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsDroid(
            name = name!!,
            __typename = __typename!!,
            primaryFunction = primaryFunction
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsDroid
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
        }
      }
    }
  }
}
