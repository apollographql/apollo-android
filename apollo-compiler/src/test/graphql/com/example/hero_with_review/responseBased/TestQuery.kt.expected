//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.hero_with_review

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Mutation
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.hero_with_review.adapter.TestQuery_ResponseAdapter
import com.example.hero_with_review.adapter.TestQuery_VariablesAdapter
import com.example.hero_with_review.selections.TestQuerySelections
import com.example.hero_with_review.type.Episode
import kotlin.Int
import kotlin.String
import kotlin.collections.List

data class TestQuery(
  val ep: Episode
) : Mutation<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    TestQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun selections(): List<CompiledSelection> = TestQuerySelections

  data class Data(
    val createReview: CreateReview?
  ) : Mutation.Data {
    data class CreateReview(
      /**
       * The number of stars this review gave, 1-5
       */
      val stars: Int,
      /**
       * Comment about the movie
       */
      val commentary: String?
    )
  }

  companion object {
    const val OPERATION_ID: String =
        "1faa220c7551ff1343a9bce722af8c12b87c70cc579f743aff1374ae1066f163"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * mutation TestQuery($ep: Episode!) {
     *   createReview(episode: $ep, review: {
     *     stars: 5
     *     listOfEnums: \[JEDI,EMPIRE,NEWHOPE\]
     *     listOfStringNonOptional: \["1","2","3"\]
     *     favoriteColor: {
     *       red: 1
     *       blue: 1
     *     }
     *
     *   }
     *   ) {
     *     stars
     *     commentary
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "mutation TestQuery(${'$'}ep: Episode!) { createReview(episode: ${'$'}ep, review: { stars: 5 listOfEnums: [JEDI,EMPIRE,NEWHOPE] listOfStringNonOptional: [\"1\",\"2\",\"3\"] favoriteColor: { red: 1 blue: 1 }  } ) { stars commentary } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
