//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.union_fragment.adapter.TestQuery_ResponseAdapter
import com.example.union_fragment.fragment.Starship
import com.example.union_fragment.responsefields.TestQuery_ResponseFields
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun fieldSets(): List<FieldSet> = TestQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val search: List<Search?>?
  ) : Query.Data {
    fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    data class Search(
      val __typename: String,
      /**
       * Synthetic field for inline fragment on Starship
       */
      val onStarship: OnStarship?,
      /**
       * Synthetic field for fragment spread on Starship
       */
      val starship: Starship?
    ) {
      data class OnStarship(
        /**
         * The ID of the starship
         */
        val id: String
      )
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "c40492101a02b85eda640e3ad031aeaf3625b5b99a571e9468a9b2fedaa1f0f8"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   search(text: "test") {
     *     __typename
     *     ... on Starship {
     *       id
     *     }
     *     ...Starship
     *   }
     * }
     *
     * fragment Starship on Starship {
     *   __typename
     *   name
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery { search(text: \"test\") { __typename ... on Starship { id } ...Starship } }  fragment Starship on Starship { __typename name }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
