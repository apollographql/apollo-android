//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.union_fragment.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.union_fragment.TestQuery
import com.example.union_fragment.fragment.Starship
import com.example.union_fragment.fragment.adapter.StarshipImpl_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        search = search
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("search")
      Search.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    }

    object Search : ResponseAdapter<TestQuery.Data.Search> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "asStarship", "starship")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Search {
        var __typename: String? = null
        var asStarship: TestQuery.Data.Search.AsStarship? = null
        var starship: Starship? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> asStarship = AsStarship.nullable().fromResponse(reader, responseAdapterCache)
            2 -> starship = StarshipImpl_ResponseAdapter.Starship.nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search(
          __typename = __typename!!,
          asStarship = asStarship,
          starship = starship
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("asStarship")
        AsStarship.nullable().toResponse(writer, responseAdapterCache, value.asStarship)
        writer.name("starship")
        StarshipImpl_ResponseAdapter.Starship.nullable().toResponse(writer, responseAdapterCache,
            value.starship)
      }

      object AsStarship : ResponseAdapter<TestQuery.Data.Search.AsStarship> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "starship")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.AsStarship {
          var __typename: String? = null
          var id: String? = null
          var starship: Starship? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> starship = StarshipImpl_ResponseAdapter.Starship.nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Search.AsStarship(
            __typename = __typename!!,
            id = id!!,
            starship = starship
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.AsStarship
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("id")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
          writer.name("starship")
          StarshipImpl_ResponseAdapter.Starship.nullable().toResponse(writer, responseAdapterCache,
              value.starship)
        }
      }
    }
  }
}
