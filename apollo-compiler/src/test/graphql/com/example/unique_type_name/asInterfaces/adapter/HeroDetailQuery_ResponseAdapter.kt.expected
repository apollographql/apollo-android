//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.collections.List

object HeroDetailQuery_ResponseAdapter {
  object Data : ResponseAdapter<HeroDetailQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("heroDetailQuery")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        com.example.unique_type_name.HeroDetailQuery.Data {
      var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> heroDetailQuery = HeroDetailQuery.obj().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return com.example.unique_type_name.HeroDetailQuery.Data(
        heroDetailQuery = heroDetailQuery
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: com.example.unique_type_name.HeroDetailQuery.Data
    ) {
      writer.name("heroDetailQuery")
      HeroDetailQuery.obj().nullable().toResponse(writer, responseAdapterCache,
          value.heroDetailQuery)
    }

    object HeroDetailQuery :
        ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanHeroDetailQuery.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherHeroDetailQuery.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery
      ) {
        when(value) {
          is com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery ->
              HumanHeroDetailQuery.toResponse(writer, responseAdapterCache, value)
          is com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery ->
              OtherHeroDetailQuery.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object HumanHeroDetailQuery {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends", "height")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend?>? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friend.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            3 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends,
          height = height
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friend.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }

      object Friend :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend>
          {
        val RESPONSE_NAMES: List<String> = listOf("name", "appearsIn", "friends")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend {
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                  responseAdapterCache)
              2 -> friends = Friend.obj().nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend(
            name = name!!,
            appearsIn = appearsIn!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend
        ) {
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
              value.appearsIn)
          writer.name("friends")
          Friend.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friend :
            ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend>
            {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friendsConnection")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend {
            var __typename: String? = null
            var name: String? = null
            var friendsConnection: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> friendsConnection = FriendsConnection.obj().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend(
              __typename = __typename!!,
              name = name!!,
              friendsConnection = friendsConnection!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("friendsConnection")
            FriendsConnection.obj().toResponse(writer, responseAdapterCache,
                value.friendsConnection)
          }

          object FriendsConnection :
              ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection>
              {
            val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection {
              var totalCount: Int? = null
              var edges: List<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader,
                      responseAdapterCache)
                  1 -> edges = Edge.obj().nullable().list().nullable().fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection(
                totalCount = totalCount,
                edges = edges
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection
            ) {
              writer.name("totalCount")
              NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
              writer.name("edges")
              Edge.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
                  value.edges)
            }

            object Edge :
                ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge>
                {
              val RESPONSE_NAMES: List<String> = listOf("node")

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge {
                var node: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge.Node? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
                    else -> break
                  }
                }
                return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge(
                  node = node
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge
              ) {
                writer.name("node")
                Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
              }

              object Node :
                  ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge.Node>
                  {
                val RESPONSE_NAMES: List<String> = listOf("name")

                override fun fromResponse(reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache):
                    com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge.Node {
                  var name: String? = null
                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                      else -> break
                    }
                  }
                  return com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge.Node(
                    name = name!!
                  )
                }

                override fun toResponse(
                  writer: JsonWriter,
                  responseAdapterCache: ResponseAdapterCache,
                  value: com.example.unique_type_name.HeroDetailQuery.Data.HumanHeroDetailQuery.Friend.Friend.FriendsConnection.Edge.Node
                ) {
                  writer.name("name")
                  StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
                }
              }
            }
          }
        }
      }
    }

    object OtherHeroDetailQuery {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery.Friend?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friend.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friend.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
      }

      object Friend :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery.Friend>
          {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery.Friend {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery.Friend(
            name = name!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.unique_type_name.HeroDetailQuery.Data.OtherHeroDetailQuery.Friend
        ) {
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }
  }
}
