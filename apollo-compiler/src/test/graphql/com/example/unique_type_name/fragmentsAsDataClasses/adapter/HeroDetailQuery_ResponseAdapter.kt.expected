// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.fragment.HeroDetails
import com.example.unique_type_name.fragment.adapter.HeroDetails_ResponseAdapter
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetailQuery_ResponseAdapter : ResponseAdapter<HeroDetailQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "heroDetailQuery",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", HeroDetailQuery.AsHuman.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      com.example.unique_type_name.HeroDetailQuery.Data {
    var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> heroDetailQuery = HeroDetailQuery.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    reader.endObject()
    return com.example.unique_type_name.HeroDetailQuery.Data(
      heroDetailQuery = heroDetailQuery
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: com.example.unique_type_name.HeroDetailQuery.Data
  ) {
    writer.beginObject()
    writer.name("heroDetailQuery")
    HeroDetailQuery.nullable().toResponse(writer, responseAdapterCache, value.heroDetailQuery)
    writer.endObject()
  }

  object HeroDetailQuery :
      ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
        fieldName = "friends",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
      val reader = reader.buffer()
      reader.beginObject()
      var __typename: String? = null
      var name: String? = null
      var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends?>? = null

      var asAsHuman: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        (reader as MapJsonReader).rewind()
        asAsHuman = AsHuman.fromFields(reader, responseAdapterCache)
      }

      reader.endObject()
      return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery(
        __typename = __typename!!,
        name = name!!,
        friends = friends,
        asAsHuman = asAsHuman
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)

      writer.name("friends")
      Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.friends)
      if (value.asAsHuman != null) AsHuman.toResponse(writer, responseAdapterCache, value.asAsHuman)
      writer.endObject()
    }

    object Friends :
        ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends {
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends(
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends
      ) {
        writer.beginObject()
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.endObject()
      }
    }

    object AsHuman :
        ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("Float"),
          fieldName = "height",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman {
        reader.beginObject()
        return fromFields(reader, responseAdapterCache).also { reader.endObject() }
      }

      fun fromFields(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman {
        var __typename: String? = null
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends?>? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            3 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman(
          __typename = __typename!!,
          name = name!!,
          friends = friends,
          height = height
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.friends)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        writer.endObject()
      }

      object Friends :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends>
          {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
            fieldName = "appearsIn",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Droid", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
              ResponseField.FieldSet("Human", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends {
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends?>? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                  responseAdapterCache)
              2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          reader.endObject()
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends(
            name = name!!,
            appearsIn = appearsIn!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends
        ) {
          writer.beginObject()
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
              value.appearsIn)
          writer.name("friends")
          Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
          writer.endObject()
        }

        object Friends :
            ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends>
            {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends {
            val reader = reader.buffer()
            reader.beginObject()
            var __typename: String? = null

            var heroDetails: HeroDetails.Data? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            if (__typename in arrayOf("Droid", "Human")) {
              (reader as MapJsonReader).rewind()
              heroDetails = HeroDetails_ResponseAdapter.fromFields(reader, responseAdapterCache)
            }

            reader.endObject()
            return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends(
              __typename = __typename!!,
              heroDetails = heroDetails
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            if (value.heroDetails != null)
                HeroDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.heroDetails)
            writer.endObject()
          }
        }
      }
    }
  }
}
