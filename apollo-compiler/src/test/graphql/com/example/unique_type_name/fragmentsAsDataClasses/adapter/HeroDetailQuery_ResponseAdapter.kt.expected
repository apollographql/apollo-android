// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.fragment.HeroDetails
import com.example.unique_type_name.fragment.adapter.HeroDetails_ResponseAdapter
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class HeroDetailQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<HeroDetailQuery.Data> {
  private val nullableHeroDetailQueryAdapter:
      ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery?> =
      NullableResponseAdapter(HeroDetailQuery(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): com.example.unique_type_name.HeroDetailQuery.Data {
    var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> heroDetailQuery = nullableHeroDetailQueryAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return com.example.unique_type_name.HeroDetailQuery.Data(
      heroDetailQuery = heroDetailQuery
    )
  }

  override fun toResponse(writer: JsonWriter,
      value: com.example.unique_type_name.HeroDetailQuery.Data) {
    writer.beginObject()
    writer.name("heroDetailQuery")
    nullableHeroDetailQueryAdapter.toResponse(writer, value.heroDetailQuery)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "heroDetailQuery",
        fieldSets = listOf(
          ResponseField.FieldSet("Human", HeroDetailQuery.AsHuman.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class HeroDetailQuery(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val nullableListOfNullableFriendsAdapter:
        ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends?>?>
        =
        NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

    private val AsHumanAdapter: AsHuman =
        com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.HeroDetailQuery.AsHuman(responseAdapterCache)

    override fun fromResponse(reader: JsonReader):
        com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var name: String? = null
      var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends?>? = null
      var asAsHuman: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        reader.rewind()
        asAsHuman = AsHumanAdapter.fromResponse(reader, __typename)
      }

      return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery(
        __typename = __typename!!,
        name = name!!,
        friends = friends,
        asAsHuman = asAsHuman
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)

      writer.name("name")
      stringAdapter.toResponse(writer, value.name)

      writer.name("friends")
      nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
      if (value.asAsHuman != null) AsHumanAdapter.toResponse(writer, value.asAsHuman)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Friends(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      override fun fromResponse(reader: JsonReader):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends {
        var name: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends(
          name = name!!
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friends) {
        writer.beginObject()
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }

    class AsHuman(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val nullableListOfNullableFriendsAdapter:
          ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends?>?>
          =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

      private val nullableFloatAdapter: ResponseAdapter<Double?> =
          NullableResponseAdapter(DoubleResponseAdapter)

      fun fromResponse(reader: JsonReader, __typename: String?):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends?>? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
            3 -> height = nullableFloatAdapter.fromResponse(reader)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman(
          __typename = __typename!!,
          name = name!!,
          friends = friends,
          height = height
        )
      }

      fun toResponse(writer: JsonWriter,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
        writer.name("height")
        nullableFloatAdapter.toResponse(writer, value.height)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
            ),
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("Float"),
            fieldName = "height",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        responseAdapterCache: ResponseAdapterCache
      ) :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends>
          {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val listOfNullableEpisodeAdapter: ResponseAdapter<List<Episode?>> =
            ListResponseAdapter(NullableResponseAdapter(Episode_ResponseAdapter))

        private val nullableListOfNullableFriendsAdapter:
            ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends?>?>
            =
            NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(responseAdapterCache))))

        override fun fromResponse(reader: JsonReader):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends {
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends?>? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = stringAdapter.fromResponse(reader)
              1 -> appearsIn = listOfNullableEpisodeAdapter.fromResponse(reader)
              2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends(
            name = name!!,
            appearsIn = appearsIn!!,
            friends = friends
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends) {
          writer.beginObject()
          writer.name("name")
          stringAdapter.toResponse(writer, value.name)
          writer.name("appearsIn")
          listOfNullableEpisodeAdapter.toResponse(writer, value.appearsIn)
          writer.name("friends")
          nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type =
                  ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
              fieldName = "appearsIn",
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              fieldName = "friends",
              fieldSets = listOf(
                ResponseField.FieldSet("Droid", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
                ResponseField.FieldSet("Human", HeroDetails_ResponseAdapter.RESPONSE_FIELDS),
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Friends(
          responseAdapterCache: ResponseAdapterCache
        ) :
            ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends>
            {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          private val HeroDetailsAdapter: HeroDetails_ResponseAdapter =
              com.example.unique_type_name.fragment.adapter.HeroDetails_ResponseAdapter(responseAdapterCache)

          override fun fromResponse(reader: JsonReader):
              com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends {
            val reader = reader.buffer()
            reader.beginObject()

            var __typename: String? = null
            var heroDetails: HeroDetails.Data? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            if (__typename in arrayOf("Droid", "Human")) {
              reader.rewind()
              heroDetails = HeroDetailsAdapter.fromResponse(reader)
            }

            return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends(
              __typename = __typename!!,
              heroDetails = heroDetails
            )
            .also { reader.endObject() }
          }

          override fun toResponse(writer: JsonWriter,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.AsHuman.Friends.Friends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            if (value.heroDetails != null) HeroDetailsAdapter.toResponse(writer, value.heroDetails)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }
}
