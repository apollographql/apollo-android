// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.doubleResponseAdapter
import com.apollographql.apollo.api.internal.intResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.apollographql.apollo.exception.UnexpectedNullValue
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class HeroDetailQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<HeroDetailQuery.Data> {
  val heroDetailQueryAdapter:
      ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery?> =
      NullableResponseAdapter(HeroDetailQuery(customScalarAdapters))

  override fun fromResponse(reader: JsonReader, __typename: String?):
      com.example.unique_type_name.HeroDetailQuery.Data {
    var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> heroDetailQuery = heroDetailQueryAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return com.example.unique_type_name.HeroDetailQuery.Data(
      heroDetailQuery = heroDetailQuery
    )
  }

  override fun toResponse(writer: JsonWriter,
      value: com.example.unique_type_name.HeroDetailQuery.Data) {
    heroDetailQueryAdapter.toResponse(writer, value.heroDetailQuery)
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        responseName = "heroDetailQuery",
        fieldName = "heroDetailQuery",
        arguments = emptyMap(),
        conditions = emptyList(),
        fieldSets = listOf(
          ResponseField.FieldSet("Human", HeroDetailQuery.HumanHeroDetailQuery.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, HeroDetailQuery.OtherHeroDetailQuery.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class HeroDetailQuery(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
    val humanHeroDetailQueryAdapter: HumanHeroDetailQuery =
        com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.HeroDetailQuery.HumanHeroDetailQuery(customScalarAdapters)

    val otherHeroDetailQueryAdapter: OtherHeroDetailQuery =
        com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.HeroDetailQuery.OtherHeroDetailQuery(customScalarAdapters)

    override fun fromResponse(reader: JsonReader, __typename: String?):
        com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
      reader.beginObject()
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()

      return when(typename) {
        "Human" -> humanHeroDetailQueryAdapter.fromResponse(reader, typename)
        else -> otherHeroDetailQueryAdapter.fromResponse(reader, typename)
      }
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery) {
      when(value) {
        is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery -> humanHeroDetailQueryAdapter.toResponse(writer, value)
        is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery -> otherHeroDetailQueryAdapter.toResponse(writer, value)
      }
    }

    class HumanHeroDetailQuery(
      customScalarAdapters: CustomScalarAdapters
    ) :
        ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery>
        {
      val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

      val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

      val friendsAdapter:
          ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend?>?>
          =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friend(customScalarAdapters))))

      val heightAdapter: ResponseAdapter<Double?> = NullableResponseAdapter(doubleResponseAdapter)

      override fun fromResponse(reader: JsonReader, __typename: String?):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend?>? = null
        var height: Double? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
                UnexpectedNullValue("__typename")
            1 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
            2 -> friends = friendsAdapter.fromResponse(reader)
            3 -> height = heightAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends,
          height = height
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery) {
        __typenameAdapter.toResponse(writer, value.__typename)
        nameAdapter.toResponse(writer, value.name)
        friendsAdapter.toResponse(writer, value.friends)
        heightAdapter.toResponse(writer, value.height)
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            responseName = "friends",
            fieldName = "friends",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friend.RESPONSE_FIELDS)
            ),
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("Float"),
            responseName = "height",
            fieldName = "height",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friend(
        customScalarAdapters: CustomScalarAdapters
      ) :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend>
          {
        val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

        val appearsInAdapter: ResponseAdapter<List<Episode?>> =
            ListResponseAdapter(NullableResponseAdapter(Episode_ResponseAdapter))

        val friendsAdapter:
            ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend?>?>
            =
            NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friend(customScalarAdapters))))

        override fun fromResponse(reader: JsonReader, __typename: String?):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend {
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend?>? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
              1 -> appearsIn = appearsInAdapter.fromResponse(reader) ?: throw
                  UnexpectedNullValue("appearsIn")
              2 -> friends = friendsAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend(
            name = name!!,
            appearsIn = appearsIn!!,
            friends = friends
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend) {
          nameAdapter.toResponse(writer, value.name)
          appearsInAdapter.toResponse(writer, value.appearsIn)
          friendsAdapter.toResponse(writer, value.friends)
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type =
                  ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
              responseName = "appearsIn",
              fieldName = "appearsIn",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              responseName = "friends",
              fieldName = "friends",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = listOf(
                ResponseField.FieldSet("Droid", Friend.CharacterFriend.RESPONSE_FIELDS),
                ResponseField.FieldSet("Human", Friend.CharacterFriend.RESPONSE_FIELDS),
                ResponseField.FieldSet(null, Friend.OtherFriend.RESPONSE_FIELDS),
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Friend(
          customScalarAdapters: CustomScalarAdapters
        ) :
            ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend>
            {
          val characterFriendAdapter: CharacterFriend =
              com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend(customScalarAdapters)

          val otherFriendAdapter: OtherFriend =
              com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend(customScalarAdapters)

          override fun fromResponse(reader: JsonReader, __typename: String?):
              com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend {
            reader.beginObject()
            check(reader.nextName() == "__typename")
            val typename = reader.nextString()

            return when(typename) {
              "Droid" -> characterFriendAdapter.fromResponse(reader, typename)
              "Human" -> characterFriendAdapter.fromResponse(reader, typename)
              else -> otherFriendAdapter.fromResponse(reader, typename)
            }
            .also { reader.endObject() }
          }

          override fun toResponse(writer: JsonWriter,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend) {
            when(value) {
              is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend -> characterFriendAdapter.toResponse(writer, value)
              is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend -> otherFriendAdapter.toResponse(writer, value)
            }
          }

          class CharacterFriend(
            customScalarAdapters: CustomScalarAdapters
          ) :
              ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend>
              {
            val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

            val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

            val friendsConnectionAdapter:
                ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection>
                = FriendsConnection(customScalarAdapters)

            override fun fromResponse(reader: JsonReader, __typename: String?):
                com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend {
              var __typename: String? = __typename
              var name: String? = null
              var friendsConnection: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection? = null
              reader.beginObject()
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
                      UnexpectedNullValue("__typename")
                  1 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
                  2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader) ?: throw
                      UnexpectedNullValue("friendsConnection")
                  else -> break
                }
              }
              reader.endObject()
              return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend(
                __typename = __typename!!,
                name = name!!,
                friendsConnection = friendsConnection!!
              )
            }

            override fun toResponse(writer: JsonWriter,
                value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend) {
              __typenameAdapter.toResponse(writer, value.__typename)
              nameAdapter.toResponse(writer, value.name)
              friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
            }

            companion object {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  responseName = "__typename",
                  fieldName = "__typename",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                  fieldSets = emptyList(),
                ),
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  responseName = "name",
                  fieldName = "name",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                  fieldSets = emptyList(),
                ),
                ResponseField(
                  type =
                      ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
                  responseName = "friendsConnection",
                  fieldName = "friendsConnection",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                  fieldSets = listOf(
                    ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
                  ),
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
            }

            class FriendsConnection(
              customScalarAdapters: CustomScalarAdapters
            ) :
                ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection>
                {
              val totalCountAdapter: ResponseAdapter<Int?> =
                  NullableResponseAdapter(intResponseAdapter)

              val edgesAdapter:
                  ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge?>?>
                  =
                  NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edge(customScalarAdapters))))

              override fun fromResponse(reader: JsonReader, __typename: String?):
                  com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection {
                var totalCount: Int? = null
                var edges: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge?>? = null
                reader.beginObject()
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> totalCount = totalCountAdapter.fromResponse(reader)
                    1 -> edges = edgesAdapter.fromResponse(reader)
                    else -> break
                  }
                }
                reader.endObject()
                return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection(
                  totalCount = totalCount,
                  edges = edges
                )
              }

              override fun toResponse(writer: JsonWriter,
                  value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection) {
                totalCountAdapter.toResponse(writer, value.totalCount)
                edgesAdapter.toResponse(writer, value.edges)
              }

              companion object {
                val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                  ResponseField(
                    type = ResponseField.Type.Named.Other("Int"),
                    responseName = "totalCount",
                    fieldName = "totalCount",
                    arguments = emptyMap(),
                    conditions = emptyList(),
                    fieldSets = emptyList(),
                  ),
                  ResponseField(
                    type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
                    responseName = "edges",
                    fieldName = "edges",
                    arguments = emptyMap(),
                    conditions = emptyList(),
                    fieldSets = listOf(
                      ResponseField.FieldSet(null, Edge.RESPONSE_FIELDS)
                    ),
                  )
                )

                val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
              }

              class Edge(
                customScalarAdapters: CustomScalarAdapters
              ) :
                  ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge>
                  {
                val nodeAdapter:
                    ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node?>
                    = NullableResponseAdapter(Node(customScalarAdapters))

                override fun fromResponse(reader: JsonReader, __typename: String?):
                    com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge {
                  var node: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node? = null
                  reader.beginObject()
                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> node = nodeAdapter.fromResponse(reader)
                      else -> break
                    }
                  }
                  reader.endObject()
                  return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge(
                    node = node
                  )
                }

                override fun toResponse(writer: JsonWriter,
                    value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge) {
                  nodeAdapter.toResponse(writer, value.node)
                }

                companion object {
                  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                    ResponseField(
                      type = ResponseField.Type.Named.Object("Character"),
                      responseName = "node",
                      fieldName = "node",
                      arguments = emptyMap(),
                      conditions = emptyList(),
                      fieldSets = listOf(
                        ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
                      ),
                    )
                  )

                  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                }

                class Node(
                  customScalarAdapters: CustomScalarAdapters
                ) :
                    ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node>
                    {
                  val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

                  override fun fromResponse(reader: JsonReader, __typename: String?):
                      com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node {
                    var name: String? = null
                    reader.beginObject()
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> name = nameAdapter.fromResponse(reader) ?: throw
                            UnexpectedNullValue("name")
                        else -> break
                      }
                    }
                    reader.endObject()
                    return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node(
                      name = name!!
                    )
                  }

                  override fun toResponse(writer: JsonWriter,
                      value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.CharacterFriend.FriendsConnection.Edge.Node) {
                    nameAdapter.toResponse(writer, value.name)
                  }

                  companion object {
                    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                      ResponseField(
                        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                        responseName = "name",
                        fieldName = "name",
                        arguments = emptyMap(),
                        conditions = emptyList(),
                        fieldSets = emptyList(),
                      )
                    )

                    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                  }
                }
              }
            }
          }

          class OtherFriend(
            customScalarAdapters: CustomScalarAdapters
          ) :
              ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend>
              {
            val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

            override fun fromResponse(reader: JsonReader, __typename: String?):
                com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend {
              var __typename: String? = __typename
              reader.beginObject()
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
                      UnexpectedNullValue("__typename")
                  else -> break
                }
              }
              reader.endObject()
              return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend(
                __typename = __typename!!
              )
            }

            override fun toResponse(writer: JsonWriter,
                value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friend.Friend.OtherFriend) {
              __typenameAdapter.toResponse(writer, value.__typename)
            }

            companion object {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                  responseName = "__typename",
                  fieldName = "__typename",
                  arguments = emptyMap(),
                  conditions = emptyList(),
                  fieldSets = emptyList(),
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
            }
          }
        }
      }
    }

    class OtherHeroDetailQuery(
      customScalarAdapters: CustomScalarAdapters
    ) :
        ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery>
        {
      val __typenameAdapter: ResponseAdapter<String> = stringResponseAdapter

      val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

      val friendsAdapter:
          ResponseAdapter<List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend?>?>
          =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friend(customScalarAdapters))))

      override fun fromResponse(reader: JsonReader, __typename: String?):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = __typenameAdapter.fromResponse(reader) ?: throw
                UnexpectedNullValue("__typename")
            1 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
            2 -> friends = friendsAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery) {
        __typenameAdapter.toResponse(writer, value.__typename)
        nameAdapter.toResponse(writer, value.name)
        friendsAdapter.toResponse(writer, value.friends)
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = emptyList(),
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            responseName = "friends",
            fieldName = "friends",
            arguments = emptyMap(),
            conditions = emptyList(),
            fieldSets = listOf(
              ResponseField.FieldSet(null, Friend.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friend(
        customScalarAdapters: CustomScalarAdapters
      ) :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend>
          {
        val nameAdapter: ResponseAdapter<String> = stringResponseAdapter

        override fun fromResponse(reader: JsonReader, __typename: String?):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend {
          var name: String? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = nameAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("name")
              else -> break
            }
          }
          reader.endObject()
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend(
            name = name!!
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friend) {
          nameAdapter.toResponse(writer, value.name)
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }
      }
    }
  }
}
