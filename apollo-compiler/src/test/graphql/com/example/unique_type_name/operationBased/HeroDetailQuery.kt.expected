//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.unique_type_name

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter
import com.example.unique_type_name.fragment.HeroDetails
import com.example.unique_type_name.responsefields.HeroDetailQuery_ResponseFields
import com.example.unique_type_name.type.Episode
import kotlin.Double
import kotlin.String
import kotlin.collections.List

class HeroDetailQuery : Query<HeroDetailQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> {
    return HeroDetailQuery_ResponseAdapter.Data.obj()
  }

  override fun fieldSets(): List<FieldSet> = HeroDetailQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val heroDetailQuery: HeroDetailQuery?
  ) : Query.Data {
    data class HeroDetailQuery(
      val __typename: String,
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character, or an empty list if they have none
       */
      val friends: List<Friend?>?,
      /**
       * Synthetic field for inline fragment on Human
       */
      val onHuman: OnHuman?
    ) {
      fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()

      data class Friend(
        /**
         * The name of the character
         */
        val name: String
      )

      data class OnHuman(
        /**
         * Height in the preferred unit, default is meters
         */
        val height: Double?,
        /**
         * This human's friends, or an empty list if they have none
         */
        val friends: List<Friend?>?
      ) {
        fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()

        data class Friend(
          /**
           * The movies this character appears in
           */
          val appearsIn: List<Episode?>,
          /**
           * The friends of the character, or an empty list if they have none
           */
          val friends: List<Friend?>?
        ) {
          fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

          fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()

          data class Friend(
            val __typename: String,
            /**
             * Synthetic field for fragment spread on Character
             */
            val heroDetails: HeroDetails?
          )
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "0bb60d3dba09b5f6cd39e450d5b6859cbf04ad3b2773b34300023ba16551a125"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query HeroDetailQuery {
     *   heroDetailQuery {
     *     __typename
     *     name
     *     friends {
     *       name
     *     }
     *     ... on Human {
     *       height
     *       friends {
     *         appearsIn
     *         friends {
     *           __typename
     *           ...HeroDetails
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment HeroDetails on Character {
     *   __typename
     *   name
     *   friendsConnection {
     *     totalCount
     *     edges {
     *       node {
     *         name
     *       }
     *     }
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query HeroDetailQuery { heroDetailQuery { __typename name friends { name } ... on Human { height friends { appearsIn friends { __typename ...HeroDetails } } } } }  fragment HeroDetails on Character { __typename name friendsConnection { totalCount edges { node { name } } } }"

    const val OPERATION_NAME: String = "HeroDetailQuery"
  }
}
