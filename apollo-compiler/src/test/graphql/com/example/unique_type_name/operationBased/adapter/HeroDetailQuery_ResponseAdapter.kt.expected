//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.fragment.HeroDetails
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object HeroDetailQuery_ResponseAdapter {
  object Data : Adapter<HeroDetailQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("heroDetailQuery")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        com.example.unique_type_name.HeroDetailQuery.Data {
      var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> heroDetailQuery = HeroDetailQuery.obj(true).nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return com.example.unique_type_name.HeroDetailQuery.Data(
        heroDetailQuery = heroDetailQuery
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: com.example.unique_type_name.HeroDetailQuery.Data
    ) {
      writer.name("heroDetailQuery")
      HeroDetailQuery.obj(true).nullable().toJson(writer, customScalarAdapters,
          value.heroDetailQuery)
    }

    private object HeroDetailQuery :
        Adapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
        var __typename: String? = null
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onHuman: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman? = null
        if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
          onHuman = com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.Data.HeroDetailQuery.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery(
          __typename = __typename,
          name = name!!,
          friends = friends,
          onHuman = onHuman
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
            value.friends)

        if (value.onHuman != null) {
          com.example.unique_type_name.adapter.HeroDetailQuery_ResponseAdapter.Data.HeroDetailQuery.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }
      }

      private object Friend :
          Adapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friend {
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friend(
            name = name!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.Friend
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      private object OnHuman :
          Adapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman> {
        val RESPONSE_NAMES: List<String> = listOf("height", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman {
          var height: Double? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              1 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman(
            height = height,
            friends = friends
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman
        ) {
          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
              value.friends)
        }

        private object Friend :
            Adapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend>
            {
          val RESPONSE_NAMES: List<String> = listOf("appearsIn", "friends")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend {
            var appearsIn: List<Episode?>? = null
            var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend.Friend?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
                    customScalarAdapters)
                1 -> friends = Friend.obj(true).nullable().list().nullable().fromJson(reader,
                    customScalarAdapters)
                else -> break
              }
            }

            return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend(
              appearsIn = appearsIn!!,
              friends = friends
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend
          ) {
            writer.name("appearsIn")
            Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
                value.appearsIn)

            writer.name("friends")
            Friend.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
                value.friends)
          }

          private object Friend :
              Adapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend.Friend>
              {
            val RESPONSE_NAMES: List<String> = listOf("__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend.Friend {
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              check(__typename != null) {
                "__typename was not found"
              }

              reader.rewind()
              var heroDetails: HeroDetails? = null
              if (possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
                heroDetails = com.example.unique_type_name.fragment.HeroDetailsImpl_ResponseAdapter.HeroDetails.fromJson(reader,
                    customScalarAdapters)
              }

              return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend.Friend(
                __typename = __typename,
                heroDetails = heroDetails
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OnHuman.Friend.Friend
            ) {
              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

              if (value.heroDetails != null) {
                com.example.unique_type_name.fragment.HeroDetailsImpl_ResponseAdapter.HeroDetails.toJson(writer,
                    customScalarAdapters, value.heroDetails)
              }
            }
          }
        }
      }
    }
  }
}
