// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.unique_type_name.fragment.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.intResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.example.unique_type_name.fragment.HeroDetailsImpl
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class HeroDetailsImpl_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<HeroDetailsImpl.Data> {
  val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

  val friendsConnectionAdapter: ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection> =
      FriendsConnection(customScalarAdapters)

  override fun fromResponse(reader: JsonReader): HeroDetailsImpl.Data {
    var __typename: String? = null
    var name: String? = null
    var friendsConnection: HeroDetailsImpl.Data.FriendsConnection? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        1 -> name = stringAdapter.fromResponse(reader)
        2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return HeroDetailsImpl.Data(
      __typename = __typename!!,
      name = name!!,
      friendsConnection = friendsConnection!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    writer.name("name")
    stringAdapter.toResponse(writer, value.name)
    writer.name("friendsConnection")
    friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
        fieldName = "friendsConnection",
        fieldSets = listOf(
<<<<<<< HEAD
          ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
=======
          ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
>>>>>>> dev-3.x
        ),
      )
    )

<<<<<<< HEAD
    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class FriendsConnection(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection> {
    val nullableIntAdapter: ResponseAdapter<Int?> = NullableResponseAdapter(intResponseAdapter)

    val nullableListOfNullableEdgesAdapter:
        ResponseAdapter<List<HeroDetailsImpl.Data.FriendsConnection.Edges?>?> =
        NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(customScalarAdapters))))

    override fun fromResponse(reader: JsonReader): HeroDetailsImpl.Data.FriendsConnection {
      var totalCount: Int? = null
      var edges: List<HeroDetailsImpl.Data.FriendsConnection.Edges?>? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = nullableIntAdapter.fromResponse(reader)
          1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
          else -> break
=======
    override fun fromResponse(reader: ResponseReader, __typename: String?):
        HeroDetailsImpl.Data.FriendsConnection {
      return reader.run {
        var totalCount: Int? = null
        var edges: List<HeroDetailsImpl.Data.FriendsConnection.Edges?>? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> totalCount = readInt(RESPONSE_FIELDS[0])
            1 -> edges = readList<HeroDetailsImpl.Data.FriendsConnection.Edges>(RESPONSE_FIELDS[1]) { reader ->
              reader.readObject<HeroDetailsImpl.Data.FriendsConnection.Edges> { reader ->
                Edges.fromResponse(reader)
              }
            }
            else -> break
          }
>>>>>>> dev-3.x
        }
      }
      reader.endObject()
      return HeroDetailsImpl.Data.FriendsConnection(
        totalCount = totalCount,
        edges = edges
      )
    }

<<<<<<< HEAD
    override fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data.FriendsConnection) {
      writer.beginObject()
      writer.name("totalCount")
      nullableIntAdapter.toResponse(writer, value.totalCount)
      writer.name("edges")
      nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
      writer.endObject()
    }

    companion object {
=======
    override fun toResponse(writer: ResponseWriter, value: HeroDetailsImpl.Data.FriendsConnection) {
      writer.writeInt(RESPONSE_FIELDS[0], value.totalCount)
      writer.writeList(RESPONSE_FIELDS[1], value.edges) { value, listItemWriter ->
        listItemWriter.writeObject { writer ->
          Edges.toResponse(writer, value)
        }
      }
    }

    object Edges : ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection.Edges> {
>>>>>>> dev-3.x
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("Int"),
          fieldName = "totalCount",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

<<<<<<< HEAD
      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Edges(
      customScalarAdapters: CustomScalarAdapters
    ) : ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection.Edges> {
      val nullableNodeAdapter: ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection.Edges.Node?> =
          NullableResponseAdapter(Node(customScalarAdapters))

      override fun fromResponse(reader: JsonReader): HeroDetailsImpl.Data.FriendsConnection.Edges {
        var node: HeroDetailsImpl.Data.FriendsConnection.Edges.Node? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> node = nullableNodeAdapter.fromResponse(reader)
            else -> break
          }
=======
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          HeroDetailsImpl.Data.FriendsConnection.Edges {
        return reader.run {
          var node: HeroDetailsImpl.Data.FriendsConnection.Edges.Node? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> node = readObject<HeroDetailsImpl.Data.FriendsConnection.Edges.Node>(RESPONSE_FIELDS[0]) { reader ->
                Node.fromResponse(reader)
              }
              else -> break
            }
          }
          HeroDetailsImpl.Data.FriendsConnection.Edges(
            node = node
          )
>>>>>>> dev-3.x
        }
        reader.endObject()
        return HeroDetailsImpl.Data.FriendsConnection.Edges(
          node = node
        )
      }

<<<<<<< HEAD
      override fun toResponse(writer: JsonWriter,
          value: HeroDetailsImpl.Data.FriendsConnection.Edges) {
        writer.beginObject()
        writer.name("node")
        nullableNodeAdapter.toResponse(writer, value.node)
        writer.endObject()
      }

      companion object {
=======
      override fun toResponse(writer: ResponseWriter,
          value: HeroDetailsImpl.Data.FriendsConnection.Edges) {
        if(value.node == null) {
          writer.writeObject(RESPONSE_FIELDS[0], null)
        } else {
          writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
            Node.toResponse(writer, value.node)
          }
        }
      }

      object Node : ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection.Edges.Node> {
>>>>>>> dev-3.x
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Character"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
            ),
          )
        )

<<<<<<< HEAD
        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Node(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<HeroDetailsImpl.Data.FriendsConnection.Edges.Node> {
        val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

        override fun fromResponse(reader: JsonReader):
            HeroDetailsImpl.Data.FriendsConnection.Edges.Node {
          var name: String? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = stringAdapter.fromResponse(reader)
              else -> break
            }
=======
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            HeroDetailsImpl.Data.FriendsConnection.Edges.Node {
          return reader.run {
            var name: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> name = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            HeroDetailsImpl.Data.FriendsConnection.Edges.Node(
              name = name!!
            )
>>>>>>> dev-3.x
          }
          reader.endObject()
          return HeroDetailsImpl.Data.FriendsConnection.Edges.Node(
            name = name!!
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: HeroDetailsImpl.Data.FriendsConnection.Edges.Node) {
          writer.beginObject()
          writer.name("name")
          stringAdapter.toResponse(writer, value.name)
          writer.endObject()
        }

<<<<<<< HEAD
        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
        override fun toResponse(writer: ResponseWriter,
            value: HeroDetailsImpl.Data.FriendsConnection.Edges.Node) {
          writer.writeString(RESPONSE_FIELDS[0], value.name)
>>>>>>> dev-3.x
        }
      }
    }
  }
}
