//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.unique_type_name.selections

import com.apollographql.apollo3.api.CompiledCompoundType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledOtherType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.unique_type_name.fragment.selections.HeroDetailsSelections
import kotlin.collections.List

private val friends: List<CompiledSelection> = listOf(
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      )
    )

private val friends2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Character",
        selections = HeroDetailsSelections
      )
    )

private val friends1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "appearsIn",
        type = CompiledOtherType("unused").list().notNull()
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").list(),
        selections = friends2
      )
    )

private val onHuman: List<CompiledSelection> = listOf(
      CompiledField(
        name = "height",
        type = CompiledOtherType("unused")
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").list(),
        selections = friends2
      )
    )

private val heroDetailQuery: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").list(),
        selections = friends
      ),
      CompiledFragment(
        typeCondition = "Human",
        selections = friends2
      )
    )

val HeroDetailQuerySelections: List<CompiledSelection> = listOf(
      CompiledField(
        name = "heroDetailQuery",
        type = CompiledCompoundType("unused"),
        selections = friends
      )
    )
