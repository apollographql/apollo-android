// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_merge_fields.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.inline_fragment_merge_fields.TestQuery
import com.example.inline_fragment_merge_fields.type.CustomScalars
import kotlin.Any
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Hero.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    reader.beginObject()
    var hero: TestQuery.Data.Hero? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      hero = hero
    )
    reader.endObject()
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("hero")
    Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    writer.endObject()
  }

  object Hero : ResponseAdapter<TestQuery.Data.Hero> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
        fieldName = "friendsConnection",
        fieldSets = listOf(
          ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("URL")),
        fieldName = "profileLink",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Hero {
      var __typename: String? = null
      var name: String? = null
      var friendsConnection: TestQuery.Data.Hero.FriendsConnection? = null
      var profileLink: Any? = null
      reader.beginObject()
<<<<<<< HEAD
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> friendsConnection = FriendsConnection.fromResponse(reader, responseAdapterCache)
          3 -> profileLink = responseAdapterCache.responseAdapterFor<Any>(CustomScalars.URL).fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.Hero(
        __typename = __typename!!,
        name = name!!,
        friendsConnection = friendsConnection!!,
        profileLink = profileLink!!
      )
=======
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Droid" -> CharacterHero.fromResponse(reader, responseAdapterCache, typename)
        "Human" -> CharacterHero.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherHero.fromResponse(reader, responseAdapterCache, typename)
      }
      reader.endObject()
>>>>>>> ab5258fe0... all compiler tests pass
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Hero
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("friendsConnection")
      FriendsConnection.toResponse(writer, responseAdapterCache, value.friendsConnection)
      writer.name("profileLink")
      responseAdapterCache.responseAdapterFor<Any>(CustomScalars.URL).toResponse(writer,
          responseAdapterCache, value.profileLink)
      writer.endObject()
    }

    object FriendsConnection : ResponseAdapter<TestQuery.Data.Hero.FriendsConnection> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

<<<<<<< HEAD
      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero.FriendsConnection {
        var edges: List<TestQuery.Data.Hero.FriendsConnection.Edges?>? = null
        reader.beginObject()
=======
      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Hero.CharacterHero {
        reader.beginObject()
        var __typename: String? = __typename
        var name: String? = null
        var friendsConnection: TestQuery.Data.Hero.CharacterHero.FriendsConnection? = null
        var profileLink: Any? = null
>>>>>>> ab5258fe0... all compiler tests pass
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> edges = Edges.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        reader.endObject()
        return TestQuery.Data.Hero.FriendsConnection(
          edges = edges
        )
        reader.endObject()
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero.FriendsConnection
      ) {
        writer.beginObject()
        writer.name("edges")
        Edges.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
        writer.endObject()
      }

      object Edges : ResponseAdapter<TestQuery.Data.Hero.FriendsConnection.Edges> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Character"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
<<<<<<< HEAD
            TestQuery.Data.Hero.FriendsConnection.Edges {
          var node: TestQuery.Data.Hero.FriendsConnection.Edges.Node? = null
=======
            TestQuery.Data.Hero.CharacterHero.FriendsConnection {
>>>>>>> ab5258fe0... all compiler tests pass
          reader.beginObject()
          var edges: List<TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = Node.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
<<<<<<< HEAD
          reader.endObject()
          return TestQuery.Data.Hero.FriendsConnection.Edges(
            node = node
=======
          return TestQuery.Data.Hero.CharacterHero.FriendsConnection(
            edges = edges
>>>>>>> ab5258fe0... all compiler tests pass
          )
          reader.endObject()
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.FriendsConnection.Edges
        ) {
          writer.beginObject()
          writer.name("node")
          Node.nullable().toResponse(writer, responseAdapterCache, value.node)
          writer.endObject()
        }

        object Node : ResponseAdapter<TestQuery.Data.Hero.FriendsConnection.Edges.Node> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
<<<<<<< HEAD
              TestQuery.Data.Hero.FriendsConnection.Edges.Node {
            var name: String? = null
=======
              TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges {
>>>>>>> ab5258fe0... all compiler tests pass
            reader.beginObject()
            var node: TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges.Node? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
<<<<<<< HEAD
            reader.endObject()
            return TestQuery.Data.Hero.FriendsConnection.Edges.Node(
              name = name!!
=======
            return TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges(
              node = node
>>>>>>> ab5258fe0... all compiler tests pass
            )
            reader.endObject()
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Hero.FriendsConnection.Edges.Node
          ) {
            writer.beginObject()
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.endObject()
          }
<<<<<<< HEAD
=======

          object Node :
              ResponseAdapter<TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges.Node> {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges.Node {
              reader.beginObject()
              var name: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges.Node(
                name = name!!
              )
              reader.endObject()
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Hero.CharacterHero.FriendsConnection.Edges.Node
            ) {
              writer.beginObject()
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.endObject()
            }
          }
        }
      }
    }

    object OtherHero {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Hero.OtherHero {
        reader.beginObject()
        var __typename: String? = __typename
        var name: String? = null
        var friendsConnection: TestQuery.Data.Hero.OtherHero.FriendsConnection? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friendsConnection = FriendsConnection.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Hero.OtherHero(
          __typename = __typename!!,
          name = name!!,
          friendsConnection = friendsConnection!!
        )
        reader.endObject()
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero.OtherHero
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friendsConnection")
        FriendsConnection.toResponse(writer, responseAdapterCache, value.friendsConnection)
        writer.endObject()
      }

      object FriendsConnection : ResponseAdapter<TestQuery.Data.Hero.OtherHero.FriendsConnection> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Hero.OtherHero.FriendsConnection {
          reader.beginObject()
          var edges: List<TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> edges = Edges.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.OtherHero.FriendsConnection(
            edges = edges
          )
          reader.endObject()
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.OtherHero.FriendsConnection
        ) {
          writer.beginObject()
          writer.name("edges")
          Edges.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
          writer.endObject()
        }

        object Edges : ResponseAdapter<TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges {
            reader.beginObject()
            var node: TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges.Node? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> node = Node.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges(
              node = node
            )
            reader.endObject()
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges
          ) {
            writer.beginObject()
            writer.name("node")
            Node.nullable().toResponse(writer, responseAdapterCache, value.node)
            writer.endObject()
          }

          object Node : ResponseAdapter<TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges.Node>
              {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges.Node {
              reader.beginObject()
              var name: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges.Node(
                name = name!!
              )
              reader.endObject()
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Hero.OtherHero.FriendsConnection.Edges.Node
            ) {
              writer.beginObject()
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.endObject()
            }
          }
>>>>>>> ab5258fe0... all compiler tests pass
        }
      }
    }
  }
}
