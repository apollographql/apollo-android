//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("iface1")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var iface1: TestQuery.Iface1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> iface1 = Iface1.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        iface1 = iface1
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("iface1")
      Iface1.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface1)
    }

    object Iface1 : Adapter<TestQuery.Iface1> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Iface1 {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asIface1: TestQuery.AsIface1? = null
        if (possibleTypes("Impl1").evaluate(emptySet(), __typename)) {
          asIface1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var asImpl1: TestQuery.AsImpl1? = null
        if (possibleTypes("Impl1").evaluate(emptySet(), __typename)) {
          asImpl1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Iface1(
          __typename = __typename,
          asIface1 = asIface1,
          asImpl1 = asImpl1
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Iface1
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.asIface1 != null) {
          com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.toJson(writer,
              customScalarAdapters, value.asIface1)
        }

        if (value.asImpl1 != null) {
          com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.toJson(writer,
              customScalarAdapters, value.asImpl1)
        }
      }

      object AsIface1 : Adapter<TestQuery.AsIface1> {
        val RESPONSE_NAMES: List<String> = listOf("iface2", "__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsIface1 {
          var iface2: TestQuery.Iface2? = null
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> iface2 = Iface2.obj(true).nullable().fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsIface1(
            iface2 = iface2,
            __typename = __typename!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsIface1
        ) {
          writer.name("iface2")
          Iface2.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface2)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }

        object Iface2 : Adapter<TestQuery.Iface2> {
          val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.Iface2 {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            var asIface2: TestQuery.AsIface2? = null
            if (possibleTypes("Impl2").evaluate(emptySet(), __typename)) {
              asIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.Iface2.AsIface2.fromJson(reader,
                  customScalarAdapters)
            }

            reader.rewind()
            var asImpl2: TestQuery.AsImpl2? = null
            if (possibleTypes("Impl2").evaluate(emptySet(), __typename)) {
              asImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.Iface2.AsImpl2.fromJson(reader,
                  customScalarAdapters)
            }

            return TestQuery.Iface2(
              __typename = __typename,
              asIface2 = asIface2,
              asImpl2 = asImpl2
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.Iface2
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.asIface2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.Iface2.AsIface2.toJson(writer,
                  customScalarAdapters, value.asIface2)
            }

            if (value.asImpl2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsIface1.Iface2.AsImpl2.toJson(writer,
                  customScalarAdapters, value.asImpl2)
            }
          }

          object AsIface2 : Adapter<TestQuery.AsIface2> {
            val RESPONSE_NAMES: List<String> = listOf("scalar1", "__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.AsIface2 {
              var scalar1: String? = null
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.AsIface2(
                scalar1 = scalar1,
                __typename = __typename!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.AsIface2
            ) {
              writer.name("scalar1")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)

              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
            }
          }

          object AsImpl2 : Adapter<TestQuery.AsImpl2> {
            val RESPONSE_NAMES: List<String> = listOf("scalar2", "__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.AsImpl2 {
              var scalar2: String? = null
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> scalar2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.AsImpl2(
                scalar2 = scalar2,
                __typename = __typename!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.AsImpl2
            ) {
              writer.name("scalar2")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar2)

              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
            }
          }
        }
      }

      object AsImpl1 : Adapter<TestQuery.AsImpl1> {
        val RESPONSE_NAMES: List<String> = listOf("iface2", "__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsImpl1 {
          var iface2: TestQuery.Iface21? = null
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> iface2 = Iface2.obj(true).nullable().fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsImpl1(
            iface2 = iface2,
            __typename = __typename!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsImpl1
        ) {
          writer.name("iface2")
          Iface2.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface2)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }

        object Iface2 : Adapter<TestQuery.Iface21> {
          val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.Iface21 {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            var asIface2: TestQuery.AsIface21? = null
            if (possibleTypes("Impl2").evaluate(emptySet(), __typename)) {
              asIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.Iface2.AsIface2.fromJson(reader,
                  customScalarAdapters)
            }

            reader.rewind()
            var asImpl2: TestQuery.AsImpl21? = null
            if (possibleTypes("Impl2").evaluate(emptySet(), __typename)) {
              asImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.Iface2.AsImpl2.fromJson(reader,
                  customScalarAdapters)
            }

            return TestQuery.Iface21(
              __typename = __typename,
              asIface2 = asIface2,
              asImpl2 = asImpl2
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.Iface21
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.asIface2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.Iface2.AsIface2.toJson(writer,
                  customScalarAdapters, value.asIface2)
            }

            if (value.asImpl2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.AsImpl1.Iface2.AsImpl2.toJson(writer,
                  customScalarAdapters, value.asImpl2)
            }
          }

          object AsIface2 : Adapter<TestQuery.AsIface21> {
            val RESPONSE_NAMES: List<String> = listOf("scalar3", "__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.AsIface21 {
              var scalar3: String? = null
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> scalar3 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.AsIface21(
                scalar3 = scalar3,
                __typename = __typename!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.AsIface21
            ) {
              writer.name("scalar3")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar3)

              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
            }
          }

          object AsImpl2 : Adapter<TestQuery.AsImpl21> {
            val RESPONSE_NAMES: List<String> = listOf("scalar4", "__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.AsImpl21 {
              var scalar4: String? = null
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> scalar4 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.AsImpl21(
                scalar4 = scalar4,
                __typename = __typename!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.AsImpl21
            ) {
              writer.name("scalar4")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar4)

              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
            }
          }
        }
      }
    }
  }
}
