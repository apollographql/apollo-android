//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.selections

import com.apollographql.apollo3.api.CompiledCompoundType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledOtherType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.notNull
import kotlin.collections.List

private val onIface2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "scalar1",
        type = CompiledOtherType("unused")
      )
    )

private val onImpl2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "scalar2",
        type = CompiledOtherType("unused")
      )
    )

private val iface2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Iface2",
        selections = onIface2
      ),
      CompiledFragment(
        typeCondition = "Impl2",
        selections = onImpl2
      )
    )

private val onIface1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "iface2",
        type = CompiledCompoundType("unused"),
        selections = onIface2
      )
    )

private val onIface21: List<CompiledSelection> = listOf(
      CompiledField(
        name = "scalar3",
        type = CompiledOtherType("unused")
      )
    )

private val onImpl21: List<CompiledSelection> = listOf(
      CompiledField(
        name = "scalar4",
        type = CompiledOtherType("unused")
      )
    )

private val iface21: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Iface2",
        selections = onIface21
      ),
      CompiledFragment(
        typeCondition = "Impl2",
        selections = onImpl21
      )
    )

private val onImpl1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "iface2",
        type = CompiledCompoundType("unused"),
        selections = onIface21
      )
    )

private val iface1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Iface1",
        selections = onIface2
      ),
      CompiledFragment(
        typeCondition = "Impl1",
        selections = onIface21
      )
    )

val TestQuerySelections: List<CompiledSelection> = listOf(
      CompiledField(
        name = "iface1",
        type = CompiledCompoundType("unused"),
        selections = onIface2
      )
    )
