//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.responsefields

import com.apollographql.apollo3.api.ResponseField
import kotlin.Array

object TestQuery_ResponseFields {
  val fields: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("unused"),
        fieldName = "iface1",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Iface1.fields),
          ResponseField.FieldSet("Impl1", Impl1Iface1.fields),
        ),
      ),
    )


    object Iface1 {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Object("unused"),
          fieldName = "iface2",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Iface2.fields),
            ResponseField.FieldSet("Impl2", Impl2Iface2.fields),
          ),
        ),
      )


      object Iface2 {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar1",
          ),
        )

      }

      object Impl2Iface2 {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar1",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar2",
          ),
        )

      }
    }

    object Impl1Iface1 {
      val fields: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Object("unused"),
          fieldName = "iface2",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Iface2.fields),
            ResponseField.FieldSet("Impl2", Impl2Iface2.fields),
          ),
        ),
      )


      object Iface2 {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar1",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar3",
          ),
        )

      }

      object Impl2Iface2 {
        val fields: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar1",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar2",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar3",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("unused"),
            fieldName = "scalar4",
          ),
        )

      }
    }
  }
}
