//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("iface1")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var iface1: TestQuery.Data.Iface1? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> iface1 = Iface1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        iface1 = iface1
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("iface1")
      Iface1.obj().nullable().toJson(writer, customScalarAdapters, value.iface1)
    }

    object Iface1 : Adapter<TestQuery.Data.Iface1> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Iface1 {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Impl1",
          -> Impl1Iface1.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherIface1.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Iface1
      ) {
        when(value) {
          is TestQuery.Data.Impl1Iface1 -> Impl1Iface1.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherIface1 -> OtherIface1.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    object Impl1Iface1 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.Impl1Iface1 {
        var __typename: String? = typename
        var iface2: TestQuery.Data.Impl1Iface1.Iface2? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> iface2 = Iface2.obj().nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.Impl1Iface1(
          __typename = __typename!!,
          iface2 = iface2
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Impl1Iface1
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        writer.name("iface2")
        Iface2.obj().nullable().toJson(writer, customScalarAdapters, value.iface2)
      }

      object Iface2 : Adapter<TestQuery.Data.Impl1Iface1.Iface2> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Impl1Iface1.Iface2 {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherIface2.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Impl1Iface1.Iface2
        ) {
          when(value) {
            is TestQuery.Data.Impl1Iface1.Impl2Iface2 -> Impl2Iface2.toJson(writer,
                customScalarAdapters, value)
            is TestQuery.Data.Impl1Iface1.OtherIface2 -> OtherIface2.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      object Impl2Iface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2", "scalar3",
            "scalar4")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.Impl1Iface1.Impl2Iface2 {
          var __typename: String? = typename
          var scalar1: String? = null
          var scalar2: String? = null
          var scalar3: String? = null
          var scalar4: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              2 -> scalar2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              3 -> scalar3 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              4 -> scalar4 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Impl1Iface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar2 = scalar2,
            scalar3 = scalar3,
            scalar4 = scalar4
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Impl1Iface1.Impl2Iface2
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)
          writer.name("scalar2")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar2)
          writer.name("scalar3")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar3)
          writer.name("scalar4")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar4)
        }
      }

      object OtherIface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.Impl1Iface1.OtherIface2 {
          var __typename: String? = typename
          var scalar1: String? = null
          var scalar3: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              2 -> scalar3 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Impl1Iface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar3 = scalar3
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Impl1Iface1.OtherIface2
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)
          writer.name("scalar3")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar3)
        }
      }
    }

    object OtherIface1 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherIface1 {
        var __typename: String? = typename
        var iface2: TestQuery.Data.OtherIface1.Iface2? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> iface2 = Iface2.obj().nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.OtherIface1(
          __typename = __typename!!,
          iface2 = iface2
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherIface1
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        writer.name("iface2")
        Iface2.obj().nullable().toJson(writer, customScalarAdapters, value.iface2)
      }

      object Iface2 : Adapter<TestQuery.Data.OtherIface1.Iface2> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.OtherIface1.Iface2 {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherIface2.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.OtherIface1.Iface2
        ) {
          when(value) {
            is TestQuery.Data.OtherIface1.Impl2Iface2 -> Impl2Iface2.toJson(writer,
                customScalarAdapters, value)
            is TestQuery.Data.OtherIface1.OtherIface2 -> OtherIface2.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      object Impl2Iface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.OtherIface1.Impl2Iface2 {
          var __typename: String? = typename
          var scalar1: String? = null
          var scalar2: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              2 -> scalar2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.OtherIface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar2 = scalar2
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.OtherIface1.Impl2Iface2
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)
          writer.name("scalar2")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar2)
        }
      }

      object OtherIface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): TestQuery.Data.OtherIface1.OtherIface2 {
          var __typename: String? = typename
          var scalar1: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.OtherIface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = scalar1
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.OtherIface1.OtherIface2
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)
        }
      }
    }
  }
}
