//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("iface1")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var iface1: TestQuery.Data.Iface1? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> iface1 = Iface1.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        iface1 = iface1
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("iface1")
      Iface1.obj().nullable().toResponse(writer, responseAdapterCache, value.iface1)
    }

    object Iface1 : ResponseAdapter<TestQuery.Data.Iface1> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Iface1 {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Impl1",
          -> Impl1Iface1.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherIface1.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Iface1
      ) {
        when(value) {
          is TestQuery.Data.Impl1Iface1 -> Impl1Iface1.toResponse(writer, responseAdapterCache,
              value)
          is TestQuery.Data.OtherIface1 -> OtherIface1.toResponse(writer, responseAdapterCache,
              value)
        }
      }
    }

    object Impl1Iface1 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.Impl1Iface1 {
        var __typename: String? = __typename
        var iface2: TestQuery.Data.Impl1Iface1.Iface2? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> iface2 = Iface2.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Impl1Iface1(
          __typename = __typename!!,
          iface2 = iface2
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Impl1Iface1
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("iface2")
        Iface2.obj().nullable().toResponse(writer, responseAdapterCache, value.iface2)
      }

      object Iface2 : ResponseAdapter<TestQuery.Data.Impl1Iface1.Iface2> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Impl1Iface1.Iface2 {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherIface2.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Impl1Iface1.Iface2
        ) {
          when(value) {
            is TestQuery.Data.Impl1Iface1.Impl2Iface2 -> Impl2Iface2.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.Impl1Iface1.OtherIface2 -> OtherIface2.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object Impl2Iface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2", "scalar3",
            "scalar4")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.Impl1Iface1.Impl2Iface2 {
          var __typename: String? = __typename
          var scalar1: String? = null
          var scalar2: String? = null
          var scalar3: String? = null
          var scalar4: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> scalar1 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              2 -> scalar2 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              3 -> scalar3 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              4 -> scalar4 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Impl1Iface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar2 = scalar2,
            scalar3 = scalar3,
            scalar4 = scalar4
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Impl1Iface1.Impl2Iface2
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("scalar1")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar1)
          writer.name("scalar2")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar2)
          writer.name("scalar3")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar3)
          writer.name("scalar4")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar4)
        }
      }

      object OtherIface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.Impl1Iface1.OtherIface2 {
          var __typename: String? = __typename
          var scalar1: String? = null
          var scalar3: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> scalar1 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              2 -> scalar3 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Impl1Iface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar3 = scalar3
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Impl1Iface1.OtherIface2
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("scalar1")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar1)
          writer.name("scalar3")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar3)
        }
      }
    }

    object OtherIface1 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherIface1 {
        var __typename: String? = __typename
        var iface2: TestQuery.Data.OtherIface1.Iface2? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> iface2 = Iface2.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherIface1(
          __typename = __typename!!,
          iface2 = iface2
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherIface1
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("iface2")
        Iface2.obj().nullable().toResponse(writer, responseAdapterCache, value.iface2)
      }

      object Iface2 : ResponseAdapter<TestQuery.Data.OtherIface1.Iface2> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.OtherIface1.Iface2 {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherIface2.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.OtherIface1.Iface2
        ) {
          when(value) {
            is TestQuery.Data.OtherIface1.Impl2Iface2 -> Impl2Iface2.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.OtherIface1.OtherIface2 -> OtherIface2.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object Impl2Iface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.OtherIface1.Impl2Iface2 {
          var __typename: String? = __typename
          var scalar1: String? = null
          var scalar2: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> scalar1 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              2 -> scalar2 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.OtherIface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = scalar1,
            scalar2 = scalar2
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.OtherIface1.Impl2Iface2
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("scalar1")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar1)
          writer.name("scalar2")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar2)
        }
      }

      object OtherIface2 {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.OtherIface1.OtherIface2 {
          var __typename: String? = __typename
          var scalar1: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> scalar1 = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.OtherIface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = scalar1
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.OtherIface1.OtherIface2
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("scalar1")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.scalar1)
        }
      }
    }
  }
}
