// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.arguments_hardcoded.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.intResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.apollographql.apollo.exception.UnexpectedNullValue
import com.example.arguments_hardcoded.TestQuery
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestQuery.Data> {
  val reviewsAdapter: ResponseAdapter<List<TestQuery.Data.Review?>?> =
      NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Review(customScalarAdapters))))

  val testNullableArgumentsAdapter: ResponseAdapter<Int> = intResponseAdapter

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var reviews: List<TestQuery.Data.Review?>? = null
    var testNullableArguments: Int? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> reviews = reviewsAdapter.fromResponse(reader)
        1 -> testNullableArguments = testNullableArgumentsAdapter.fromResponse(reader) ?: throw
            UnexpectedNullValue("testNullableArguments")
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      reviews = reviews,
      testNullableArguments = testNullableArguments!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    reviewsAdapter.toResponse(writer, value.reviews)
    testNullableArgumentsAdapter.toResponse(writer, value.testNullableArguments)
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("Review")),
        responseName = "reviews",
        fieldName = "reviews",
        arguments = mapOf<String, Any?>(
          "episode" to "JEDI",
          "starsInt" to 10,
          "starsFloat" to 9.9),
        conditions = emptyList(),
        fieldSets = listOf(
          ResponseField.FieldSet(null, Review.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Int")),
        responseName = "testNullableArguments",
        fieldName = "testNullableArguments",
        arguments = mapOf<String, Any?>(
          "int" to null,
          "string" to null,
          "float" to null,
          "review" to null,
          "episode" to null,
          "boolean" to null,
          "list" to null),
        conditions = emptyList(),
        fieldSets = emptyList(),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Review(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.Review> {
    val starsAdapter: ResponseAdapter<Int> = intResponseAdapter

    val commentaryAdapter: ResponseAdapter<String?> = NullableResponseAdapter(stringResponseAdapter)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Review {
      var stars: Int? = null
      var commentary: String? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> stars = starsAdapter.fromResponse(reader) ?: throw UnexpectedNullValue("stars")
          1 -> commentary = commentaryAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return TestQuery.Data.Review(
        stars = stars!!,
        commentary = commentary
      )
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Review) {
      starsAdapter.toResponse(writer, value.stars)
      commentaryAdapter.toResponse(writer, value.commentary)
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Int")),
          responseName = "stars",
          fieldName = "stars",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          responseName = "commentary",
          fieldName = "commentary",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }
}
