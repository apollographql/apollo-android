//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.arguments_hardcoded.adapter

import com.apollographql.apollo3.api.IntResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.arguments_hardcoded.TestQuery
import kotlin.Int
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("reviews", "testNullableArguments")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var reviews: List<TestQuery.Data.Reviews?>? = null
      var testNullableArguments: Int? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> reviews = Reviews.nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          1 -> testNullableArguments = IntResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        reviews = reviews,
        testNullableArguments = testNullableArguments!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("reviews")
      Reviews.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.reviews)
      writer.name("testNullableArguments")
      IntResponseAdapter.toResponse(writer, responseAdapterCache, value.testNullableArguments)
    }

    object Reviews : ResponseAdapter<TestQuery.Data.Reviews> {
      val RESPONSE_NAMES: List<String> = listOf("stars", "commentary")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Reviews {
        var stars: Int? = null
        var commentary: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> stars = IntResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> commentary = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Reviews(
          stars = stars!!,
          commentary = commentary
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Reviews
      ) {
        writer.name("stars")
        IntResponseAdapter.toResponse(writer, responseAdapterCache, value.stars)
        writer.name("commentary")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.commentary)
      }
    }
  }
}
