//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo3.api.NullableBooleanResponseAdapter
import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestOperation_ResponseAdapter {
  object Data : ResponseAdapter<TestOperation.Data> {
    val RESPONSE_NAMES: List<String> = listOf("random")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestOperation.Data {
      var random: TestOperation.Data.Random? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> random = Random.obj().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestOperation.Data(
        random = random!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestOperation.Data
    ) {
      writer.name("random")
      Random.obj().toResponse(writer, responseAdapterCache, value.random)
    }

    object Random : ResponseAdapter<TestOperation.Data.Random> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestOperation.Data.Random {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> BeingHumanRandom.fromResponse(reader, responseAdapterCache, __typename)
          "Wookie",
          -> BeingWookieRandom.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherRandom.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random
      ) {
        when(value) {
          is TestOperation.Data.BeingHumanRandom -> BeingHumanRandom.toResponse(writer,
              responseAdapterCache, value)
          is TestOperation.Data.BeingWookieRandom -> BeingWookieRandom.toResponse(writer,
              responseAdapterCache, value)
          is TestOperation.Data.OtherRandom -> OtherRandom.toResponse(writer, responseAdapterCache,
              value)
        }
      }
    }

    object BeingHumanRandom {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends",
          "profilePictureUrl")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): TestOperation.Data.BeingHumanRandom {
        var __typename: String? = typename
        var name: String? = null
        var friends: List<TestOperation.Data.BeingHumanRandom.Friend>? = null
        var profilePictureUrl: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friend.obj().list().fromResponse(reader, responseAdapterCache)
            3 -> profilePictureUrl = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.BeingHumanRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          profilePictureUrl = profilePictureUrl
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.BeingHumanRandom
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friend.obj().list().toResponse(writer, responseAdapterCache, value.friends)
        writer.name("profilePictureUrl")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.profilePictureUrl)
      }

      object Friend : ResponseAdapter<TestOperation.Data.BeingHumanRandom.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.BeingHumanRandom.Friend {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherFriend.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingHumanRandom.Friend
        ) {
          when(value) {
            is TestOperation.Data.BeingHumanRandom.WookieFriend -> WookieFriend.toResponse(writer,
                responseAdapterCache, value)
            is TestOperation.Data.BeingHumanRandom.OtherFriend -> OtherFriend.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object WookieFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy",
            "isFamous", "race")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestOperation.Data.BeingHumanRandom.WookieFriend {
          var __typename: String? = typename
          var name: String? = null
          var lifeExpectancy: Double? = null
          var isFamous: Boolean? = null
          var race: Race? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              3 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              4 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.BeingHumanRandom.WookieFriend(
            __typename = __typename!!,
            name = name!!,
            lifeExpectancy = lifeExpectancy,
            isFamous = isFamous,
            race = race!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingHumanRandom.WookieFriend
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("lifeExpectancy")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
              value.lifeExpectancy)
          writer.name("isFamous")
          NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache, value.isFamous)
          writer.name("race")
          Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
        }
      }

      object OtherFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestOperation.Data.BeingHumanRandom.OtherFriend {
          var __typename: String? = typename
          var name: String? = null
          var isFamous: Boolean? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.BeingHumanRandom.OtherFriend(
            __typename = __typename!!,
            name = name!!,
            isFamous = isFamous
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingHumanRandom.OtherFriend
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("isFamous")
          NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache, value.isFamous)
        }
      }
    }

    object BeingWookieRandom {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends", "race")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): TestOperation.Data.BeingWookieRandom {
        var __typename: String? = typename
        var name: String? = null
        var friends: List<TestOperation.Data.BeingWookieRandom.Friend>? = null
        var race: Race? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friend.obj().list().fromResponse(reader, responseAdapterCache)
            3 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.BeingWookieRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          race = race!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.BeingWookieRandom
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friend.obj().list().toResponse(writer, responseAdapterCache, value.friends)
        writer.name("race")
        Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
      }

      object Friend : ResponseAdapter<TestOperation.Data.BeingWookieRandom.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.BeingWookieRandom.Friend {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherFriend.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingWookieRandom.Friend
        ) {
          when(value) {
            is TestOperation.Data.BeingWookieRandom.WookieFriend -> WookieFriend.toResponse(writer,
                responseAdapterCache, value)
            is TestOperation.Data.BeingWookieRandom.OtherFriend -> OtherFriend.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object WookieFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestOperation.Data.BeingWookieRandom.WookieFriend {
          var __typename: String? = typename
          var name: String? = null
          var lifeExpectancy: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.BeingWookieRandom.WookieFriend(
            __typename = __typename!!,
            name = name!!,
            lifeExpectancy = lifeExpectancy
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingWookieRandom.WookieFriend
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("lifeExpectancy")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
              value.lifeExpectancy)
        }
      }

      object OtherFriend {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestOperation.Data.BeingWookieRandom.OtherFriend {
          var __typename: String? = typename
          var name: String? = null
          var lifeExpectancy: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.BeingWookieRandom.OtherFriend(
            __typename = __typename!!,
            name = name!!,
            lifeExpectancy = lifeExpectancy
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.BeingWookieRandom.OtherFriend
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("lifeExpectancy")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
              value.lifeExpectancy)
        }
      }
    }

    object OtherRandom {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): TestOperation.Data.OtherRandom {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.OtherRandom(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.OtherRandom
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
