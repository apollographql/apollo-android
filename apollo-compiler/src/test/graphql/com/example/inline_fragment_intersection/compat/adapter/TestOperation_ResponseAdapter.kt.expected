//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestOperation_ResponseAdapter {
  object Data : Adapter<TestOperation.Data> {
    val RESPONSE_NAMES: List<String> = listOf("random")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var random: TestOperation.Random? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> random = Random.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        random = random!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestOperation.Data
    ) {
      writer.name("random")
      Random.obj(true).toJson(writer, customScalarAdapters, value.random)
    }

    object Random : Adapter<TestOperation.Random> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Random {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asBeing: TestOperation.AsBeing? = null
        if (possibleTypes("Human","Wookie").evaluate(emptySet(), __typename)) {
          asBeing = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var asWookie: TestOperation.AsWookie2? = null
        if (possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
          asWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsWookie.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Random(
          __typename = __typename,
          asBeing = asBeing,
          asWookie = asWookie
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestOperation.Random
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.asBeing != null) {
          com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.toJson(writer,
              customScalarAdapters, value.asBeing)
        }

        if (value.asWookie != null) {
          com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsWookie.toJson(writer,
              customScalarAdapters, value.asWookie)
        }
      }

      object AsBeing : Adapter<TestOperation.AsBeing> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestOperation.AsBeing {
          var __typename: String? = null
          var name: String? = null
          var friends: List<TestOperation.Friend>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> friends = Friend.obj(true).list().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var asHuman: TestOperation.AsHuman? = null
          if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
            asHuman = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.AsHuman.fromJson(reader,
                customScalarAdapters)
          }

          return TestOperation.AsBeing(
            __typename = __typename,
            name = name!!,
            friends = friends!!,
            asHuman = asHuman
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestOperation.AsBeing
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("friends")
          Friend.obj(true).list().toJson(writer, customScalarAdapters, value.friends)

          if (value.asHuman != null) {
            com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.AsHuman.toJson(writer,
                customScalarAdapters, value.asHuman)
          }
        }

        object Friend : Adapter<TestOperation.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.Friend {
            var __typename: String? = null
            var name: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            var asWookie: TestOperation.AsWookie? = null
            if (possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
              asWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.Friend.AsWookie.fromJson(reader,
                  customScalarAdapters)
            }

            return TestOperation.Friend(
              __typename = __typename,
              name = name!!,
              asWookie = asWookie
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.Friend
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)

            if (value.asWookie != null) {
              com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.Friend.AsWookie.toJson(writer,
                  customScalarAdapters, value.asWookie)
            }
          }

          object AsWookie : Adapter<TestOperation.AsWookie> {
            val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy", "__typename", "name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestOperation.AsWookie {
              var lifeExpectancy: Double? = null
              var __typename: String? = null
              var name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                  1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestOperation.AsWookie(
                lifeExpectancy = lifeExpectancy,
                __typename = __typename!!,
                name = name!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestOperation.AsWookie
            ) {
              writer.name("lifeExpectancy")
              NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)

              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }

        object AsHuman : Adapter<TestOperation.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("profilePictureUrl", "friends", "__typename",
              "name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.AsHuman {
            var profilePictureUrl: String? = null
            var friends: List<TestOperation.Friend1>? = null
            var __typename: String? = null
            var name: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> profilePictureUrl = NullableStringAdapter.fromJson(reader,
                    customScalarAdapters)
                1 -> friends = Friend.obj(true).list().fromJson(reader, customScalarAdapters)
                2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                3 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestOperation.AsHuman(
              profilePictureUrl = profilePictureUrl,
              friends = friends!!,
              __typename = __typename!!,
              name = name!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.AsHuman
          ) {
            writer.name("profilePictureUrl")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.profilePictureUrl)

            writer.name("friends")
            Friend.obj(true).list().toJson(writer, customScalarAdapters, value.friends)

            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)
          }

          object Friend : Adapter<TestOperation.Friend1> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "isFamous", "name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestOperation.Friend1 {
              var __typename: String? = null
              var isFamous: Boolean? = null
              var name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
                  2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              check(__typename != null) {
                "__typename was not found"
              }

              reader.rewind()
              var asWookie: TestOperation.AsWookie1? = null
              if (possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
                asWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.AsHuman.Friend.AsWookie.fromJson(reader,
                    customScalarAdapters)
              }

              return TestOperation.Friend1(
                __typename = __typename,
                isFamous = isFamous,
                name = name!!,
                asWookie = asWookie
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestOperation.Friend1
            ) {
              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

              writer.name("isFamous")
              NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)

              if (value.asWookie != null) {
                com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.AsBeing.AsHuman.Friend.AsWookie.toJson(writer,
                    customScalarAdapters, value.asWookie)
              }
            }

            object AsWookie : Adapter<TestOperation.AsWookie1> {
              val RESPONSE_NAMES: List<String> = listOf("race", "lifeExpectancy", "__typename",
                  "isFamous", "name")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                  TestOperation.AsWookie1 {
                var race: Race? = null
                var lifeExpectancy: Double? = null
                var __typename: String? = null
                var isFamous: Boolean? = null
                var name: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
                    1 -> lifeExpectancy = NullableDoubleAdapter.fromJson(reader,
                        customScalarAdapters)
                    2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                    3 -> isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
                    4 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }

                return TestOperation.AsWookie1(
                  race = race!!,
                  lifeExpectancy = lifeExpectancy,
                  __typename = __typename!!,
                  isFamous = isFamous,
                  name = name!!
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                value: TestOperation.AsWookie1
              ) {
                writer.name("race")
                Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)

                writer.name("lifeExpectancy")
                NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)

                writer.name("__typename")
                StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

                writer.name("isFamous")
                NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

                writer.name("name")
                StringAdapter.toJson(writer, customScalarAdapters, value.name)
              }
            }
          }
        }
      }

      object AsWookie : Adapter<TestOperation.AsWookie2> {
        val RESPONSE_NAMES: List<String> = listOf("race", "friends", "__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestOperation.AsWookie2 {
          var race: Race? = null
          var friends: List<TestOperation.Friend2>? = null
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
              1 -> friends = Friend.obj().list().fromJson(reader, customScalarAdapters)
              2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.AsWookie2(
            race = race!!,
            friends = friends!!,
            __typename = __typename!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestOperation.AsWookie2
        ) {
          writer.name("race")
          Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)

          writer.name("friends")
          Friend.obj().list().toJson(writer, customScalarAdapters, value.friends)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }

        object Friend : Adapter<TestOperation.Friend2> {
          val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.Friend2 {
            var lifeExpectancy: Double? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestOperation.Friend2(
              lifeExpectancy = lifeExpectancy
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.Friend2
          ) {
            writer.name("lifeExpectancy")
            NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
          }
        }
      }
    }
  }
}
