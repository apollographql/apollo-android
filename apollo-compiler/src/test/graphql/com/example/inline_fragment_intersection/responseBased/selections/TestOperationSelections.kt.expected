//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.selections

import com.apollographql.apollo3.api.CompiledCompoundType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledOtherType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.collections.List

private val onWookie: List<CompiledSelection> = listOf(
      CompiledField(
        name = "lifeExpectancy",
        type = CompiledOtherType("unused")
      )
    )

private val friends: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Wookie",
        selections = onWookie
      )
    )

private val onWookie1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "race",
        type = CompiledOtherType("unused").notNull()
      )
    )

private val friends1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "isFamous",
        type = CompiledOtherType("unused")
      ),
      CompiledFragment(
        typeCondition = "Wookie",
        selections = onWookie1
      )
    )

private val onHuman: List<CompiledSelection> = listOf(
      CompiledField(
        name = "profilePictureUrl",
        type = CompiledOtherType("unused")
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").notNull().list().notNull(),
        selections = onWookie1
      )
    )

private val onBeing: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "name",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").notNull().list().notNull(),
        selections = onWookie
      ),
      CompiledFragment(
        typeCondition = "Human",
        selections = onWookie1
      )
    )

private val friends2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "lifeExpectancy",
        type = CompiledOtherType("unused")
      )
    )

private val onWookie2: List<CompiledSelection> = listOf(
      CompiledField(
        name = "race",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").notNull().list().notNull(),
        selections = friends2
      )
    )

private val onWookie3: List<CompiledSelection> = listOf(
      CompiledField(
        name = "lifeExpectancy",
        type = CompiledOtherType("unused")
      )
    )

private val friends3: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Wookie",
        selections = onWookie3
      )
    )

private val onBeing1: List<CompiledSelection> = listOf(
      CompiledField(
        name = "friends",
        type = CompiledCompoundType("unused").notNull().list().notNull(),
        selections = onWookie3
      )
    )

private val random: List<CompiledSelection> = listOf(
      CompiledField(
        name = "__typename",
        type = CompiledOtherType("unused").notNull()
      ),
      CompiledFragment(
        typeCondition = "Being",
        selections = onWookie
      ),
      CompiledFragment(
        typeCondition = "Wookie",
        selections = friends2
      ),
      CompiledFragment(
        typeCondition = "Being",
        selections = onWookie3
      )
    )

val TestOperationSelections: List<CompiledSelection> = listOf(
      CompiledField(
        name = "random",
        type = CompiledCompoundType("unused").notNull(),
        selections = onWookie
      )
    )
