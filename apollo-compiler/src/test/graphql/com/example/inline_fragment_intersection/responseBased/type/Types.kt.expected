//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.type

import com.apollographql.apollo3.api.CompiledNamedType
import com.apollographql.apollo3.api.CompiledType
import com.apollographql.apollo3.api.CustomScalarType
import com.apollographql.apollo3.api.EnumType
import com.apollographql.apollo3.api.InterfaceType
import com.apollographql.apollo3.api.ObjectType
import com.apollographql.apollo3.api.UnionType
import com.apollographql.apollo3.api.possibleTypes
import kotlin.collections.List

/**
 * Auto generated constants representing the custom scalars, objects, interfaces and unions in the
 * schema. Input objects are left out because they are generated separately
 */
object Types {
  val Long: CustomScalarType = CustomScalarType("Long", "kotlin.Any")

  val Sport: EnumType = EnumType("Sport")

  val Episode: EnumType = EnumType("Episode")

  val Race: EnumType = EnumType("Race")

  val Character: InterfaceType = InterfaceType(name = "Character")

  val Thing: InterfaceType = InterfaceType(name = "Thing")

  val Being: InterfaceType = InterfaceType(name = "Being")

  val Alien: InterfaceType = InterfaceType(name = "Alien")

  val AbstractWookie: InterfaceType = InterfaceType(name = "AbstractWookie")

  val Droid: ObjectType = ObjectType(name = "Droid", implements = listOf(Character, Thing))

  val Human: ObjectType = ObjectType(name = "Human", implements = listOf(Being, Character))

  val Wookie: ObjectType = ObjectType(name = "Wookie", implements = listOf(AbstractWookie, Alien,
      Being, Character))

  val Ship: ObjectType = ObjectType(name = "Ship", implements = listOf(Thing))

  val TypeWithAllSortsOfFields: ObjectType = ObjectType(name = "TypeWithAllSortsOfFields")

  val MerlinQuery: ObjectType = ObjectType(name = "MerlinQuery")

  val MerlinHomesPdpResponse: ObjectType = ObjectType(name = "MerlinHomesPdpResponse")

  val MerlinPdpListingDetailForNativeResponse: ObjectType = ObjectType(name =
      "MerlinPdpListingDetailForNativeResponse")

  val MerlinPdpListingDescriptionNestedWithinListing: ObjectType = ObjectType(name =
      "MerlinPdpListingDescriptionNestedWithinListing")

  val Query: ObjectType = ObjectType(name = "Query")

  val Mutation: ObjectType = ObjectType(name = "Mutation")

  val Anything: UnionType = UnionType("Anything", Human, Wookie, Droid, Ship)

  val all: List<CompiledType> = listOf(
        Long, Sport, Episode, Race, Character, Thing, Being, Alien, AbstractWookie, Droid, Human,
            Wookie, Ship, TypeWithAllSortsOfFields, MerlinQuery, MerlinHomesPdpResponse,
            MerlinPdpListingDetailForNativeResponse, MerlinPdpListingDescriptionNestedWithinListing,
            Query, Mutation, Anything)


  fun possibleTypes(type: CompiledNamedType): List<ObjectType> = possibleTypes(all, type)
}
