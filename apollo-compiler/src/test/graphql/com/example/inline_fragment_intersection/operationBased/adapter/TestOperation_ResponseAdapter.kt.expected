//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestOperation_ResponseAdapter {
  object Data : Adapter<TestOperation.Data> {
    val RESPONSE_NAMES: List<String> = listOf("random")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var random: TestOperation.Data.Random? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> random = Random.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestOperation.Data(
        random = random!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestOperation.Data
    ) {
      writer.name("random")
      Random.obj(true).toJson(writer, customScalarAdapters, value.random)
    }

    object Random : Adapter<TestOperation.Data.Random> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.Random {
        var __typename: String? = null
        var onBeing: TestOperation.Data.Random.OnBeing? = null
        var onWookie: TestOperation.Data.Random.OnWookie? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        check(__typename != null) {
          "__typename was not found"
        }
        if(possibleTypes("Human","Wookie").evaluate(emptySet(), __typename)) {
          reader.rewind()
          onBeing = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.fromJson(reader,
              customScalarAdapters)
        }

        if(possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
          reader.rewind()
          onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnWookie.fromJson(reader,
              customScalarAdapters)
        }
        return TestOperation.Data.Random(
          __typename = __typename!!,
          onBeing = onBeing,
          onWookie = onWookie
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestOperation.Data.Random
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onBeing != null) {
          com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.toJson(writer,
              customScalarAdapters, value.onBeing)
        }

        if (value.onWookie != null) {
          com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnWookie.toJson(writer,
              customScalarAdapters, value.onWookie)
        }
      }

      object OnBeing : Adapter<TestOperation.Data.Random.OnBeing> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestOperation.Data.Random.OnBeing {
          var __typename: String? = null
          var name: String? = null
          var friends: List<TestOperation.Data.Random.OnBeing.Friend>? = null
          var onHuman: TestOperation.Data.Random.OnBeing.OnHuman? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> friends = Friend.obj(true).list().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          check(__typename != null) {
            "__typename was not found"
          }
          if(possibleTypes("Human").evaluate(emptySet(), __typename)) {
            reader.rewind()
            onHuman = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.OnHuman.fromJson(reader,
                customScalarAdapters)
          }
          return TestOperation.Data.Random.OnBeing(
            __typename = __typename!!,
            name = name!!,
            friends = friends!!,
            onHuman = onHuman
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestOperation.Data.Random.OnBeing
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("friends")
          Friend.obj(true).list().toJson(writer, customScalarAdapters, value.friends)

          if (value.onHuman != null) {
            com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.OnHuman.toJson(writer,
                customScalarAdapters, value.onHuman)
          }
        }

        object Friend : Adapter<TestOperation.Data.Random.OnBeing.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.Data.Random.OnBeing.Friend {
            var __typename: String? = null
            var name: String? = null
            var onWookie: TestOperation.Data.Random.OnBeing.Friend.OnWookie? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }
            check(__typename != null) {
              "__typename was not found"
            }
            if(possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
              reader.rewind()
              onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.Friend.OnWookie.fromJson(reader,
                  customScalarAdapters)
            }
            return TestOperation.Data.Random.OnBeing.Friend(
              __typename = __typename!!,
              name = name!!,
              onWookie = onWookie
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.Data.Random.OnBeing.Friend
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)

            if (value.onWookie != null) {
              com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.Friend.OnWookie.toJson(writer,
                  customScalarAdapters, value.onWookie)
            }
          }

          object OnWookie : Adapter<TestOperation.Data.Random.OnBeing.Friend.OnWookie> {
            val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Random.OnBeing.Friend.OnWookie {
              var lifeExpectancy: Double? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }
              return TestOperation.Data.Random.OnBeing.Friend.OnWookie(
                lifeExpectancy = lifeExpectancy
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestOperation.Data.Random.OnBeing.Friend.OnWookie
            ) {
              writer.name("lifeExpectancy")
              NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
            }
          }
        }

        object OnHuman : Adapter<TestOperation.Data.Random.OnBeing.OnHuman> {
          val RESPONSE_NAMES: List<String> = listOf("profilePictureUrl", "friends")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.Data.Random.OnBeing.OnHuman {
            var profilePictureUrl: String? = null
            var friends: List<TestOperation.Data.Random.OnBeing.OnHuman.Friend>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> profilePictureUrl = NullableStringAdapter.fromJson(reader,
                    customScalarAdapters)
                1 -> friends = Friend.obj(true).list().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }
            return TestOperation.Data.Random.OnBeing.OnHuman(
              profilePictureUrl = profilePictureUrl,
              friends = friends!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.Data.Random.OnBeing.OnHuman
          ) {
            writer.name("profilePictureUrl")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.profilePictureUrl)

            writer.name("friends")
            Friend.obj(true).list().toJson(writer, customScalarAdapters, value.friends)
          }

          object Friend : Adapter<TestOperation.Data.Random.OnBeing.OnHuman.Friend> {
            val RESPONSE_NAMES: List<String> = listOf("__typename", "isFamous")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Random.OnBeing.OnHuman.Friend {
              var __typename: String? = null
              var isFamous: Boolean? = null
              var onWookie: TestOperation.Data.Random.OnBeing.OnHuman.Friend.OnWookie? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }
              check(__typename != null) {
                "__typename was not found"
              }
              if(possibleTypes("Wookie").evaluate(emptySet(), __typename)) {
                reader.rewind()
                onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.OnHuman.Friend.OnWookie.fromJson(reader,
                    customScalarAdapters)
              }
              return TestOperation.Data.Random.OnBeing.OnHuman.Friend(
                __typename = __typename!!,
                isFamous = isFamous,
                onWookie = onWookie
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestOperation.Data.Random.OnBeing.OnHuman.Friend
            ) {
              writer.name("__typename")
              StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

              writer.name("isFamous")
              NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

              if (value.onWookie != null) {
                com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.Data.Random.OnBeing.OnHuman.Friend.OnWookie.toJson(writer,
                    customScalarAdapters, value.onWookie)
              }
            }

            object OnWookie : Adapter<TestOperation.Data.Random.OnBeing.OnHuman.Friend.OnWookie> {
              val RESPONSE_NAMES: List<String> = listOf("race")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                  TestOperation.Data.Random.OnBeing.OnHuman.Friend.OnWookie {
                var race: Race? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }
                return TestOperation.Data.Random.OnBeing.OnHuman.Friend.OnWookie(
                  race = race!!
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                value: TestOperation.Data.Random.OnBeing.OnHuman.Friend.OnWookie
              ) {
                writer.name("race")
                Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)
              }
            }
          }
        }
      }

      object OnWookie : Adapter<TestOperation.Data.Random.OnWookie> {
        val RESPONSE_NAMES: List<String> = listOf("race", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestOperation.Data.Random.OnWookie {
          var race: Race? = null
          var friends: List<TestOperation.Data.Random.OnWookie.Friend>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
              1 -> friends = Friend.obj().list().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestOperation.Data.Random.OnWookie(
            race = race!!,
            friends = friends!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestOperation.Data.Random.OnWookie
        ) {
          writer.name("race")
          Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)

          writer.name("friends")
          Friend.obj().list().toJson(writer, customScalarAdapters, value.friends)
        }

        object Friend : Adapter<TestOperation.Data.Random.OnWookie.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestOperation.Data.Random.OnWookie.Friend {
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }
            return TestOperation.Data.Random.OnWookie.Friend(
              lifeExpectancy = lifeExpectancy
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestOperation.Data.Random.OnWookie.Friend
          ) {
            writer.name("lifeExpectancy")
            NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
          }
        }
      }
    }
  }
}
