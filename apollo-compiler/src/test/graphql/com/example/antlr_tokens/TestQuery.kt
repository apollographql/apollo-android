// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.antlr_tokens

import com.apollographql.apollo.api.Input
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
data class TestQuery(
  val operation: Input<String> = Input.absent()
) : Query<TestQuery.Data, TestQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      if (this@TestQuery.operation.defined) {
        this["operation"] = this@TestQuery.operation.value
      }
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      if (this@TestQuery.operation.defined) {
        writer.writeString("operation", this@TestQuery.operation.value)
      }
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class TypeWithGraphQLKeywords(
    val __typename: String = "TypeWithGraphQLKeywords",
    val on: String?,
    val null_: String?,
    val alias: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller.invoke { writer ->
        writer.writeString(RESPONSE_FIELDS[0], this@TypeWithGraphQLKeywords.__typename)
        writer.writeString(RESPONSE_FIELDS[1], this@TypeWithGraphQLKeywords.on)
        writer.writeString(RESPONSE_FIELDS[2], this@TypeWithGraphQLKeywords.null_)
        writer.writeString(RESPONSE_FIELDS[3], this@TypeWithGraphQLKeywords.alias)
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forString("on", "on", null, true, null),
        ResponseField.forString("null", "null", mapOf<String, Any>(
          "fragment" to mapOf<String, Any>(
            "kind" to "Variable",
            "variableName" to "operation")), true, null),
        ResponseField.forString("alias", "null", mapOf<String, Any>(
          "fragment" to """
          |A string
          |with a new line
          |""".trimMargin()), true, null)
      )

      operator fun invoke(reader: ResponseReader, __typename: String? = null):
          TypeWithGraphQLKeywords {
        return reader.run {
          var __typename: String? = __typename
          var on: String? = null
          var null_: String? = null
          var alias: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> on = readString(RESPONSE_FIELDS[1])
              2 -> null_ = readString(RESPONSE_FIELDS[2])
              3 -> alias = readString(RESPONSE_FIELDS[3])
              else -> break
            }
          }
          TypeWithGraphQLKeywords(
            __typename = __typename!!,
            on = on,
            null_ = null_,
            alias = alias
          )
        }
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<TypeWithGraphQLKeywords> = ResponseFieldMapper { invoke(it)
          }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val typeWithGraphQLKeywords: TypeWithGraphQLKeywords?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller.invoke { writer ->
        writer.writeObject(RESPONSE_FIELDS[0], this@Data.typeWithGraphQLKeywords?.marshaller())
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forObject("typeWithGraphQLKeywords", "typeWithGraphQLKeywords", null, true,
            null)
      )

      operator fun invoke(reader: ResponseReader, __typename: String? = null): Data {
        return reader.run {
          var typeWithGraphQLKeywords: TypeWithGraphQLKeywords? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> typeWithGraphQLKeywords = readObject<TypeWithGraphQLKeywords>(RESPONSE_FIELDS[0]) { reader ->
                TypeWithGraphQLKeywords(reader)
              }
              else -> break
            }
          }
          Data(
            typeWithGraphQLKeywords = typeWithGraphQLKeywords
          )
        }
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "5ac5029cd74c32a45d6bbbe43e34f696e1a603331ea6164c01b2c1d8768fcb04"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery(${'$'}operation: String) {
          |  typeWithGraphQLKeywords {
          |    __typename
          |    on
          |    null(fragment: ${'$'}operation)
          |    alias: null(fragment: ""${'"'}A string
          |    with a new line
          |    ""${'"'})
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "TestQuery"
    }
  }
}
