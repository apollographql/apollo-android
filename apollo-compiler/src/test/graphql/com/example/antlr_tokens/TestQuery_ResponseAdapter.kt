// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.antlr_tokens

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
internal object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forObject("typeWithGraphQLKeywords", "typeWithGraphQLKeywords", null, true, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var typeWithGraphQLKeywords: TestQuery.TypeWithGraphQLKeywords? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> typeWithGraphQLKeywords = readObject<TestQuery.TypeWithGraphQLKeywords>(RESPONSE_FIELDS[0]) { reader ->
            TestQuery_ResponseAdapter.TypeWithGraphQLKeywords_ResponseAdapter.fromResponse(reader)
          }
          else -> break
        }
      }
      TestQuery.Data(
        typeWithGraphQLKeywords = typeWithGraphQLKeywords
      )
    }
  }

  object TypeWithGraphQLKeywords_ResponseAdapter :
      ResponseAdapter<TestQuery.TypeWithGraphQLKeywords> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("on", "on", null, true, null),
      ResponseField.forString("null", "null", mapOf<String, Any>(
        "fragment" to mapOf<String, Any>(
          "kind" to "Variable",
          "variableName" to "operation")), true, null),
      ResponseField.forString("alias", "null", mapOf<String, Any>(
        "fragment" to """
        |A string
        |with a new line
        |""".trimMargin()), true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.TypeWithGraphQLKeywords {
      return reader.run {
        var __typename: String? = __typename
        var on: String? = null
        var null_: String? = null
        var alias: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> on = readString(RESPONSE_FIELDS[1])
            2 -> null_ = readString(RESPONSE_FIELDS[2])
            3 -> alias = readString(RESPONSE_FIELDS[3])
            else -> break
          }
        }
        TestQuery.TypeWithGraphQLKeywords(
          __typename = __typename!!,
          on = on,
          null_ = null_,
          alias = alias
        )
      }
    }
  }
}
