//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.antlr_tokens.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.antlr_tokens.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("typeWithGraphQLKeywords")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var typeWithGraphQLKeywords: TestQuery.Data.TypeWithGraphQLKeywords? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> typeWithGraphQLKeywords = TypeWithGraphQLKeywords.obj().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        typeWithGraphQLKeywords = typeWithGraphQLKeywords
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("typeWithGraphQLKeywords")
      TypeWithGraphQLKeywords.obj().nullable().toJson(writer, customScalarAdapters,
          value.typeWithGraphQLKeywords)
    }

    object TypeWithGraphQLKeywords : Adapter<TestQuery.Data.TypeWithGraphQLKeywords> {
      val RESPONSE_NAMES: List<String> = listOf("on", "null", "alias")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.TypeWithGraphQLKeywords {
        var on: String? = null
        var null_: String? = null
        var alias: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> on = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            1 -> null_ = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            2 -> alias = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.TypeWithGraphQLKeywords(
          on = on,
          null_ = null_,
          alias = alias
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.TypeWithGraphQLKeywords
      ) {
        writer.name("on")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.on)

        writer.name("null")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.null_)

        writer.name("alias")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.alias)
      }
    }
  }
}
