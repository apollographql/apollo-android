//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.not_all_combinations_are_needed.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.not_all_combinations_are_needed.TestQuery
import com.example.not_all_combinations_are_needed.fragment.BFragment
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("root")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var root: TestQuery.Root? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> root = Root.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        root = root
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("root")
      Root.obj(true).nullable().toJson(writer, customScalarAdapters, value.root)
    }

    object Root : Adapter<TestQuery.Root> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Root {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asA: TestQuery.AsA? = null
        if (possibleTypes("ABC").evaluate(emptySet(), __typename)) {
          asA = com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Root(
          __typename = __typename,
          asA = asA
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Root
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.asA != null) {
          com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.toJson(writer,
              customScalarAdapters, value.asA)
        }
      }

      object AsA : Adapter<TestQuery.AsA> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsA {
          var __typename: String? = null
          var fieldA1: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> fieldA1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var asB: TestQuery.AsB? = null
          if (possibleTypes("ABC","SomeBC").evaluate(emptySet(), __typename)) {
            asB = com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.AsB.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.AsA(
            __typename = __typename,
            fieldA1 = fieldA1,
            asB = asB
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsA
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("fieldA1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1)

          if (value.asB != null) {
            com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.AsB.toJson(writer,
                customScalarAdapters, value.asB)
          }
        }

        object AsB : Adapter<TestQuery.AsB> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.AsB {
            var __typename: String? = null
            var fieldA1: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> fieldA1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val fragments = com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.AsB.Fragments.fromJson(reader,
                customScalarAdapters)

            return TestQuery.AsB(
              __typename = __typename,
              fieldA1 = fieldA1,
              fragments = fragments
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.AsB
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("fieldA1")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1)

            com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter.Data.Root.AsA.AsB.Fragments.toJson(writer,
                customScalarAdapters, value.fragments)
          }

          object Fragments : Adapter<TestQuery.AsB.Fragments> {
            val RESPONSE_NAMES: List<String> = listOf("__typename")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                TestQuery.AsB.Fragments {
              var __typename: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              check(__typename != null) {
                "__typename was not found"
              }

              reader.rewind()
              var bFragment: BFragment? = null
              if (possibleTypes("ABC","SomeBC").evaluate(emptySet(), __typename)) {
                bFragment = com.example.not_all_combinations_are_needed.fragment.BFragmentImpl_ResponseAdapter.BFragment.fromJson(reader,
                    customScalarAdapters)
              }

              return TestQuery.AsB.Fragments(
                bFragment = bFragment
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: TestQuery.AsB.Fragments
            ) {
              if (value.bFragment != null) {
                com.example.not_all_combinations_are_needed.fragment.BFragmentImpl_ResponseAdapter.BFragment.toJson(writer,
                    customScalarAdapters, value.bFragment)
              }
            }
          }
        }
      }
    }
  }
}
