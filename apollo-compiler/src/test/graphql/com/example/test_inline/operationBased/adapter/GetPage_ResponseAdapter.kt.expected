//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

object GetPage_ResponseAdapter {
  object Data : Adapter<GetPage.Data> {
    val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Data {
      var collection: GetPage.Data.Collection? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> collection = Collection.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.Data(
        collection = collection!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Data
    ) {
      writer.name("collection")
      Collection.obj(true).toJson(writer, customScalarAdapters, value.collection)
    }

    object Collection : Adapter<GetPage.Data.Collection> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          GetPage.Data.Collection {
        var __typename: String? = null
        var items: List<GetPage.Data.Collection.Item>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> items = Item.obj().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onParticularCollection: GetPage.Data.Collection.OnParticularCollection? = null
        if (possibleTypes("ParticularCollection").evaluate(emptySet(), __typename)) {
          onParticularCollection = com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.fromJson(reader,
              customScalarAdapters)
        }

        return GetPage.Data.Collection(
          __typename = __typename,
          items = items!!,
          onParticularCollection = onParticularCollection
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: GetPage.Data.Collection
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, customScalarAdapters, value.items)

        if (value.onParticularCollection != null) {
          com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.toJson(writer,
              customScalarAdapters, value.onParticularCollection)
        }
      }

      object Item : Adapter<GetPage.Data.Collection.Item> {
        val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            GetPage.Data.Collection.Item {
          var title: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetPage.Data.Collection.Item(
            title = title!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.Collection.Item
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, customScalarAdapters, value.title)
        }
      }

      object OnParticularCollection : Adapter<GetPage.Data.Collection.OnParticularCollection> {
        val RESPONSE_NAMES: List<String> = listOf("items")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            GetPage.Data.Collection.OnParticularCollection {
          var items: List<GetPage.Data.Collection.OnParticularCollection.Item>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> items = Item.obj(true).list().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetPage.Data.Collection.OnParticularCollection(
            items = items!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.Collection.OnParticularCollection
        ) {
          writer.name("items")
          Item.obj(true).list().toJson(writer, customScalarAdapters, value.items)
        }

        object Item : Adapter<GetPage.Data.Collection.OnParticularCollection.Item> {
          val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              GetPage.Data.Collection.OnParticularCollection.Item {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            var onParticularItem: GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem? = null
            if (possibleTypes("ParticularItem").evaluate(emptySet(), __typename)) {
              onParticularItem = com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.Item.OnParticularItem.fromJson(reader,
                  customScalarAdapters)
            }

            return GetPage.Data.Collection.OnParticularCollection.Item(
              __typename = __typename,
              onParticularItem = onParticularItem
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: GetPage.Data.Collection.OnParticularCollection.Item
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.onParticularItem != null) {
              com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.Item.OnParticularItem.toJson(writer,
                  customScalarAdapters, value.onParticularItem)
            }
          }

          object OnParticularItem :
              Adapter<GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem> {
            val RESPONSE_NAMES: List<String> = listOf("image")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
                GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem {
              var image: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> image = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem(
                image = image!!
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              value: GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem
            ) {
              writer.name("image")
              StringAdapter.toJson(writer, customScalarAdapters, value.image)
            }
          }
        }
      }
    }
  }
}
