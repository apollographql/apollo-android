//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

object GetPage_ResponseAdapter {
  object Data : ResponseAdapter<GetPage.Data> {
    val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetPage.Data {
      var collection: GetPage.Data.Collection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> collection = Collection.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return GetPage.Data(
        collection = collection!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetPage.Data
    ) {
      writer.name("collection")
      Collection.toResponse(writer, responseAdapterCache, value.collection)
    }

    object Collection : ResponseAdapter<GetPage.Data.Collection> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items", "asParticularCollection")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetPage.Data.Collection {
        var __typename: String? = null
        var items: List<GetPage.Data.Collection.Items>? = null
        var asParticularCollection: GetPage.Data.Collection.AsParticularCollection? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.list().fromResponse(reader, responseAdapterCache)
            2 -> asParticularCollection = AsParticularCollection.nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.Collection(
          __typename = __typename!!,
          items = items!!,
          asParticularCollection = asParticularCollection
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.list().toResponse(writer, responseAdapterCache, value.items)
        writer.name("asParticularCollection")
        AsParticularCollection.nullable().toResponse(writer, responseAdapterCache,
            value.asParticularCollection)
      }

      object Items : ResponseAdapter<GetPage.Data.Collection.Items> {
        val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.Collection.Items {
          var title: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.Collection.Items(
            title = title!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.Collection.Items
        ) {
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
        }
      }

      object AsParticularCollection :
          ResponseAdapter<GetPage.Data.Collection.AsParticularCollection> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.Collection.AsParticularCollection {
          var __typename: String? = null
          var items: List<GetPage.Data.Collection.AsParticularCollection.Items>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> items = Items.list().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.Collection.AsParticularCollection(
            __typename = __typename!!,
            items = items!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.Collection.AsParticularCollection
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("items")
          Items.list().toResponse(writer, responseAdapterCache, value.items)
        }

        object Items : ResponseAdapter<GetPage.Data.Collection.AsParticularCollection.Items> {
          val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "asParticularItem")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              GetPage.Data.Collection.AsParticularCollection.Items {
            var title: String? = null
            var __typename: String? = null
            var asParticularItem: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> asParticularItem = AsParticularItem.nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return GetPage.Data.Collection.AsParticularCollection.Items(
              title = title!!,
              __typename = __typename!!,
              asParticularItem = asParticularItem
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetPage.Data.Collection.AsParticularCollection.Items
          ) {
            writer.name("title")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("asParticularItem")
            AsParticularItem.nullable().toResponse(writer, responseAdapterCache,
                value.asParticularItem)
          }

          object AsParticularItem :
              ResponseAdapter<GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem>
              {
            val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem {
              var title: String? = null
              var __typename: String? = null
              var image: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> image = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem(
                title = title!!,
                __typename = __typename!!,
                image = image!!
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem
            ) {
              writer.name("title")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("image")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.image)
            }
          }
        }
      }
    }
  }
}
