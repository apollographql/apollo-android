// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.test_inline.GetPage
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class GetPage_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<GetPage.Data> {
  private val collectionAdapter: ResponseAdapter<GetPage.Data.Collection> =
      Collection(responseAdapterCache)

  override fun fromResponse(reader: JsonReader): GetPage.Data {
    var collection: GetPage.Data.Collection? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> collection = collectionAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return GetPage.Data(
      collection = collection!!
    )
  }

  override fun toResponse(writer: JsonWriter, value: GetPage.Data) {
    writer.beginObject()
    writer.name("collection")
    collectionAdapter.toResponse(writer, value.collection)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Collection")),
        fieldName = "collection",
        fieldSets = listOf(
          ResponseField.FieldSet("ParticularCollection",
              Collection.AsParticularCollection.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Collection(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<GetPage.Data.Collection> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val listOfItemsAdapter: ResponseAdapter<List<GetPage.Data.Collection.Items>> =
        ListResponseAdapter(Items(responseAdapterCache))

    private val AsParticularCollectionAdapter: AsParticularCollection =
        com.example.test_inline.adapter.GetPage_ResponseAdapter.Collection.AsParticularCollection(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): GetPage.Data.Collection {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var items: List<GetPage.Data.Collection.Items>? = null
      var asAsParticularCollection: GetPage.Data.Collection.AsParticularCollection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> items = listOfItemsAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("ParticularCollection")) {
        reader.rewind()
        asAsParticularCollection = AsParticularCollectionAdapter.fromResponse(reader, __typename)
      }

      return GetPage.Data.Collection(
        __typename = __typename!!,
        items = items!!,
        asAsParticularCollection = asAsParticularCollection
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: GetPage.Data.Collection) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)

      writer.name("items")
      listOfItemsAdapter.toResponse(writer, value.items)
      if (value.asAsParticularCollection != null) AsParticularCollectionAdapter.toResponse(writer,
          value.asAsParticularCollection)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
          fieldName = "items",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Items.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Items(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<GetPage.Data.Collection.Items> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      override fun fromResponse(reader: JsonReader): GetPage.Data.Collection.Items {
        var title: String? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> title = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return GetPage.Data.Collection.Items(
          title = title!!
        )
      }

      override fun toResponse(writer: JsonWriter, value: GetPage.Data.Collection.Items) {
        writer.beginObject()
        writer.name("title")
        stringAdapter.toResponse(writer, value.title)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "title",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }

    class AsParticularCollection(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val listOfItemsAdapter:
          ResponseAdapter<List<GetPage.Data.Collection.AsParticularCollection.Items>> =
          ListResponseAdapter(Items(responseAdapterCache))

      fun fromResponse(reader: JsonReader, __typename: String?):
          GetPage.Data.Collection.AsParticularCollection {
        var __typename: String? = __typename
        var items: List<GetPage.Data.Collection.AsParticularCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> items = listOfItemsAdapter.fromResponse(reader)
            else -> break
          }
        }
        return GetPage.Data.Collection.AsParticularCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toResponse(writer: JsonWriter, value: GetPage.Data.Collection.AsParticularCollection) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("items")
        listOfItemsAdapter.toResponse(writer, value.items)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
            fieldName = "items",
            fieldSets = listOf(
              ResponseField.FieldSet("ParticularItem", Items.AsParticularItem.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Items(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<GetPage.Data.Collection.AsParticularCollection.Items> {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val AsParticularItemAdapter: AsParticularItem =
            com.example.test_inline.adapter.GetPage_ResponseAdapter.Collection.AsParticularCollection.Items.AsParticularItem(responseAdapterCache)

        override fun fromResponse(reader: JsonReader):
            GetPage.Data.Collection.AsParticularCollection.Items {
          val reader = reader.buffer()
          reader.beginObject()

          var title: String? = null
          var __typename: String? = null
          var asAsParticularItem: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = stringAdapter.fromResponse(reader)
              1 -> __typename = stringAdapter.fromResponse(reader)
              else -> break
            }
          }
          if (__typename in arrayOf("ParticularItem")) {
            reader.rewind()
            asAsParticularItem = AsParticularItemAdapter.fromResponse(reader, __typename)
          }

          return GetPage.Data.Collection.AsParticularCollection.Items(
            title = title!!,
            __typename = __typename!!,
            asAsParticularItem = asAsParticularItem
          )
          .also { reader.endObject() }
        }

        override fun toResponse(writer: JsonWriter,
            value: GetPage.Data.Collection.AsParticularCollection.Items) {
          writer.beginObject()
          writer.name("title")
          stringAdapter.toResponse(writer, value.title)

          writer.name("__typename")
          stringAdapter.toResponse(writer, value.__typename)
          if (value.asAsParticularItem != null) AsParticularItemAdapter.toResponse(writer,
              value.asAsParticularItem)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "title",
            ),
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class AsParticularItem(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          fun fromResponse(reader: JsonReader, __typename: String?):
              GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem {
            var __typename: String? = __typename
            var image: String? = null
            var title: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> image = stringAdapter.fromResponse(reader)
                2 -> title = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            return GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem(
              __typename = __typename!!,
              image = image!!,
              title = title!!
            )
          }

          fun toResponse(writer: JsonWriter,
              value: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("image")
            stringAdapter.toResponse(writer, value.image)
            writer.name("title")
            stringAdapter.toResponse(writer, value.title)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "image",
              ),
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "title",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }
}
