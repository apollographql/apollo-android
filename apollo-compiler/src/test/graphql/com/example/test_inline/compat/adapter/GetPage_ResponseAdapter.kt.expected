//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

object GetPage_ResponseAdapter {
  object Data : Adapter<GetPage.Data> {
    val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Data {
      var collection: GetPage.Collection? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> collection = Collection.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.Data(
        collection = collection!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Data
    ) {
      writer.name("collection")
      Collection.obj(true).toJson(writer, customScalarAdapters, value.collection)
    }
  }

  object Collection : Adapter<GetPage.Collection> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Collection {
      var __typename: String? = null
      var items: List<GetPage.Item>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> items = Item.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asParticularCollection: GetPage.AsParticularCollection? = null
      if (possibleTypes("ParticularCollection").evaluate(emptySet(), __typename)) {
        asParticularCollection = com.example.test_inline.adapter.GetPage_ResponseAdapter.AsParticularCollection.fromJson(reader,
            customScalarAdapters)
      }

      return GetPage.Collection(
        __typename = __typename,
        items = items!!,
        asParticularCollection = asParticularCollection
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Collection
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("items")
      Item.obj().list().toJson(writer, customScalarAdapters, value.items)

      if (value.asParticularCollection != null) {
        com.example.test_inline.adapter.GetPage_ResponseAdapter.AsParticularCollection.toJson(writer,
            customScalarAdapters, value.asParticularCollection)
      }
    }
  }

  object Item : Adapter<GetPage.Item> {
    val RESPONSE_NAMES: List<String> = listOf("title")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Item {
      var title: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.Item(
        title = title!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Item
    ) {
      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)
    }
  }

  object AsParticularCollection : Adapter<GetPage.AsParticularCollection> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.AsParticularCollection {
      var __typename: String? = null
      var items: List<GetPage.Item1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> items = Item1.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.AsParticularCollection(
        __typename = __typename!!,
        items = items!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.AsParticularCollection
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("items")
      Item1.obj(true).list().toJson(writer, customScalarAdapters, value.items)
    }
  }

  object Item1 : Adapter<GetPage.Item1> {
    val RESPONSE_NAMES: List<String> = listOf("title", "__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Item1 {
      var title: String? = null
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asParticularItem: GetPage.AsParticularItem? = null
      if (possibleTypes("ParticularItem").evaluate(emptySet(), __typename)) {
        asParticularItem = com.example.test_inline.adapter.GetPage_ResponseAdapter.AsParticularItem.fromJson(reader,
            customScalarAdapters)
      }

      return GetPage.Item1(
        title = title!!,
        __typename = __typename,
        asParticularItem = asParticularItem
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Item1
    ) {
      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asParticularItem != null) {
        com.example.test_inline.adapter.GetPage_ResponseAdapter.AsParticularItem.toJson(writer,
            customScalarAdapters, value.asParticularItem)
      }
    }
  }

  object AsParticularItem : Adapter<GetPage.AsParticularItem> {
    val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.AsParticularItem {
      var title: String? = null
      var __typename: String? = null
      var image: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> image = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.AsParticularItem(
        title = title!!,
        __typename = __typename!!,
        image = image!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.AsParticularItem
    ) {
      writer.name("title")
      StringAdapter.toJson(writer, customScalarAdapters, value.title)

      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("image")
      StringAdapter.toJson(writer, customScalarAdapters, value.image)
    }
  }
}
