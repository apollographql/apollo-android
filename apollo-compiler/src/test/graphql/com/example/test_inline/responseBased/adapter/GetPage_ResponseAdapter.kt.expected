//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

object GetPage_ResponseAdapter {
  object Data : Adapter<GetPage.Data> {
    val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetPage.Data {
      var collection: GetPage.Data.Collection? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> collection = Collection.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetPage.Data(
        collection = collection!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetPage.Data
    ) {
      writer.name("collection")
      Collection.obj().toJson(writer, customScalarAdapters, value.collection)
    }

    object Collection : Adapter<GetPage.Data.Collection> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          GetPage.Data.Collection {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "ParticularCollection",
          -> ParticularCollectionCollection.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherCollection.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: GetPage.Data.Collection
      ) {
        when(value) {
          is GetPage.Data.ParticularCollectionCollection ->
              ParticularCollectionCollection.toJson(writer, customScalarAdapters, value)
          is GetPage.Data.OtherCollection -> OtherCollection.toJson(writer, customScalarAdapters,
              value)
        }
      }
    }

    object ParticularCollectionCollection {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): GetPage.Data.ParticularCollectionCollection {
        var __typename: String? = typename
        var items: List<GetPage.Data.ParticularCollectionCollection.Item>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> items = Item.obj().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetPage.Data.ParticularCollectionCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: GetPage.Data.ParticularCollectionCollection
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, customScalarAdapters, value.items)
      }

      object Item : Adapter<GetPage.Data.ParticularCollectionCollection.Item> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            GetPage.Data.ParticularCollectionCollection.Item {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "ParticularItem",
            -> ParticularItemItem.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherItem.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.ParticularCollectionCollection.Item
        ) {
          when(value) {
            is GetPage.Data.ParticularCollectionCollection.ParticularItemItem ->
                ParticularItemItem.toJson(writer, customScalarAdapters, value)
            is GetPage.Data.ParticularCollectionCollection.OtherItem -> OtherItem.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      object ParticularItemItem {
        val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): GetPage.Data.ParticularCollectionCollection.ParticularItemItem {
          var title: String? = null
          var __typename: String? = typename
          var image: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> image = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.ParticularItemItem(
            title = title!!,
            __typename = __typename!!,
            image = image!!
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.ParticularCollectionCollection.ParticularItemItem
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, customScalarAdapters, value.title)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("image")
          StringAdapter.toJson(writer, customScalarAdapters, value.image)
        }
      }

      object OtherItem {
        val RESPONSE_NAMES: List<String> = listOf("title", "__typename")

        fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String
        ): GetPage.Data.ParticularCollectionCollection.OtherItem {
          var title: String? = null
          var __typename: String? = typename

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.OtherItem(
            title = title!!,
            __typename = __typename!!
          )
        }

        fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.ParticularCollectionCollection.OtherItem
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, customScalarAdapters, value.title)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }
      }
    }

    object OtherCollection {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): GetPage.Data.OtherCollection {
        var __typename: String? = typename
        var items: List<GetPage.Data.OtherCollection.Item>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> items = Item.obj().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetPage.Data.OtherCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: GetPage.Data.OtherCollection
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, customScalarAdapters, value.items)
      }

      object Item : Adapter<GetPage.Data.OtherCollection.Item> {
        val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            GetPage.Data.OtherCollection.Item {
          var title: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetPage.Data.OtherCollection.Item(
            title = title!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: GetPage.Data.OtherCollection.Item
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, customScalarAdapters, value.title)
        }
      }
    }
  }
}
