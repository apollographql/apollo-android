//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.responsefields

import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.MergedField
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import kotlin.Array

object GetPage_ResponseFields {
  val fields: Array<MergedField> = arrayOf(
    MergedField(
      type = MergedField.Type.Named.Object("unused"),
      fieldName = "data",
      fieldSets = listOf(
        FieldSet(null, Data.fields),
      ),
    ),
  )


  object Data {
    val fields: Array<MergedField> = arrayOf(
      MergedField(
        type = MergedField.Type.Named.Object("unused").notNull(),
        fieldName = "collection",
        fieldSets = listOf(
          FieldSet(null, Collection.fields),
          FieldSet("ParticularCollection", ParticularCollectionCollection.fields),
        ),
      ),
    )


    object Collection {
      val fields: Array<MergedField> = arrayOf(
        MergedField.Typename,
        MergedField(
          type = MergedField.Type.Named.Object("unused").notNull().list().notNull(),
          fieldName = "items",
          fieldSets = listOf(
            FieldSet(null, Item.fields),
          ),
        ),
      )


      object Item {
        val fields: Array<MergedField> = arrayOf(
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "title",
          ),
        )

      }
    }

    object ParticularCollectionCollection {
      val fields: Array<MergedField> = arrayOf(
        MergedField.Typename,
        MergedField(
          type = MergedField.Type.Named.Object("unused").notNull().list().notNull(),
          fieldName = "items",
          fieldSets = listOf(
            FieldSet(null, Item.fields),
            FieldSet("ParticularItem", ParticularItemItem.fields),
          ),
        ),
      )


      object Item {
        val fields: Array<MergedField> = arrayOf(
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "title",
          ),
          MergedField.Typename,
        )

      }

      object ParticularItemItem {
        val fields: Array<MergedField> = arrayOf(
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "title",
          ),
          MergedField.Typename,
          MergedField(
            type = MergedField.Type.Named.Other("unused").notNull(),
            fieldName = "image",
          ),
        )

      }
    }
  }
}
