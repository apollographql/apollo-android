//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

object GetPage_ResponseAdapter {
  object Data : ResponseAdapter<GetPage.Data> {
    val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetPage.Data {
      var collection: GetPage.Data.Collection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> collection = Collection.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return GetPage.Data(
        collection = collection!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetPage.Data
    ) {
      writer.name("collection")
      Collection.toResponse(writer, responseAdapterCache, value.collection)
    }

    object Collection : ResponseAdapter<GetPage.Data.Collection> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetPage.Data.Collection {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "ParticularCollection",
          -> ParticularCollectionCollection.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherCollection.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection
      ) {
        when(value) {
          is GetPage.Data.ParticularCollectionCollection ->
              ParticularCollectionCollection.toResponse(writer, responseAdapterCache, value)
          is GetPage.Data.OtherCollection -> OtherCollection.toResponse(writer,
              responseAdapterCache, value)
        }
      }
    }

    object OtherCollection {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): GetPage.Data.OtherCollection {
        var __typename: String? = __typename
        var items: List<GetPage.Data.OtherCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.OtherCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.OtherCollection
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.list().toResponse(writer, responseAdapterCache, value.items)
      }

      object Items : ResponseAdapter<GetPage.Data.OtherCollection.Items> {
        val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.OtherCollection.Items {
          var title: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.OtherCollection.Items(
            title = title!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.OtherCollection.Items
        ) {
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
        }
      }
    }

    object ParticularCollectionCollection {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): GetPage.Data.ParticularCollectionCollection {
        var __typename: String? = __typename
        var items: List<GetPage.Data.ParticularCollectionCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.ParticularCollectionCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.ParticularCollectionCollection
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.list().toResponse(writer, responseAdapterCache, value.items)
      }

      object Items : ResponseAdapter<GetPage.Data.ParticularCollectionCollection.Items> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.ParticularCollectionCollection.Items {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "ParticularItem",
            -> ParticularItemItems.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherItems.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.ParticularCollectionCollection.Items
        ) {
          when(value) {
            is GetPage.Data.ParticularCollectionCollection.ParticularItemItems ->
                ParticularItemItems.toResponse(writer, responseAdapterCache, value)
            is GetPage.Data.ParticularCollectionCollection.OtherItems ->
                OtherItems.toResponse(writer, responseAdapterCache, value)
          }
        }
      }

      object OtherItems {
        val RESPONSE_NAMES: List<String> = listOf("title", "__typename")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): GetPage.Data.ParticularCollectionCollection.OtherItems {
          var title: String? = null
          var __typename: String? = __typename
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.ParticularCollectionCollection.OtherItems(
            title = title!!,
            __typename = __typename!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.ParticularCollectionCollection.OtherItems
        ) {
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        }
      }

      object ParticularItemItems {
        val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): GetPage.Data.ParticularCollectionCollection.ParticularItemItems {
          var title: String? = null
          var __typename: String? = __typename
          var image: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> image = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.ParticularCollectionCollection.ParticularItemItems(
            title = title!!,
            __typename = __typename!!,
            image = image!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.ParticularCollectionCollection.ParticularItemItems
        ) {
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("image")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.image)
        }
      }
    }
  }
}
