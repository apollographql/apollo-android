// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.mutation_create_review.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.mutation_create_review.CreateReviewForEpisode
import com.example.mutation_create_review.type.CustomScalarType
import com.example.mutation_create_review.type.Episode
import java.util.Date
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
internal object CreateReviewForEpisode_ResponseAdapter :
    ResponseAdapter<CreateReviewForEpisode.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forObject("createReview", "createReview", mapOf<String, Any?>(
      "episode" to mapOf<String, Any?>(
        "kind" to "Variable",
        "variableName" to "ep"),
      "review" to mapOf<String, Any?>(
        "kind" to "Variable",
        "variableName" to "review")), true, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?):
      CreateReviewForEpisode.Data {
    return Data.fromResponse(reader, __typename)
  }

  override fun toResponse(writer: ResponseWriter, value: CreateReviewForEpisode.Data) {
    Data.toResponse(writer, value)
  }

  object Data : ResponseAdapter<CreateReviewForEpisode.Data> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forObject("createReview", "createReview", mapOf<String, Any?>(
        "episode" to mapOf<String, Any?>(
          "kind" to "Variable",
          "variableName" to "ep"),
        "review" to mapOf<String, Any?>(
          "kind" to "Variable",
          "variableName" to "review")), true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        CreateReviewForEpisode.Data {
      return reader.run {
        var createReview: CreateReviewForEpisode.Data.CreateReview? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> createReview = readObject<CreateReviewForEpisode.Data.CreateReview>(RESPONSE_FIELDS[0]) { reader ->
              CreateReview.fromResponse(reader)
            }
            else -> break
          }
        }
        CreateReviewForEpisode.Data(
          createReview = createReview
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: CreateReviewForEpisode.Data) {
      if(value.createReview == null) {
        writer.writeObject(RESPONSE_FIELDS[0], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
          CreateReview.toResponse(writer, value.createReview)
        }
      }
    }

    object CreateReview : ResponseAdapter<CreateReviewForEpisode.Data.CreateReview> {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forInt("stars", "stars", null, false, null),
        ResponseField.forString("commentary", "commentary", null, true, null),
        ResponseField.forList("listOfListOfString", "listOfListOfString", null, true, null),
        ResponseField.forList("listOfListOfEnum", "listOfListOfEnum", null, true, null),
        ResponseField.forList("listOfListOfCustom", "listOfListOfCustom", null, true, null),
        ResponseField.forList("listOfListOfObject", "listOfListOfObject", null, true, null)
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          CreateReviewForEpisode.Data.CreateReview {
        return reader.run {
          var stars: Int? = null
          var commentary: String? = null
          var listOfListOfString: List<List<String>>? = null
          var listOfListOfEnum: List<List<Episode>>? = null
          var listOfListOfCustom: List<List<Date>>? = null
          var listOfListOfObject: List<List<CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject>>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> stars = readInt(RESPONSE_FIELDS[0])
              1 -> commentary = readString(RESPONSE_FIELDS[1])
              2 -> listOfListOfString = readList<List<String>>(RESPONSE_FIELDS[2]) { reader ->
                reader.readList<String> { reader ->
                  reader.readString()
                }.map { it!! }
              }?.map { it!! }
              3 -> listOfListOfEnum = readList<List<Episode>>(RESPONSE_FIELDS[3]) { reader ->
                reader.readList<Episode> { reader ->
                  Episode.safeValueOf(reader.readString())
                }.map { it!! }
              }?.map { it!! }
              4 -> listOfListOfCustom = readList<List<Date>>(RESPONSE_FIELDS[4]) { reader ->
                reader.readList<Date> { reader ->
                  reader.readCustomScalar<Date>(CustomScalarType.Date)
                }.map { it!! }
              }?.map { it!! }
              5 -> listOfListOfObject = readList<List<CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject>>(RESPONSE_FIELDS[5]) { reader ->
                reader.readList<CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject> { reader ->
                  reader.readObject<CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject> { reader ->
                    ListOfListOfObject.fromResponse(reader)
                  }
                }.map { it!! }
              }?.map { it!! }
              else -> break
            }
          }
          CreateReviewForEpisode.Data.CreateReview(
            stars = stars!!,
            commentary = commentary,
            listOfListOfString = listOfListOfString,
            listOfListOfEnum = listOfListOfEnum,
            listOfListOfCustom = listOfListOfCustom,
            listOfListOfObject = listOfListOfObject
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: CreateReviewForEpisode.Data.CreateReview) {
        writer.writeInt(RESPONSE_FIELDS[0], value.stars)
        writer.writeString(RESPONSE_FIELDS[1], value.commentary)
        writer.writeList(RESPONSE_FIELDS[2], value.listOfListOfString) { values, listItemWriter ->
          values?.forEach { value ->
            listItemWriter.writeList(value) { value, listItemWriter ->
              value?.forEach { value ->
                listItemWriter.writeString(value)}
            }
          }
        }
        writer.writeList(RESPONSE_FIELDS[3], value.listOfListOfEnum) { values, listItemWriter ->
          values?.forEach { value ->
            listItemWriter.writeList(value) { value, listItemWriter ->
              value?.forEach { value ->
                listItemWriter.writeString(value.rawValue)}
            }
          }
        }
        writer.writeList(RESPONSE_FIELDS[4], value.listOfListOfCustom) { values, listItemWriter ->
          values?.forEach { value ->
            listItemWriter.writeList(value) { value, listItemWriter ->
              value?.forEach { value ->
                listItemWriter.writeCustom(CustomScalarType.Date, value)}
            }
          }
        }
        writer.writeList(RESPONSE_FIELDS[5], value.listOfListOfObject) { values, listItemWriter ->
          values?.forEach { value ->
            listItemWriter.writeList(value) { value, listItemWriter ->
              value?.forEach { value ->
                listItemWriter.writeObject { writer ->
                  ListOfListOfObject.toResponse(writer, value)
                }
              }
            }
          }
        }
      }

      object ListOfListOfObject :
          ResponseAdapter<CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject> {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("name", "name", null, false, null)
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject {
          return reader.run {
            var name: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> name = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject(
              name = name!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: CreateReviewForEpisode.Data.CreateReview.ListOfListOfObject) {
          writer.writeString(RESPONSE_FIELDS[0], value.name)
        }
      }
    }
  }
}
