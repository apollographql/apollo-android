//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragments_with_friends.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragments_with_friends.TestQuery
import com.example.inline_fragments_with_friends.type.Episode
import com.example.inline_fragments_with_friends.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    object Hero : Adapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onHuman: TestQuery.Data.Hero.OnHuman? = null
        if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
          onHuman = com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var onDroid: TestQuery.Data.Hero.OnDroid? = null
        if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
          onDroid = com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Data.Hero(
          __typename = __typename,
          name = name!!,
          onHuman = onHuman,
          onDroid = onDroid
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Hero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        if (value.onHuman != null) {
          com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }

        if (value.onDroid != null) {
          com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.toJson(writer,
              customScalarAdapters, value.onDroid)
        }
      }

      object OnHuman : Adapter<TestQuery.Data.Hero.OnHuman> {
        val RESPONSE_NAMES: List<String> = listOf("height", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Hero.OnHuman {
          var height: Double? = null
          var friends: List<TestQuery.Data.Hero.OnHuman.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              1 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnHuman(
            height = height,
            friends = friends
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Hero.OnHuman
        ) {
          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
              value.friends)
        }

        object Friend : Adapter<TestQuery.Data.Hero.OnHuman.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("appearsIn")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Hero.OnHuman.Friend {
            var appearsIn: List<Episode?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
                    customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnHuman.Friend(
              appearsIn = appearsIn!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.Data.Hero.OnHuman.Friend
          ) {
            writer.name("appearsIn")
            Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
                value.appearsIn)
          }
        }
      }

      object OnDroid : Adapter<TestQuery.Data.Hero.OnDroid> {
        val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Hero.OnDroid {
          var primaryFunction: String? = null
          var friends: List<TestQuery.Data.Hero.OnDroid.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              1 -> friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnDroid(
            primaryFunction = primaryFunction,
            friends = friends
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Hero.OnDroid
        ) {
          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
              value.friends)
        }

        object Friend : Adapter<TestQuery.Data.Hero.OnDroid.Friend> {
          val RESPONSE_NAMES: List<String> = listOf("id")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Hero.OnDroid.Friend {
            var id: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnDroid.Friend(
              id = id!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.Data.Hero.OnDroid.Friend
          ) {
            writer.name("id")
            StringAdapter.toJson(writer, customScalarAdapters, value.id)
          }
        }
      }
    }
  }
}
