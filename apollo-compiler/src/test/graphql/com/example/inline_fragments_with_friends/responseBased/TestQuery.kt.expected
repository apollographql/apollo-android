//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragments_with_friends

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter
import com.example.inline_fragments_with_friends.selections.TestQuerySelections
import com.example.inline_fragments_with_friends.type.Episode
import kotlin.Double
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun selections(): List<CompiledSelection> = TestQuerySelections

  data class Data(
    val hero: Hero?
  ) : Query.Data {
    interface Hero {
      val __typename: String

      /**
       * The name of the character
       */
      val name: String

      companion object {
        fun Hero.asHuman() = this as? HumanHero

        fun Hero.asDroid() = this as? DroidHero
      }
    }

    data class HumanHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * Height in the preferred unit, default is meters
       */
      val height: Double?,
      /**
       * This human's friends, or an empty list if they have none
       */
      val friends: List<Friend?>?
    ) : Hero {
      fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()

      data class Friend(
        /**
         * The movies this character appears in
         */
        val appearsIn: List<Episode?>
      ) {
        fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()
      }
    }

    data class DroidHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * This droid's primary function
       */
      val primaryFunction: String?,
      /**
       * This droid's friends, or an empty list if they have none
       */
      val friends: List<Friend?>?
    ) : Hero {
      fun friendsFilterNotNull(): List<Friend>? = friends?.filterNotNull()

      data class Friend(
        /**
         * The ID of the character
         */
        val id: String
      )
    }

    data class OtherHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String
    ) : Hero
  }

  companion object {
    const val OPERATION_ID: String =
        "43bfea6068cd77041d723551dd119f0676f6c333620dd281a668eca49d14fcb5"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   hero {
     *     __typename
     *     name
     *     ... on Human {
     *       height
     *       friends {
     *         appearsIn
     *       }
     *     }
     *     ... on Droid {
     *       primaryFunction
     *       friends {
     *         id
     *       }
     *     }
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery { hero { __typename name ... on Human { height friends { appearsIn } } ... on Droid { primaryFunction friends { id } } } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
