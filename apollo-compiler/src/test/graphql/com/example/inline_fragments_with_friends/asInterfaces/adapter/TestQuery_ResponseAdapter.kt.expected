//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_fragments_with_friends.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragments_with_friends.TestQuery
import com.example.inline_fragments_with_friends.type.Episode
import com.example.inline_fragments_with_friends.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj().nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanHero.fromResponse(reader, responseAdapterCache, __typename)
          "Droid",
          -> DroidHero.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherHero.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero
      ) {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.DroidHero -> DroidHero.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherHero -> OtherHero.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object HumanHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height", "friends")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.HumanHero {
        var __typename: String? = __typename
        var name: String? = null
        var height: Double? = null
        var friends: List<TestQuery.Data.HumanHero.Friend?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            3 -> friends = Friend.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = name!!,
          height = height,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.HumanHero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        writer.name("friends")
        Friend.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
      }

      object Friend : ResponseAdapter<TestQuery.Data.HumanHero.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("appearsIn")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.HumanHero.Friend {
          var appearsIn: List<Episode?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.HumanHero.Friend(
            appearsIn = appearsIn!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.HumanHero.Friend
        ) {
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
              value.appearsIn)
        }
      }
    }

    object DroidHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction", "friends")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.DroidHero {
        var __typename: String? = __typename
        var name: String? = null
        var primaryFunction: String? = null
        var friends: List<TestQuery.Data.DroidHero.Friend?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            3 -> friends = Friend.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.DroidHero(
          __typename = __typename!!,
          name = name!!,
          primaryFunction = primaryFunction,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.DroidHero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("primaryFunction")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.primaryFunction)
        writer.name("friends")
        Friend.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
      }

      object Friend : ResponseAdapter<TestQuery.Data.DroidHero.Friend> {
        val RESPONSE_NAMES: List<String> = listOf("id")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.DroidHero.Friend {
          var id: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.DroidHero.Friend(
            id = id!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.DroidHero.Friend
        ) {
          writer.name("id")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        }
      }
    }

    object OtherHero {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherHero {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherHero(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherHero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }
  }
}
