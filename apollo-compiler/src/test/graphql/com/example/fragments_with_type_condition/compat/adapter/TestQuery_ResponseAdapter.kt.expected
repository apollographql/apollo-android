//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_type_condition.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.fragments_with_type_condition.TestQuery
import com.example.fragments_with_type_condition.fragment.DroidDetails
import com.example.fragments_with_type_condition.fragment.HumanDetails
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var r2: TestQuery.R2? = null
      var luke: TestQuery.Luke? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> r2 = R2.obj(true).nullable().fromJson(reader, customScalarAdapters)
          1 -> luke = Luke.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        r2 = r2,
        luke = luke
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("r2")
      R2.obj(true).nullable().toJson(writer, customScalarAdapters, value.r2)

      writer.name("luke")
      Luke.obj(true).nullable().toJson(writer, customScalarAdapters, value.luke)
    }
  }

  object R2 : Adapter<TestQuery.R2> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.R2 {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      val fragments = com.example.fragments_with_type_condition.adapter.TestQuery_ResponseAdapter.R2.Fragments.fromJson(reader,
          customScalarAdapters)

      return TestQuery.R2(
        __typename = __typename,
        fragments = fragments
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.R2
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.example.fragments_with_type_condition.adapter.TestQuery_ResponseAdapter.R2.Fragments.toJson(writer,
          customScalarAdapters, value.fragments)
    }

    object Fragments : Adapter<TestQuery.R2.Fragments> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.R2.Fragments {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var humanDetails: HumanDetails? = null
        if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
          humanDetails = com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var droidDetails: DroidDetails? = null
        if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
          droidDetails = com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.R2.Fragments(
          humanDetails = humanDetails,
          droidDetails = droidDetails
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.R2.Fragments
      ) {
        if (value.humanDetails != null) {
          com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.toJson(writer,
              customScalarAdapters, value.humanDetails)
        }

        if (value.droidDetails != null) {
          com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.toJson(writer,
              customScalarAdapters, value.droidDetails)
        }
      }
    }
  }

  object Luke : Adapter<TestQuery.Luke> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Luke {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      val fragments = com.example.fragments_with_type_condition.adapter.TestQuery_ResponseAdapter.Luke.Fragments.fromJson(reader,
          customScalarAdapters)

      return TestQuery.Luke(
        __typename = __typename,
        fragments = fragments
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Luke
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.example.fragments_with_type_condition.adapter.TestQuery_ResponseAdapter.Luke.Fragments.toJson(writer,
          customScalarAdapters, value.fragments)
    }

    object Fragments : Adapter<TestQuery.Luke.Fragments> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Luke.Fragments {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var humanDetails: HumanDetails? = null
        if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
          humanDetails = com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var droidDetails: DroidDetails? = null
        if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
          droidDetails = com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Luke.Fragments(
          humanDetails = humanDetails,
          droidDetails = droidDetails
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Luke.Fragments
      ) {
        if (value.humanDetails != null) {
          com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.toJson(writer,
              customScalarAdapters, value.humanDetails)
        }

        if (value.droidDetails != null) {
          com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.toJson(writer,
              customScalarAdapters, value.droidDetails)
        }
      }
    }
  }
}
