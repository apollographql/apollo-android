// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragments_with_type_condition.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.example.fragments_with_type_condition.TestQuery
import com.example.fragments_with_type_condition.fragment.DroidDetails
import com.example.fragments_with_type_condition.fragment.HumanDetails
import com.example.fragments_with_type_condition.fragment.adapter.DroidDetails_ResponseAdapter
import com.example.fragments_with_type_condition.fragment.adapter.HumanDetails_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      responseName = "r2",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", HumanDetails_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Droid", DroidDetails_ResponseAdapter.RESPONSE_FIELDS),
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      responseName = "luke",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", HumanDetails_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Droid", DroidDetails_ResponseAdapter.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    reader.beginObject()
    var r2: TestQuery.Data.R2? = null
    var luke: TestQuery.Data.Luke? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> r2 = R2.nullable().fromResponse(reader, responseAdapterCache)
        1 -> luke = Luke.nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      r2 = r2,
      luke = luke
    )
    reader.endObject()
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("r2")
    R2.nullable().toResponse(writer, responseAdapterCache, value.r2)
    writer.name("luke")
    Luke.nullable().toResponse(writer, responseAdapterCache, value.luke)
    writer.endObject()
  }

  object R2 : ResponseAdapter<TestQuery.Data.R2> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.R2 {
      reader.beginObject()
      val reader = reader.buffer()
      var __typename: String? = null

      var humanDetails: HumanDetails.Data? = null
      var droidDetails: DroidDetails.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        reader.rewind()
        humanDetails = HumanDetails_ResponseAdapter.fromFields(reader, responseAdapterCache)
      }
      if (__typename in arrayOf("Droid")) {
        reader.rewind()
        droidDetails = DroidDetails_ResponseAdapter.fromFields(reader, responseAdapterCache)
      }

      return TestQuery.Data.R2(
        __typename = __typename!!,
        humanDetails = humanDetails,
        droidDetails = droidDetails
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.R2
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.humanDetails != null)
          HumanDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.humanDetails)
      if (value.droidDetails != null)
          DroidDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.droidDetails)
      writer.endObject()
    }
  }

  object Luke : ResponseAdapter<TestQuery.Data.Luke> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Luke {
      reader.beginObject()
      val reader = reader.buffer()
      var __typename: String? = null

      var humanDetails: HumanDetails.Data? = null
      var droidDetails: DroidDetails.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        reader.rewind()
        humanDetails = HumanDetails_ResponseAdapter.fromFields(reader, responseAdapterCache)
      }
      if (__typename in arrayOf("Droid")) {
        reader.rewind()
        droidDetails = DroidDetails_ResponseAdapter.fromFields(reader, responseAdapterCache)
      }

      return TestQuery.Data.Luke(
        __typename = __typename!!,
        humanDetails = humanDetails,
        droidDetails = droidDetails
      )
      reader.endObject()
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Luke
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.humanDetails != null)
          HumanDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.humanDetails)
      if (value.droidDetails != null)
          DroidDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.droidDetails)
      writer.endObject()
    }
  }
}
