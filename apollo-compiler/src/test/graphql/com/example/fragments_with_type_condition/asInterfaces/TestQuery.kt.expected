//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.fragments_with_type_condition

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragments_with_type_condition.adapter.TestQuery_ResponseAdapter
import com.example.fragments_with_type_condition.fragment.HumanDetails
import com.example.fragments_with_type_condition.responsefields.TestQuery_ResponseFields
import kotlin.Double
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val r2: R2?,
    val luke: Luke?
  ) : Query.Data {
    interface R2 {
      val __typename: String

      companion object {
        fun R2.asDroidR2() = this as? DroidR2

        fun R2.asHumanR2() = this as? HumanR2

        fun R2.humanDetails() = this as? HumanDetails
      }
    }

    data class OtherR2(
      override val __typename: String
    ) : R2

    data class DroidR2(
      override val __typename: String,
      /**
       * What others call this droid
       */
      val name: String,
      /**
       * This droid's primary function
       */
      val primaryFunction: String?
    ) : R2

    data class HumanR2(
      override val __typename: String,
      /**
       * What this human calls themselves
       */
      override val name: String,
      /**
       * Height in the preferred unit, default is meters
       */
      override val height: Double?
    ) : HumanDetails, R2

    interface Luke {
      val __typename: String

      companion object {
        fun Luke.asDroidLuke() = this as? DroidLuke

        fun Luke.asHumanLuke() = this as? HumanLuke

        fun Luke.humanDetails() = this as? HumanDetails
      }
    }

    data class OtherLuke(
      override val __typename: String
    ) : Luke

    data class DroidLuke(
      override val __typename: String,
      /**
       * What others call this droid
       */
      val name: String,
      /**
       * This droid's primary function
       */
      val primaryFunction: String?
    ) : Luke

    data class HumanLuke(
      override val __typename: String,
      /**
       * What this human calls themselves
       */
      override val name: String,
      /**
       * Height in the preferred unit, default is meters
       */
      override val height: Double?
    ) : HumanDetails, Luke
  }

  companion object {
    const val OPERATION_ID: String =
        "489a08c53439e4fcdbdf6ec743933e2709d52bb538e2c5fda5d7656dd2c2491f"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  r2: hero {
          |    __typename
          |    ...HumanDetails
          |    ...DroidDetails
          |  }
          |  luke: hero {
          |    __typename
          |    ...HumanDetails
          |    ...DroidDetails
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
