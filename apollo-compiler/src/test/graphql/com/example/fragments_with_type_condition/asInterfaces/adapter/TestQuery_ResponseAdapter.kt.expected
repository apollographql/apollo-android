//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.fragments_with_type_condition.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragments_with_type_condition.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var r2: TestQuery.Data.R2? = null
      var luke: TestQuery.Data.Luke? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> r2 = R2.obj().nullable().fromResponse(reader, responseAdapterCache)
          1 -> luke = Luke.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        r2 = r2,
        luke = luke
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("r2")
      R2.obj().nullable().toResponse(writer, responseAdapterCache, value.r2)
      writer.name("luke")
      Luke.obj().nullable().toResponse(writer, responseAdapterCache, value.luke)
    }

    object R2 : ResponseAdapter<TestQuery.Data.R2> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.R2 {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanR2.fromResponse(reader, responseAdapterCache, __typename)
          "Droid",
          -> DroidR2.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherR2.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.R2
      ) {
        when(value) {
          is TestQuery.Data.HumanR2 -> HumanR2.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.DroidR2 -> DroidR2.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherR2 -> OtherR2.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object HumanR2 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.HumanR2 {
        var __typename: String? = __typename
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.HumanR2(
          __typename = __typename!!,
          name = name!!,
          height = height
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.HumanR2
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }
    }

    object DroidR2 {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.DroidR2 {
        var __typename: String? = __typename
        var name: String? = null
        var primaryFunction: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.DroidR2(
          __typename = __typename!!,
          name = name!!,
          primaryFunction = primaryFunction
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.DroidR2
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("primaryFunction")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.primaryFunction)
      }
    }

    object OtherR2 {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherR2 {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherR2(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherR2
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }

    object Luke : ResponseAdapter<TestQuery.Data.Luke> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Luke {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanLuke.fromResponse(reader, responseAdapterCache, __typename)
          "Droid",
          -> DroidLuke.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherLuke.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Luke
      ) {
        when(value) {
          is TestQuery.Data.HumanLuke -> HumanLuke.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.DroidLuke -> DroidLuke.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherLuke -> OtherLuke.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object HumanLuke {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.HumanLuke {
        var __typename: String? = __typename
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.HumanLuke(
          __typename = __typename!!,
          name = name!!,
          height = height
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.HumanLuke
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }
    }

    object DroidLuke {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.DroidLuke {
        var __typename: String? = __typename
        var name: String? = null
        var primaryFunction: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.DroidLuke(
          __typename = __typename!!,
          name = name!!,
          primaryFunction = primaryFunction
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.DroidLuke
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("primaryFunction")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.primaryFunction)
      }
    }

    object OtherLuke {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherLuke {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherLuke(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherLuke
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
