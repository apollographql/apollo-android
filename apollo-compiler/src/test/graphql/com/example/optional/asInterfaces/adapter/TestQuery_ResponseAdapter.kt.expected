//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.optional.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.optional
import com.example.optional.TestQuery
import com.example.optional.type.Episode
import com.example.optional.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    object Hero : Adapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("name", "appearsIn")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Hero {
        var name: String? = null
        var appearsIn: Optional<List<Episode?>> = Optional.Absent
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> appearsIn = Episode_ResponseAdapter.nullable().list().optional().fromJson(reader,
                customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.Hero(
          name = name!!,
          appearsIn = appearsIn
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Hero
      ) {
        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
        if (value.appearsIn is Optional.Present) {
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().optional().toJson(writer, customScalarAdapters,
              value.appearsIn)
        }
      }
    }
  }
}
