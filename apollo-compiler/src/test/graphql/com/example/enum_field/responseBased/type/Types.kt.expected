//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.enum_field.type

import com.apollographql.apollo3.api.CompiledNamedType
import com.apollographql.apollo3.api.CompiledType
import com.apollographql.apollo3.api.CustomScalarType
import com.apollographql.apollo3.api.EnumType
import com.apollographql.apollo3.api.InterfaceType
import com.apollographql.apollo3.api.ObjectType
import com.apollographql.apollo3.api.UnionType
import com.apollographql.apollo3.api.possibleTypes
import kotlin.collections.List

/**
 * Auto generated constants representing the custom scalars, objects, interfaces and unions in the
 * schema. Input objects are left out because they are generated separately
 */
object Types {
  /**
   * The `Date` scalar type represents date format.
   */
  val Date: CustomScalarType = CustomScalarType("Date", "kotlin.Any")

  /**
   * The episodes in the Star Wars trilogy (with special symbol $S)
   */
  val Episode: EnumType = EnumType("Episode")

  /**
   * Units of height
   */
  val LengthUnit: EnumType = EnumType("LengthUnit")

  /**
   * A character from the Star Wars universe
   */
  val Character: InterfaceType = InterfaceType(name = "Character")

  /**
   * An autonomous mechanical character in the Star Wars universe
   */
  val Droid: ObjectType = ObjectType(name = "Droid", implements = listOf(Character))

  /**
   * A connection object for a character's friends
   */
  val FriendsConnection: ObjectType = ObjectType(name = "FriendsConnection")

  /**
   * An edge object for a character's friends
   */
  val FriendsEdge: ObjectType = ObjectType(name = "FriendsEdge")

  /**
   * A humanoid creature from the Star Wars universe
   */
  val Human: ObjectType = ObjectType(name = "Human", implements = listOf(Character))

  /**
   * The mutation type, represents all updates we can make to our data
   */
  val Mutation: ObjectType = ObjectType(name = "Mutation")

  /**
   * Information for paginating this connection
   */
  val PageInfo: ObjectType = ObjectType(name = "PageInfo")

  /**
   * The query type, represents all of the entry points into our object graph
   */
  val Query: ObjectType = ObjectType(name = "Query")

  /**
   * Represents a review for a movie
   */
  val Review: ObjectType = ObjectType(name = "Review")

  val Starship: ObjectType = ObjectType(name = "Starship")

  val SearchResult: UnionType = UnionType("SearchResult", Human, Droid, Starship)

  val all: List<CompiledType> = listOf(
        Date, Episode, LengthUnit, Character, Droid, FriendsConnection, FriendsEdge, Human,
            Mutation, PageInfo, Query, Review, Starship, SearchResult)


  fun possibleTypes(type: CompiledNamedType): List<ObjectType> = possibleTypes(all, type)
}
