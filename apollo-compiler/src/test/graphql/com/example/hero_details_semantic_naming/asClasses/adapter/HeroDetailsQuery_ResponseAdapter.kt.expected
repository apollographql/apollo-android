//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.hero_details_semantic_naming.adapter

import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.hero_details_semantic_naming.HeroDetailsQuery
import kotlin.Int
import kotlin.String
import kotlin.collections.List

object HeroDetailsQuery_ResponseAdapter {
  object Data : ResponseAdapter<HeroDetailsQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HeroDetailsQuery.Data {
      var hero: HeroDetailsQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return HeroDetailsQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetailsQuery.Data
    ) {
      writer.name("hero")
      Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<HeroDetailsQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("name", "friendsConnection")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          HeroDetailsQuery.Data.Hero {
        var name: String? = null
        var friendsConnection: HeroDetailsQuery.Data.Hero.FriendsConnection? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> friendsConnection = FriendsConnection.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return HeroDetailsQuery.Data.Hero(
          name = name!!,
          friendsConnection = friendsConnection!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetailsQuery.Data.Hero
      ) {
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friendsConnection")
        FriendsConnection.toResponse(writer, responseAdapterCache, value.friendsConnection)
      }

      object FriendsConnection : ResponseAdapter<HeroDetailsQuery.Data.Hero.FriendsConnection> {
        val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            HeroDetailsQuery.Data.Hero.FriendsConnection {
          var totalCount: Int? = null
          var edges: List<HeroDetailsQuery.Data.Hero.FriendsConnection.Edges?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              1 -> edges = Edges.nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return HeroDetailsQuery.Data.Hero.FriendsConnection(
            totalCount = totalCount,
            edges = edges
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: HeroDetailsQuery.Data.Hero.FriendsConnection
        ) {
          writer.name("totalCount")
          NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
          writer.name("edges")
          Edges.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
        }

        object Edges : ResponseAdapter<HeroDetailsQuery.Data.Hero.FriendsConnection.Edges> {
          val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              HeroDetailsQuery.Data.Hero.FriendsConnection.Edges {
            var node: HeroDetailsQuery.Data.Hero.FriendsConnection.Edges.Node? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> node = Node.nullable().fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return HeroDetailsQuery.Data.Hero.FriendsConnection.Edges(
              node = node
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: HeroDetailsQuery.Data.Hero.FriendsConnection.Edges
          ) {
            writer.name("node")
            Node.nullable().toResponse(writer, responseAdapterCache, value.node)
          }

          object Node : ResponseAdapter<HeroDetailsQuery.Data.Hero.FriendsConnection.Edges.Node> {
            val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                HeroDetailsQuery.Data.Hero.FriendsConnection.Edges.Node {
              var name: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return HeroDetailsQuery.Data.Hero.FriendsConnection.Edges.Node(
                name = name!!
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: HeroDetailsQuery.Data.Hero.FriendsConnection.Edges.Node
            ) {
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            }
          }
        }
      }
    }
  }
}
