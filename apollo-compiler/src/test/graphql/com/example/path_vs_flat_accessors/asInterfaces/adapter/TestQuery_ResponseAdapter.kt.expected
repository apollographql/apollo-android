//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.path_vs_flat_accessors.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.path_vs_flat_accessors.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("root")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var root: TestQuery.Data.Root? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> root = Root.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        root = root
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("root")
      Root.obj().nullable().toJson(writer, customScalarAdapters, value.root)
    }

    object Root : Adapter<TestQuery.Data.Root> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Root {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "ABC",
          -> ABRoot.fromJson(reader, customScalarAdapters, __typename)
          "AC",
          -> OtherARoot.fromJson(reader, customScalarAdapters, __typename)
          "BC",
          -> OtherBRoot.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherRoot.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Root
      ) {
        when(value) {
          is TestQuery.Data.ABRoot -> ABRoot.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherARoot -> OtherARoot.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherBRoot -> OtherBRoot.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherRoot -> OtherRoot.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    object ABRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB1", "fieldB2")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.ABRoot {
        var __typename: String? = typename
        var fieldB1: String? = null
        var fieldB2: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> fieldB1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            2 -> fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.ABRoot(
          __typename = __typename!!,
          fieldB1 = fieldB1,
          fieldB2 = fieldB2
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.ABRoot
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        writer.name("fieldB1")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1)
        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)
      }
    }

    object OtherRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherRoot {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.OtherRoot(
          __typename = __typename!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherRoot
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }

    object OtherARoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherARoot {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.OtherARoot(
          __typename = __typename!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherARoot
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }

    object OtherBRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherBRoot {
        var __typename: String? = typename
        var fieldB2: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        return TestQuery.Data.OtherBRoot(
          __typename = __typename!!,
          fieldB2 = fieldB2
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherBRoot
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)
      }
    }
  }
}
