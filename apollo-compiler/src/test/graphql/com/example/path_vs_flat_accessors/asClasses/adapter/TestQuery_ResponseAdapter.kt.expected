//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.path_vs_flat_accessors.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.path_vs_flat_accessors.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("root")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var root: TestQuery.Data.Root? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> root = Root.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        root = root
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("root")
      Root.obj().nullable().toResponse(writer, responseAdapterCache, value.root)
    }

    object Root : ResponseAdapter<TestQuery.Data.Root> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Root {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "ABC",
          -> ABRoot.fromResponse(reader, responseAdapterCache, __typename)
          "AC",
          -> OtherARoot.fromResponse(reader, responseAdapterCache, __typename)
          "BC",
          -> OtherBRoot.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherRoot.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Root
      ) {
        when(value) {
          is TestQuery.Data.ABRoot -> ABRoot.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherARoot -> OtherARoot.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherBRoot -> OtherBRoot.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherRoot -> OtherRoot.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object ABRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB1", "fieldB2")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.ABRoot {
        var __typename: String? = __typename
        var fieldB1: String? = null
        var fieldB2: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> fieldB1 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> fieldB2 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.ABRoot(
          __typename = __typename!!,
          fieldB1 = fieldB1,
          fieldB2 = fieldB2
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.ABRoot
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("fieldB1")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.fieldB1)
        writer.name("fieldB2")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.fieldB2)
      }
    }

    object OtherRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherRoot {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherRoot(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherRoot
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }

    object OtherARoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherARoot {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherARoot(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherARoot
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }

    object OtherBRoot {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherBRoot {
        var __typename: String? = __typename
        var fieldB2: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> fieldB2 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherBRoot(
          __typename = __typename!!,
          fieldB2 = fieldB2
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherBRoot
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("fieldB2")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.fieldB2)
      }
    }
  }
}
