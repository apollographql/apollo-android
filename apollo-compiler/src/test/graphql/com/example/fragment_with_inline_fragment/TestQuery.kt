// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_with_inline_fragment

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.example.fragment_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.fragment_with_inline_fragment.fragment.HeroDetail
import com.example.fragment_with_inline_fragment.type.Episode
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun responseFieldMapper(): ResponseFieldMapper<Data> {
    return ResponseFieldMapper { reader ->
      TestQuery_ResponseAdapter.fromResponse(reader)
    }
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return parse(Buffer().write(byteString), scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> {
    return parse(source, DEFAULT)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> {
    return parse(byteString, DEFAULT)
  }

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString {
    return OperationRequestBodyComposer.compose(
      operation = this,
      autoPersistQueries = false,
      withQueryDocument = true,
      scalarTypeAdapters = scalarTypeAdapters
    )
  }

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller { writer ->
        TestQuery_ResponseAdapter.Data.toResponse(writer, this)
      }
    }

    /**
     * A character from the Star Wars universe
     */
    interface Hero {
      val __typename: String

      /**
       * The name of the character
       */
      val name: String

      /**
       * The movies this character appears in
       */
      val appearsIn: List<Episode?>

      fun marshaller(): ResponseFieldMarshaller

      interface Character : Hero, HeroDetail {
        override val __typename: String

        /**
         * The name of the character
         */
        override val name: String

        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>

        /**
         * The friends of the character exposed as a connection with edges
         */
        override val friendsConnection: FriendsConnection

        override fun marshaller(): ResponseFieldMarshaller

        /**
         * A connection object for a character's friends
         */
        interface FriendsConnection : HeroDetail.FriendsConnection {
          /**
           * The total number of friends
           */
          override val totalCount: Int?

          /**
           * The edges for each of the character's friends.
           */
          override val edges: List<Edge?>?

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * An edge object for a character's friends
           */
          interface Edge : HeroDetail.FriendsConnection.Edge {
            /**
             * The character represented by this friendship edge
             */
            override val node: Node?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A character from the Star Wars universe
             */
            interface Node : HeroDetail.FriendsConnection.Edge.Node {
              /**
               * The name of the character
               */
              override val name: String

              override fun marshaller(): ResponseFieldMarshaller
            }
          }
        }

        interface Droid : Character, HeroDetail.Droid {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>

          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
              HeroDetail.Droid.FriendsConnection {
            /**
             * The total number of friends
             */
            override val totalCount: Int?

            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * An edge object for a character's friends
             */
            interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                HeroDetail.Droid.FriendsConnection.Edge {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edge.Node,
                  HeroDetail.FriendsConnection.Edge.Node,
                  HeroDetail.Droid.FriendsConnection.Edge.Node {
                /**
                 * The name of the character
                 */
                override val name: String

                override fun marshaller(): ResponseFieldMarshaller
              }
            }
          }

          interface Droid : Character.Droid, HeroDetail.Droid.Droid {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String

            /**
             * The movies this character appears in
             */
            override val appearsIn: List<Episode?>

            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection

            /**
             * This droid's primary function
             */
            override val primaryFunction: String?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A connection object for a character's friends
             */
            interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
                HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
                HeroDetail.Droid.Droid.FriendsConnection {
              /**
               * The total number of friends
               */
              override val totalCount: Int?

              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edge?>?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * An edge object for a character's friends
               */
              interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                  HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                  HeroDetail.Droid.Droid.FriendsConnection.Edge {
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?

                override fun marshaller(): ResponseFieldMarshaller

                /**
                 * A character from the Star Wars universe
                 */
                interface Node : Character.FriendsConnection.Edge.Node,
                    HeroDetail.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.Droid.FriendsConnection.Edge.Node {
                  /**
                   * The name of the character
                   */
                  override val name: String

                  override fun marshaller(): ResponseFieldMarshaller
                }
              }
            }
          }
        }

        interface Human : Character, HeroDetail.Human {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>

          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
              HeroDetail.Human.FriendsConnection {
            /**
             * The total number of friends
             */
            override val totalCount: Int?

            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * An edge object for a character's friends
             */
            interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                HeroDetail.Human.FriendsConnection.Edge {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edge.Node,
                  HeroDetail.FriendsConnection.Edge.Node,
                  HeroDetail.Human.FriendsConnection.Edge.Node {
                /**
                 * The name of the character
                 */
                override val name: String

                override fun marshaller(): ResponseFieldMarshaller
              }
            }
          }
        }
      }

      interface CharacterHero : Hero, Character, HeroDetail {
        override val __typename: String

        /**
         * The name of the character
         */
        override val name: String

        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>

        /**
         * The friends of the character exposed as a connection with edges
         */
        override val friendsConnection: FriendsConnection

        override fun marshaller(): ResponseFieldMarshaller

        /**
         * A connection object for a character's friends
         */
        interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection {
          /**
           * The total number of friends
           */
          override val totalCount: Int?

          /**
           * The edges for each of the character's friends.
           */
          override val edges: List<Edge?>?

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * An edge object for a character's friends
           */
          interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge {
            /**
             * The character represented by this friendship edge
             */
            override val node: Node?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A character from the Star Wars universe
             */
            interface Node : Character.FriendsConnection.Edge.Node,
                HeroDetail.FriendsConnection.Edge.Node {
              /**
               * The name of the character
               */
              override val name: String

              override fun marshaller(): ResponseFieldMarshaller
            }
          }
        }

        interface Droid : Character, Character.Droid, HeroDetail.Droid, CharacterHero {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>

          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
              HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
              CharacterHero.FriendsConnection {
            /**
             * The total number of friends
             */
            override val totalCount: Int?

            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * An edge object for a character's friends
             */
            interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                CharacterHero.FriendsConnection.Edge {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edge.Node,
                  HeroDetail.FriendsConnection.Edge.Node,
                  HeroDetail.Droid.FriendsConnection.Edge.Node,
                  Character.Droid.FriendsConnection.Edge.Node,
                  CharacterHero.FriendsConnection.Edge.Node {
                /**
                 * The name of the character
                 */
                override val name: String

                override fun marshaller(): ResponseFieldMarshaller
              }
            }
          }

          interface Droid : Character.Droid, Character.Droid.Droid, HeroDetail.Droid.Droid,
              CharacterHero.Droid {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String

            /**
             * The movies this character appears in
             */
            override val appearsIn: List<Episode?>

            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection

            /**
             * This droid's primary function
             */
            override val primaryFunction: String?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A connection object for a character's friends
             */
            interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
                HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
                HeroDetail.Droid.Droid.FriendsConnection, Character.Droid.Droid.FriendsConnection,
                CharacterHero.FriendsConnection, CharacterHero.Droid.FriendsConnection {
              /**
               * The total number of friends
               */
              override val totalCount: Int?

              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edge?>?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * An edge object for a character's friends
               */
              interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                  HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                  HeroDetail.Droid.Droid.FriendsConnection.Edge,
                  Character.Droid.Droid.FriendsConnection.Edge,
                  CharacterHero.FriendsConnection.Edge, CharacterHero.Droid.FriendsConnection.Edge {
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?

                override fun marshaller(): ResponseFieldMarshaller

                /**
                 * A character from the Star Wars universe
                 */
                interface Node : Character.FriendsConnection.Edge.Node,
                    HeroDetail.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.FriendsConnection.Edge.Node {
                  /**
                   * The name of the character
                   */
                  override val name: String

                  override fun marshaller(): ResponseFieldMarshaller
                }
              }
            }
          }
        }

        interface Human : Character, Character.Human, HeroDetail.Human, CharacterHero {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>

          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
              HeroDetail.Human.FriendsConnection, Character.Human.FriendsConnection,
              CharacterHero.FriendsConnection {
            /**
             * The total number of friends
             */
            override val totalCount: Int?

            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * An edge object for a character's friends
             */
            interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                HeroDetail.Human.FriendsConnection.Edge, Character.Human.FriendsConnection.Edge,
                CharacterHero.FriendsConnection.Edge {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edge.Node,
                  HeroDetail.FriendsConnection.Edge.Node,
                  HeroDetail.Human.FriendsConnection.Edge.Node,
                  Character.Human.FriendsConnection.Edge.Node,
                  CharacterHero.FriendsConnection.Edge.Node {
                /**
                 * The name of the character
                 */
                override val name: String

                override fun marshaller(): ResponseFieldMarshaller
              }
            }
          }
        }

        interface DroidCharacterHero : Character, Character.Droid, HeroDetail.Droid, CharacterHero,
            Droid {
          override val __typename: String

          /**
           * The name of the character
           */
          override val name: String

          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>

          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection

          override fun marshaller(): ResponseFieldMarshaller

          /**
           * A connection object for a character's friends
           */
          interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
              CharacterHero.FriendsConnection, HeroDetail.Droid.FriendsConnection,
              Character.Droid.FriendsConnection, CharacterHero.Droid.FriendsConnection {
            /**
             * The total number of friends
             */
            override val totalCount: Int?

            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * An edge object for a character's friends
             */
            interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                CharacterHero.FriendsConnection.Edge, HeroDetail.Droid.FriendsConnection.Edge,
                Character.Droid.FriendsConnection.Edge, CharacterHero.Droid.FriendsConnection.Edge {
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * A character from the Star Wars universe
               */
              interface Node : Character.FriendsConnection.Edge.Node,
                  HeroDetail.FriendsConnection.Edge.Node, CharacterHero.FriendsConnection.Edge.Node,
                  HeroDetail.Droid.FriendsConnection.Edge.Node,
                  Character.Droid.FriendsConnection.Edge.Node,
                  CharacterHero.Droid.FriendsConnection.Edge.Node {
                /**
                 * The name of the character
                 */
                override val name: String

                override fun marshaller(): ResponseFieldMarshaller
              }
            }
          }

          interface Droid : Character.Droid, Character.Droid.Droid, HeroDetail.Droid.Droid,
              CharacterHero.Droid, CharacterHero.Droid.Droid, DroidCharacterHero {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String

            /**
             * The movies this character appears in
             */
            override val appearsIn: List<Episode?>

            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection

            /**
             * This droid's primary function
             */
            override val primaryFunction: String?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A connection object for a character's friends
             */
            interface FriendsConnection : Character.FriendsConnection, HeroDetail.FriendsConnection,
                HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
                HeroDetail.Droid.Droid.FriendsConnection, Character.Droid.Droid.FriendsConnection,
                CharacterHero.FriendsConnection, CharacterHero.Droid.FriendsConnection,
                CharacterHero.Droid.Droid.FriendsConnection, DroidCharacterHero.FriendsConnection {
              /**
               * The total number of friends
               */
              override val totalCount: Int?

              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edge?>?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * An edge object for a character's friends
               */
              interface Edge : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                  HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                  HeroDetail.Droid.Droid.FriendsConnection.Edge,
                  Character.Droid.Droid.FriendsConnection.Edge,
                  CharacterHero.FriendsConnection.Edge, CharacterHero.Droid.FriendsConnection.Edge,
                  CharacterHero.Droid.Droid.FriendsConnection.Edge,
                  DroidCharacterHero.FriendsConnection.Edge {
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?

                override fun marshaller(): ResponseFieldMarshaller

                /**
                 * A character from the Star Wars universe
                 */
                interface Node : Character.FriendsConnection.Edge.Node,
                    HeroDetail.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.Droid.FriendsConnection.Edge.Node,
                    DroidCharacterHero.FriendsConnection.Edge.Node {
                  /**
                   * The name of the character
                   */
                  override val name: String

                  override fun marshaller(): ResponseFieldMarshaller
                }
              }
            }
          }

          data class DroidDroidCharacterHero(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * The movies this character appears in
             */
            override val appearsIn: List<Episode?>,
            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection,
            /**
             * This droid's primary function
             */
            override val primaryFunction: String?
          ) : Character.Droid, Character.Droid.Droid, HeroDetail.Droid.Droid, CharacterHero.Droid,
              CharacterHero.Droid.Droid, DroidCharacterHero, Droid {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.DroidDroidCharacterHero.toResponse(writer, this)
              }
            }

            /**
             * A connection object for a character's friends
             */
            data class FriendsConnection(
              /**
               * The total number of friends
               */
              override val totalCount: Int?,
              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edge?>?
            ) : Character.FriendsConnection, HeroDetail.FriendsConnection,
                CharacterHero.FriendsConnection, DroidCharacterHero.FriendsConnection,
                HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
                CharacterHero.Droid.FriendsConnection, HeroDetail.Droid.Droid.FriendsConnection,
                Character.Droid.Droid.FriendsConnection,
                CharacterHero.Droid.Droid.FriendsConnection, Droid.FriendsConnection {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.DroidDroidCharacterHero.FriendsConnection.toResponse(writer, this)
                }
              }

              /**
               * An edge object for a character's friends
               */
              data class Edge(
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?
              ) : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                  CharacterHero.FriendsConnection.Edge, DroidCharacterHero.FriendsConnection.Edge,
                  HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                  CharacterHero.Droid.FriendsConnection.Edge,
                  HeroDetail.Droid.Droid.FriendsConnection.Edge,
                  Character.Droid.Droid.FriendsConnection.Edge,
                  CharacterHero.Droid.Droid.FriendsConnection.Edge, Droid.FriendsConnection.Edge {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.DroidDroidCharacterHero.FriendsConnection.Edge.toResponse(writer, this)
                  }
                }

                /**
                 * A character from the Star Wars universe
                 */
                data class Node(
                  /**
                   * The name of the character
                   */
                  override val name: String
                ) : Character.FriendsConnection.Edge.Node, HeroDetail.FriendsConnection.Edge.Node,
                    CharacterHero.FriendsConnection.Edge.Node,
                    DroidCharacterHero.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.Droid.FriendsConnection.Edge.Node,
                    Droid.FriendsConnection.Edge.Node {
                  override fun marshaller(): ResponseFieldMarshaller {
                    return ResponseFieldMarshaller { writer ->
                      TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.DroidDroidCharacterHero.FriendsConnection.Edge.Node.toResponse(writer, this)
                    }
                  }
                }
              }
            }
          }

          data class OtherDroidCharacterHero(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * The movies this character appears in
             */
            override val appearsIn: List<Episode?>,
            /**
             * The friends of the character exposed as a connection with edges
             */
            override val friendsConnection: FriendsConnection
          ) : Character, Character.Droid, HeroDetail.Droid, CharacterHero, CharacterHero.Droid,
              DroidCharacterHero {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.OtherDroidCharacterHero.toResponse(writer, this)
              }
            }

            /**
             * A connection object for a character's friends
             */
            data class FriendsConnection(
              /**
               * The total number of friends
               */
              override val totalCount: Int?,
              /**
               * The edges for each of the character's friends.
               */
              override val edges: List<Edge?>?
            ) : Character.FriendsConnection, HeroDetail.FriendsConnection,
                CharacterHero.FriendsConnection, DroidCharacterHero.FriendsConnection,
                HeroDetail.Droid.FriendsConnection, Character.Droid.FriendsConnection,
                CharacterHero.Droid.FriendsConnection {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.OtherDroidCharacterHero.FriendsConnection.toResponse(writer, this)
                }
              }

              /**
               * An edge object for a character's friends
               */
              data class Edge(
                /**
                 * The character represented by this friendship edge
                 */
                override val node: Node?
              ) : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                  CharacterHero.FriendsConnection.Edge, DroidCharacterHero.FriendsConnection.Edge,
                  HeroDetail.Droid.FriendsConnection.Edge, Character.Droid.FriendsConnection.Edge,
                  CharacterHero.Droid.FriendsConnection.Edge {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.OtherDroidCharacterHero.FriendsConnection.Edge.toResponse(writer, this)
                  }
                }

                /**
                 * A character from the Star Wars universe
                 */
                data class Node(
                  /**
                   * The name of the character
                   */
                  override val name: String
                ) : Character.FriendsConnection.Edge.Node, HeroDetail.FriendsConnection.Edge.Node,
                    CharacterHero.FriendsConnection.Edge.Node,
                    DroidCharacterHero.FriendsConnection.Edge.Node,
                    HeroDetail.Droid.FriendsConnection.Edge.Node,
                    Character.Droid.FriendsConnection.Edge.Node,
                    CharacterHero.Droid.FriendsConnection.Edge.Node {
                  override fun marshaller(): ResponseFieldMarshaller {
                    return ResponseFieldMarshaller { writer ->
                      TestQuery_ResponseAdapter.Data.Hero.CharacterHero.DroidCharacterHero.OtherDroidCharacterHero.FriendsConnection.Edge.Node.toResponse(writer, this)
                    }
                  }
                }
              }
            }
          }

          companion object {
            fun DroidCharacterHero.asDroid(): Droid? = this as? Droid
          }
        }

        data class HumanCharacterHero(
          override val __typename: String,
          /**
           * The name of the character
           */
          override val name: String,
          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>,
          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection
        ) : Character, Character.Human, HeroDetail.Human, CharacterHero, Human {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestQuery_ResponseAdapter.Data.Hero.CharacterHero.HumanCharacterHero.toResponse(writer, this)
            }
          }

          /**
           * A connection object for a character's friends
           */
          data class FriendsConnection(
            /**
             * The total number of friends
             */
            override val totalCount: Int?,
            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?
          ) : Character.FriendsConnection, HeroDetail.FriendsConnection,
              CharacterHero.FriendsConnection, HeroDetail.Human.FriendsConnection,
              Character.Human.FriendsConnection, Human.FriendsConnection {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Hero.CharacterHero.HumanCharacterHero.FriendsConnection.toResponse(writer, this)
              }
            }

            /**
             * An edge object for a character's friends
             */
            data class Edge(
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?
            ) : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                CharacterHero.FriendsConnection.Edge, HeroDetail.Human.FriendsConnection.Edge,
                Character.Human.FriendsConnection.Edge, Human.FriendsConnection.Edge {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Hero.CharacterHero.HumanCharacterHero.FriendsConnection.Edge.toResponse(writer, this)
                }
              }

              /**
               * A character from the Star Wars universe
               */
              data class Node(
                /**
                 * The name of the character
                 */
                override val name: String
              ) : Character.FriendsConnection.Edge.Node, HeroDetail.FriendsConnection.Edge.Node,
                  CharacterHero.FriendsConnection.Edge.Node,
                  HeroDetail.Human.FriendsConnection.Edge.Node,
                  Character.Human.FriendsConnection.Edge.Node, Human.FriendsConnection.Edge.Node {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Hero.CharacterHero.HumanCharacterHero.FriendsConnection.Edge.Node.toResponse(writer, this)
                  }
                }
              }
            }
          }
        }

        data class OtherCharacterHero(
          override val __typename: String,
          /**
           * The name of the character
           */
          override val name: String,
          /**
           * The movies this character appears in
           */
          override val appearsIn: List<Episode?>,
          /**
           * The friends of the character exposed as a connection with edges
           */
          override val friendsConnection: FriendsConnection
        ) : Hero, Character, HeroDetail, CharacterHero {
          override fun marshaller(): ResponseFieldMarshaller {
            return ResponseFieldMarshaller { writer ->
              TestQuery_ResponseAdapter.Data.Hero.CharacterHero.OtherCharacterHero.toResponse(writer, this)
            }
          }

          /**
           * A connection object for a character's friends
           */
          data class FriendsConnection(
            /**
             * The total number of friends
             */
            override val totalCount: Int?,
            /**
             * The edges for each of the character's friends.
             */
            override val edges: List<Edge?>?
          ) : Character.FriendsConnection, HeroDetail.FriendsConnection,
              CharacterHero.FriendsConnection {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                TestQuery_ResponseAdapter.Data.Hero.CharacterHero.OtherCharacterHero.FriendsConnection.toResponse(writer, this)
              }
            }

            /**
             * An edge object for a character's friends
             */
            data class Edge(
              /**
               * The character represented by this friendship edge
               */
              override val node: Node?
            ) : Character.FriendsConnection.Edge, HeroDetail.FriendsConnection.Edge,
                CharacterHero.FriendsConnection.Edge {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  TestQuery_ResponseAdapter.Data.Hero.CharacterHero.OtherCharacterHero.FriendsConnection.Edge.toResponse(writer, this)
                }
              }

              /**
               * A character from the Star Wars universe
               */
              data class Node(
                /**
                 * The name of the character
                 */
                override val name: String
              ) : Character.FriendsConnection.Edge.Node, HeroDetail.FriendsConnection.Edge.Node,
                  CharacterHero.FriendsConnection.Edge.Node {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    TestQuery_ResponseAdapter.Data.Hero.CharacterHero.OtherCharacterHero.FriendsConnection.Edge.Node.toResponse(writer, this)
                  }
                }
              }
            }
          }
        }

        companion object {
          fun CharacterHero.asCharacter(): Character? = this as? Character

          fun CharacterHero.asDroid(): Droid? = this as? Droid

          fun CharacterHero.asHuman(): Human? = this as? Human
        }
      }

      data class OtherHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * The movies this character appears in
         */
        override val appearsIn: List<Episode?>
      ) : Hero {
        override fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            TestQuery_ResponseAdapter.Data.Hero.OtherHero.toResponse(writer, this)
          }
        }
      }

      companion object {
        fun Hero.asCharacter(): Character? = this as? Character

        fun Hero.heroDetails(): HeroDetail? = this as? HeroDetail
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "e01fcc7b255552f79419f653def959b6a7ab9bffd519c57e826d91ffc2c7fb1f"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    __typename
          |    name
          |    ...HeroDetails
          |    appearsIn
          |  }
          |}
          |fragment HeroDetails on Character {
          |  __typename
          |  ...HumanDetails
          |  ... on Droid {
          |    __typename
          |    ...DroidDetails
          |  }
          |  name
          |  friendsConnection {
          |    totalCount
          |    edges {
          |      node {
          |        name
          |      }
          |    }
          |  }
          |}
          |fragment HumanDetails on Human {
          |  __typename
          |  name
          |}
          |fragment DroidDetails on Droid {
          |  __typename
          |  name
          |  primaryFunction
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "TestQuery"
      }
    }
  }
}
