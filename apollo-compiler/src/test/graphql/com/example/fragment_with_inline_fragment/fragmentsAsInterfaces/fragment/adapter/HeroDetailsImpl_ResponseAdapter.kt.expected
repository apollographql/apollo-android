// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_with_inline_fragment.fragment.adapter

import com.apollographql.apollo3.api.IntResponseAdapter
import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.fragment_with_inline_fragment.fragment.HeroDetailsImpl
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class HeroDetailsImpl_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<HeroDetailsImpl.Data> {
  private val DroidDataAdapter: DroidData =
      com.example.fragment_with_inline_fragment.fragment.adapter.HeroDetailsImpl_ResponseAdapter.DroidData(responseAdapterCache)

  private val HumanDataAdapter: HumanData =
      com.example.fragment_with_inline_fragment.fragment.adapter.HeroDetailsImpl_ResponseAdapter.HumanData(responseAdapterCache)

  private val OtherDataAdapter: OtherData =
      com.example.fragment_with_inline_fragment.fragment.adapter.HeroDetailsImpl_ResponseAdapter.OtherData(responseAdapterCache)

  override fun fromResponse(reader: JsonReader): HeroDetailsImpl.Data {
    reader.beginObject()
    check(reader.nextName() == "__typename")
    val typename = reader.nextString()
    return when(typename) {
      "Droid" -> DroidDataAdapter.fromResponse(reader, typename)
      "Human" -> HumanDataAdapter.fromResponse(reader, typename)
      else -> OtherDataAdapter.fromResponse(reader, typename)
    }
    .also { reader.endObject() }
  }

  override fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data) {
    when(value) {
      is HeroDetailsImpl.Data.DroidData -> DroidDataAdapter.toResponse(writer, value)
      is HeroDetailsImpl.Data.HumanData -> HumanDataAdapter.toResponse(writer, value)
      is HeroDetailsImpl.Data.OtherData -> OtherDataAdapter.toResponse(writer, value)
    }
  }

  class DroidData(
    responseAdapterCache: ResponseAdapterCache
  ) {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val friendsConnectionAdapter:
        ResponseAdapter<HeroDetailsImpl.Data.DroidData.FriendsConnection> =
        FriendsConnection(responseAdapterCache)

    private val nullableStringAdapter: ResponseAdapter<String?> =
        NullableResponseAdapter(StringResponseAdapter)

    fun fromResponse(reader: JsonReader, __typename: String?): HeroDetailsImpl.Data.DroidData {
      var __typename: String? = __typename
      var name: String? = null
      var friendsConnection: HeroDetailsImpl.Data.DroidData.FriendsConnection? = null
      var primaryFunction: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
          3 -> primaryFunction = nullableStringAdapter.fromResponse(reader)
          else -> break
        }
      }
      return HeroDetailsImpl.Data.DroidData(
        __typename = __typename!!,
        name = name!!,
        friendsConnection = friendsConnection!!,
        primaryFunction = primaryFunction
      )
    }

    fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data.DroidData) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("friendsConnection")
      friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
      writer.name("primaryFunction")
      nullableStringAdapter.toResponse(writer, value.primaryFunction)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "primaryFunction",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class FriendsConnection(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<HeroDetailsImpl.Data.DroidData.FriendsConnection> {
      private val nullableIntAdapter: ResponseAdapter<Int?> =
          NullableResponseAdapter(IntResponseAdapter)

      private val nullableListOfNullableEdgesAdapter:
          ResponseAdapter<List<HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(responseAdapterCache))))

      override fun fromResponse(reader: JsonReader):
          HeroDetailsImpl.Data.DroidData.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = nullableIntAdapter.fromResponse(reader)
            1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return HeroDetailsImpl.Data.DroidData.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: HeroDetailsImpl.Data.DroidData.FriendsConnection) {
        writer.beginObject()
        writer.name("totalCount")
        nullableIntAdapter.toResponse(writer, value.totalCount)
        writer.name("edges")
        nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Int"),
            fieldName = "totalCount",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Edges(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges> {
        private val nullableNodeAdapter:
            ResponseAdapter<HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node?> =
            NullableResponseAdapter(Node(responseAdapterCache))

        override fun fromResponse(reader: JsonReader):
            HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges {
          var node: HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = nullableNodeAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges(
            node = node
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges) {
          writer.beginObject()
          writer.name("node")
          nullableNodeAdapter.toResponse(writer, value.node)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Node(
          responseAdapterCache: ResponseAdapterCache
        ) : ResponseAdapter<HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node> {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          override fun fromResponse(reader: JsonReader):
              HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node {
            var name: String? = null
            reader.beginObject()
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            reader.endObject()
            return HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(writer: JsonWriter,
              value: HeroDetailsImpl.Data.DroidData.FriendsConnection.Edges.Node) {
            writer.beginObject()
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }

  class HumanData(
    responseAdapterCache: ResponseAdapterCache
  ) {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val friendsConnectionAdapter:
        ResponseAdapter<HeroDetailsImpl.Data.HumanData.FriendsConnection> =
        FriendsConnection(responseAdapterCache)

    fun fromResponse(reader: JsonReader, __typename: String?): HeroDetailsImpl.Data.HumanData {
      var __typename: String? = __typename
      var name: String? = null
      var friendsConnection: HeroDetailsImpl.Data.HumanData.FriendsConnection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
          else -> break
        }
      }
      return HeroDetailsImpl.Data.HumanData(
        __typename = __typename!!,
        name = name!!,
        friendsConnection = friendsConnection!!
      )
    }

    fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data.HumanData) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("friendsConnection")
      friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class FriendsConnection(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<HeroDetailsImpl.Data.HumanData.FriendsConnection> {
      private val nullableIntAdapter: ResponseAdapter<Int?> =
          NullableResponseAdapter(IntResponseAdapter)

      private val nullableListOfNullableEdgesAdapter:
          ResponseAdapter<List<HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(responseAdapterCache))))

      override fun fromResponse(reader: JsonReader):
          HeroDetailsImpl.Data.HumanData.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = nullableIntAdapter.fromResponse(reader)
            1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return HeroDetailsImpl.Data.HumanData.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: HeroDetailsImpl.Data.HumanData.FriendsConnection) {
        writer.beginObject()
        writer.name("totalCount")
        nullableIntAdapter.toResponse(writer, value.totalCount)
        writer.name("edges")
        nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Int"),
            fieldName = "totalCount",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Edges(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges> {
        private val nullableNodeAdapter:
            ResponseAdapter<HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node?> =
            NullableResponseAdapter(Node(responseAdapterCache))

        override fun fromResponse(reader: JsonReader):
            HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges {
          var node: HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = nullableNodeAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges(
            node = node
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges) {
          writer.beginObject()
          writer.name("node")
          nullableNodeAdapter.toResponse(writer, value.node)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Node(
          responseAdapterCache: ResponseAdapterCache
        ) : ResponseAdapter<HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node> {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          override fun fromResponse(reader: JsonReader):
              HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node {
            var name: String? = null
            reader.beginObject()
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            reader.endObject()
            return HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(writer: JsonWriter,
              value: HeroDetailsImpl.Data.HumanData.FriendsConnection.Edges.Node) {
            writer.beginObject()
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }

  class OtherData(
    responseAdapterCache: ResponseAdapterCache
  ) {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val friendsConnectionAdapter:
        ResponseAdapter<HeroDetailsImpl.Data.OtherData.FriendsConnection> =
        FriendsConnection(responseAdapterCache)

    fun fromResponse(reader: JsonReader, __typename: String?): HeroDetailsImpl.Data.OtherData {
      var __typename: String? = __typename
      var name: String? = null
      var friendsConnection: HeroDetailsImpl.Data.OtherData.FriendsConnection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> name = stringAdapter.fromResponse(reader)
          2 -> friendsConnection = friendsConnectionAdapter.fromResponse(reader)
          else -> break
        }
      }
      return HeroDetailsImpl.Data.OtherData(
        __typename = __typename!!,
        name = name!!,
        friendsConnection = friendsConnection!!
      )
    }

    fun toResponse(writer: JsonWriter, value: HeroDetailsImpl.Data.OtherData) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      writer.name("name")
      stringAdapter.toResponse(writer, value.name)
      writer.name("friendsConnection")
      friendsConnectionAdapter.toResponse(writer, value.friendsConnection)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
          fieldName = "friendsConnection",
          fieldSets = listOf(
            ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class FriendsConnection(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<HeroDetailsImpl.Data.OtherData.FriendsConnection> {
      private val nullableIntAdapter: ResponseAdapter<Int?> =
          NullableResponseAdapter(IntResponseAdapter)

      private val nullableListOfNullableEdgesAdapter:
          ResponseAdapter<List<HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(responseAdapterCache))))

      override fun fromResponse(reader: JsonReader):
          HeroDetailsImpl.Data.OtherData.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges?>? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = nullableIntAdapter.fromResponse(reader)
            1 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return HeroDetailsImpl.Data.OtherData.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: HeroDetailsImpl.Data.OtherData.FriendsConnection) {
        writer.beginObject()
        writer.name("totalCount")
        nullableIntAdapter.toResponse(writer, value.totalCount)
        writer.name("edges")
        nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Int"),
            fieldName = "totalCount",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
            fieldName = "edges",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Edges(
        responseAdapterCache: ResponseAdapterCache
      ) : ResponseAdapter<HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges> {
        private val nullableNodeAdapter:
            ResponseAdapter<HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node?> =
            NullableResponseAdapter(Node(responseAdapterCache))

        override fun fromResponse(reader: JsonReader):
            HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges {
          var node: HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node? = null
          reader.beginObject()
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = nullableNodeAdapter.fromResponse(reader)
              else -> break
            }
          }
          reader.endObject()
          return HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges(
            node = node
          )
        }

        override fun toResponse(writer: JsonWriter,
            value: HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges) {
          writer.beginObject()
          writer.name("node")
          nullableNodeAdapter.toResponse(writer, value.node)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.Named.Object("Character"),
              fieldName = "node",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }

        class Node(
          responseAdapterCache: ResponseAdapterCache
        ) : ResponseAdapter<HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node> {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          override fun fromResponse(reader: JsonReader):
              HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node {
            var name: String? = null
            reader.beginObject()
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            reader.endObject()
            return HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(writer: JsonWriter,
              value: HeroDetailsImpl.Data.OtherData.FriendsConnection.Edges.Node) {
            writer.beginObject()
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }
}
