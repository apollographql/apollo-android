//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.fragment_with_inline_fragment

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.fragment_with_inline_fragment.fragment.DroidHeroDetails
import com.example.fragment_with_inline_fragment.fragment.HeroDetails
import com.example.fragment_with_inline_fragment.fragment.HumanHeroDetails
import com.example.fragment_with_inline_fragment.responsefields.TestQuery_ResponseFields
import com.example.fragment_with_inline_fragment.type.Episode
import kotlin.Int
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val hero: Hero?
  ) : Query.Data {
    interface Hero : HeroDetails {
      override val __typename: String

      /**
       * The name of the character
       */
      override val name: String

      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection

      /**
       * The movies this character appears in
       */
      val appearsIn: List<Episode?>

      interface FriendsConnection : HeroDetails.FriendsConnection {
        /**
         * The total number of friends
         */
        override val totalCount: Int?

        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edges?>?

        interface Edges : HeroDetails.FriendsConnection.Edges {
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?

          interface Node : HeroDetails.FriendsConnection.Edges.Node {
            /**
             * The name of the character
             */
            override val name: String
          }
        }
      }

      companion object {
        fun Hero.asDroidHero() = this as? DroidHero

        fun Hero.asHumanHero() = this as? HumanHero

        fun Hero.heroDetails() = this as? HeroDetails
      }
    }

    data class OtherHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : Hero {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edges?>?
      ) : Hero.FriendsConnection {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : Hero.FriendsConnection.Edges {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : Hero.FriendsConnection.Edges.Node
        }
      }
    }

    data class DroidHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * This droid's primary function
       */
      override val primaryFunction: String?,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : DroidHeroDetails, Hero {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edges?>?
      ) : DroidHeroDetails.FriendsConnection, Hero.FriendsConnection {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : DroidHeroDetails.FriendsConnection.Edges, Hero.FriendsConnection.Edges {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : DroidHeroDetails.FriendsConnection.Edges.Node, Hero.FriendsConnection.Edges.Node
        }
      }
    }

    data class HumanHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : HumanHeroDetails, Hero {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edges?>?
      ) : HumanHeroDetails.FriendsConnection, Hero.FriendsConnection {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : HumanHeroDetails.FriendsConnection.Edges, Hero.FriendsConnection.Edges {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : HumanHeroDetails.FriendsConnection.Edges.Node, Hero.FriendsConnection.Edges.Node
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "014f79260ae82297a0190e24fcc6194db4156d23fc204e0a03d105a67d8b701a"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    __typename
          |    name
          |    ...HeroDetails
          |    appearsIn
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
