//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.fragment_with_inline_fragment

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.fragment_with_inline_fragment.fragment.DroidHeroDetails
import com.example.fragment_with_inline_fragment.fragment.HeroDetails
import com.example.fragment_with_inline_fragment.fragment.HumanHeroDetails
import com.example.fragment_with_inline_fragment.responsefields.TestQuery_ResponseFields
import com.example.fragment_with_inline_fragment.type.Episode
import kotlin.Int
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val hero: Hero?
  ) : Query.Data {
    interface Hero : HeroDetails {
      override val __typename: String

      /**
       * The name of the character
       */
      override val name: String

      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection

      /**
       * The movies this character appears in
       */
      val appearsIn: List<Episode?>

      interface FriendsConnection : HeroDetails.FriendsConnection {
        /**
         * The total number of friends
         */
        override val totalCount: Int?

        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edge?>?

        interface Edge : HeroDetails.FriendsConnection.Edge {
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?

          interface Node : HeroDetails.FriendsConnection.Edge.Node {
            /**
             * The name of the character
             */
            override val name: String
          }
        }
      }

      companion object {
        fun Hero.HeroDetails() = this as? HeroDetails

        fun Hero.asCharacterHuman() = this as? HumanHero

        fun Hero.asCharacterDroid() = this as? DroidHero
      }
    }

    data class HumanHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : Hero, HumanHeroDetails {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edge?>?
      ) : Hero.FriendsConnection, HumanHeroDetails.FriendsConnection {
        fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        data class Edge(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : Hero.FriendsConnection.Edge, HumanHeroDetails.FriendsConnection.Edge {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : Hero.FriendsConnection.Edge.Node, HumanHeroDetails.FriendsConnection.Edge.Node
        }
      }
    }

    data class DroidHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * This droid's primary function
       */
      override val primaryFunction: String?,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : Hero, DroidHeroDetails {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edge?>?
      ) : Hero.FriendsConnection, DroidHeroDetails.FriendsConnection {
        fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        data class Edge(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : Hero.FriendsConnection.Edge, DroidHeroDetails.FriendsConnection.Edge {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : Hero.FriendsConnection.Edge.Node, DroidHeroDetails.FriendsConnection.Edge.Node
        }
      }
    }

    data class OtherHero(
      override val __typename: String,
      /**
       * The name of the character
       */
      override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      override val appearsIn: List<Episode?>
    ) : Hero, HeroDetails {
      fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      data class FriendsConnection(
        /**
         * The total number of friends
         */
        override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        override val edges: List<Edge?>?
      ) : Hero.FriendsConnection, HeroDetails.FriendsConnection {
        fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        data class Edge(
          /**
           * The character represented by this friendship edge
           */
          override val node: Node?
        ) : Hero.FriendsConnection.Edge, HeroDetails.FriendsConnection.Edge {
          data class Node(
            /**
             * The name of the character
             */
            override val name: String
          ) : Hero.FriendsConnection.Edge.Node, HeroDetails.FriendsConnection.Edge.Node
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "014f79260ae82297a0190e24fcc6194db4156d23fc204e0a03d105a67d8b701a"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   hero {
     *     __typename
     *     name
     *     ...HeroDetails
     *     appearsIn
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery { hero { __typename name ...HeroDetails appearsIn } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
