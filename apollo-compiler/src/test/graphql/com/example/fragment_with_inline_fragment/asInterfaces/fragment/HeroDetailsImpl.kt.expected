//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.fragment_with_inline_fragment.fragment

import com.apollographql.apollo3.api.Fragment
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_inline_fragment.fragment.responsefields.HeroDetailsImpl_ResponseFields
import kotlin.Int
import kotlin.String
import kotlin.collections.List

class HeroDetailsImpl : Fragment<HeroDetailsImpl.Data> {
  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This fragment doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return HeroDetailsImpl_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      HeroDetailsImpl_ResponseFields.fields.first().fieldSets

  interface Data : HeroDetails, Fragment.Data {
    override val __typename: String

    /**
     * The name of the character
     */
    override val name: String

    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection

    interface FriendsConnection : HeroDetails.FriendsConnection {
      /**
       * The total number of friends
       */
      override val totalCount: Int?

      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?

      interface Edge : HeroDetails.FriendsConnection.Edge {
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?

        interface Node : HeroDetails.FriendsConnection.Edge.Node {
          /**
           * The name of the character
           */
          override val name: String
        }
      }
    }

    companion object {
      fun Data.HumanDetails() = this as? HumanDetails

      fun Data.asCharacterHuman() = this as? HumanData

      fun Data.asCharacterDroid() = this as? DroidData
    }
  }

  data class HumanData(
    override val __typename: String,
    /**
     * What this human calls themselves
     */
    override val name: String,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection
  ) : Data, HumanDetails, HumanHeroDetails {
    data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?
    ) : Data.FriendsConnection, HumanHeroDetails.FriendsConnection {
      fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?
      ) : Data.FriendsConnection.Edge, HumanHeroDetails.FriendsConnection.Edge {
        data class Node(
          /**
           * The name of the character
           */
          override val name: String
        ) : Data.FriendsConnection.Edge.Node, HumanHeroDetails.FriendsConnection.Edge.Node
      }
    }
  }

  data class DroidData(
    override val __typename: String,
    /**
     * What others call this droid
     */
    override val name: String,
    /**
     * This droid's primary function
     */
    override val primaryFunction: String?,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection
  ) : Data, DroidHeroDetails {
    data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?
    ) : Data.FriendsConnection, DroidHeroDetails.FriendsConnection {
      fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?
      ) : Data.FriendsConnection.Edge, DroidHeroDetails.FriendsConnection.Edge {
        data class Node(
          /**
           * The name of the character
           */
          override val name: String
        ) : Data.FriendsConnection.Edge.Node, DroidHeroDetails.FriendsConnection.Edge.Node
      }
    }
  }

  data class OtherData(
    override val __typename: String,
    /**
     * The name of the character
     */
    override val name: String,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection
  ) : Data, HeroDetails {
    data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?
    ) : Data.FriendsConnection, HeroDetails.FriendsConnection {
      fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?
      ) : Data.FriendsConnection.Edge, HeroDetails.FriendsConnection.Edge {
        data class Node(
          /**
           * The name of the character
           */
          override val name: String
        ) : Data.FriendsConnection.Edge.Node, HeroDetails.FriendsConnection.Edge.Node
      }
    }
  }
}
