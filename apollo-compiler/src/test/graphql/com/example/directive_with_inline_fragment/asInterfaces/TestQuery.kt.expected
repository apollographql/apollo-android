//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.directive_with_inline_fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.directive_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.directive_with_inline_fragment.adapter.TestQuery_VariablesAdapter
import com.example.directive_with_inline_fragment.responsefields.TestQuery_ResponseFields
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

data class TestQuery(
  val withDetails: Boolean,
  val skipHumanDetails: Boolean
) : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    TestQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun fieldSets(): List<FieldSet> = TestQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val hero: Hero?
  ) : Query.Data {
    interface Hero {
      val __typename: String

      /**
       * The ID of the character
       */
      val id: String

      /**
       * The name of the character
       */
      val name: String

      companion object {
        fun Hero.asHuman() = this as? HumanHero

        fun Hero.asDroid() = this as? DroidHero
      }
    }

    data class HumanHero(
      override val __typename: String,
      /**
       * The ID of the character
       */
      override val id: String,
      /**
       * What this human calls themselves
       */
      override val name: String,
      /**
       * The home planet of the human, or null if unknown
       */
      val homePlanet: String?
    ) : Hero

    data class DroidHero(
      override val __typename: String,
      /**
       * The ID of the character
       */
      override val id: String,
      /**
       * What others call this droid
       */
      override val name: String,
      /**
       * This droid's primary function
       */
      val primaryFunction: String?
    ) : Hero

    data class OtherHero(
      override val __typename: String,
      /**
       * The ID of the character
       */
      override val id: String,
      /**
       * The name of the character
       */
      override val name: String
    ) : Hero
  }

  companion object {
    const val OPERATION_ID: String =
        "1fc50a1808d1ff72f74d821b563ee69df2fc04dd650e41d27d75d90d0413bd65"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery($withDetails: Boolean!, $skipHumanDetails: Boolean!) {
     *   hero {
     *     __typename
     *     id
     *     ... on Human @include(if: $withDetails) @skip(if: $skipHumanDetails) {
     *       name
     *       homePlanet
     *     }
     *     ... on Droid @include(if: $withDetails) {
     *       name
     *       primaryFunction
     *     }
     *     ... on Character @include(if: $withDetails) {
     *       name
     *     }
     *   }
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery(${'$'}withDetails: Boolean!, ${'$'}skipHumanDetails: Boolean!) { hero { __typename id ... on Human @include(if: ${'$'}withDetails) @skip(if: ${'$'}skipHumanDetails) { name homePlanet } ... on Droid @include(if: ${'$'}withDetails) { name primaryFunction } ... on Character @include(if: ${'$'}withDetails) { name } } }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
