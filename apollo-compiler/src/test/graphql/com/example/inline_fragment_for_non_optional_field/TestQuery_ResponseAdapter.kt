// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_for_non_optional_field

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
internal object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.forObject("nonOptionalHero", "nonOptionalHero", mapOf<String, Any>(
      "episode" to "EMPIRE"), false, null)
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var nonOptionalHero: TestQuery.NonOptionalHero? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> nonOptionalHero = readObject<TestQuery.NonOptionalHero>(RESPONSE_FIELDS[0]) { reader ->
            TestQuery_ResponseAdapter.NonOptionalHero_ResponseAdapter.fromResponse(reader)
          }
          else -> break
        }
      }
      TestQuery.Data(
        nonOptionalHero = nonOptionalHero!!
      )
    }
  }

  object Human_ResponseAdapter : ResponseAdapter<TestQuery.Human> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, false, null),
      ResponseField.forDouble("height", "height", null, true, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Human {
      return reader.run {
        var __typename: String? = __typename
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            2 -> height = readDouble(RESPONSE_FIELDS[2])
            else -> break
          }
        }
        TestQuery.Human(
          __typename = __typename!!,
          name = name!!,
          height = height
        )
      }
    }
  }

  object OtherNonOptionalHero_ResponseAdapter : ResponseAdapter<TestQuery.OtherNonOptionalHero> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.OtherNonOptionalHero {
      return reader.run {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            else -> break
          }
        }
        TestQuery.OtherNonOptionalHero(
          __typename = __typename!!,
          name = name!!
        )
      }
    }
  }

  object NonOptionalHero_ResponseAdapter : ResponseAdapter<TestQuery.NonOptionalHero> {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.forString("__typename", "__typename", null, false, null),
      ResponseField.forString("name", "name", null, false, null)
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.NonOptionalHero {
      val typename = __typename ?: reader.readString(RESPONSE_FIELDS[0])
      return when(typename) {
        "Human" -> TestQuery_ResponseAdapter.Human_ResponseAdapter.fromResponse(reader, typename)
        else -> TestQuery_ResponseAdapter.OtherNonOptionalHero_ResponseAdapter.fromResponse(reader,
            typename)
      }
    }
  }
}
