//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_fragment_for_non_optional_field.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.example.inline_fragment_for_non_optional_field.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("nonOptionalHero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var nonOptionalHero: TestQuery.Data.NonOptionalHero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> nonOptionalHero = NonOptionalHero.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        nonOptionalHero = nonOptionalHero!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("nonOptionalHero")
      NonOptionalHero.toResponse(writer, responseAdapterCache, value.nonOptionalHero)
    }

    object NonOptionalHero : ResponseAdapter<TestQuery.Data.NonOptionalHero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "asHuman")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.NonOptionalHero {
        var __typename: String? = null
        var name: String? = null
        var asHuman: TestQuery.Data.NonOptionalHero.AsHuman? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.NonOptionalHero(
          __typename = __typename!!,
          name = name!!,
          asHuman = asHuman
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.NonOptionalHero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("asHuman")
        AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
      }

      object AsHuman : ResponseAdapter<TestQuery.Data.NonOptionalHero.AsHuman> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.NonOptionalHero.AsHuman {
          var __typename: String? = null
          var name: String? = null
          var height: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.NonOptionalHero.AsHuman(
            __typename = __typename!!,
            name = name!!,
            height = height
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.NonOptionalHero.AsHuman
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("height")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        }
      }
    }
  }
}
