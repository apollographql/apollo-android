//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_kotlin_keywords.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.reserved_kotlin_keywords.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var yield_: TestQuery.Data.Yield? = null
      var objects: List<TestQuery.Data.Object?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> yield_ = Yield.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> objects = Object.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        yield_ = yield_,
        objects = objects
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("yield")
      Yield.obj().nullable().toJson(writer, customScalarAdapters, value.yield_)

      writer.name("objects")
      Object.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.objects)
    }

    private object Yield : Adapter<TestQuery.Data.Yield> {
      val RESPONSE_NAMES: List<String> = listOf("it", "name")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Yield {
        var it_: String? = null
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> it_ = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          it_ = it_!!,
          name = name!!
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Yield
      ) {
        writer.name("it")
        StringAdapter.toJson(writer, customScalarAdapters, value.it_)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }

    private object Object : Adapter<TestQuery.Data.Object> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onCharacter: TestQuery.Data.Object.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
          onCharacter = com.example.reserved_kotlin_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Data.Object(
          __typename = __typename,
          onCharacter = onCharacter
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Object
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.reserved_kotlin_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.toJson(writer,
              customScalarAdapters, value.onCharacter)
        }
      }

      private object OnCharacter : Adapter<TestQuery.Data.Object.OnCharacter> {
        val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Object.OnCharacter {
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Object.OnCharacter(
            name = name!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Object.OnCharacter
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
