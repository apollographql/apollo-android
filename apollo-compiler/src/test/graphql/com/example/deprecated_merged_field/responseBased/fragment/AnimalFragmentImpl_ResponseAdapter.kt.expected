//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import kotlin.String
import kotlin.collections.List

object AnimalFragmentImpl_ResponseAdapter {
  object Data : Adapter<AnimalFragmentImpl.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalFragmentImpl.Data {
      reader.selectName(RESPONSE_NAMES).also {
        check(it == 0) {
          "__typename not present in first position"
        }
      }
      val __typename = reader.nextString()!!
      return when(__typename) {
        "Cat",
        -> CatData.fromJson(reader, customScalarAdapters, __typename)
        "Dog",
        -> DogData.fromJson(reader, customScalarAdapters, __typename)
        else
        -> OtherData.fromJson(reader, customScalarAdapters, __typename)
      }
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: AnimalFragmentImpl.Data
    ) {
      when(value) {
        is AnimalFragmentImpl.CatData -> CatData.toJson(writer, customScalarAdapters, value)
        is AnimalFragmentImpl.DogData -> DogData.toJson(writer, customScalarAdapters, value)
        is AnimalFragmentImpl.OtherData -> OtherData.toJson(writer, customScalarAdapters, value)
      }
    }
  }

  object CatData {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String
    ): AnimalFragmentImpl.CatData {
      var __typename: String? = typename
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.CatData(
        __typename = __typename!!,
        name = name!!
      )
    }

    fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: AnimalFragmentImpl.CatData
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }

  object DogData {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String
    ): AnimalFragmentImpl.DogData {
      var __typename: String? = typename
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.DogData(
        __typename = __typename!!,
        name = name!!
      )
    }

    fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: AnimalFragmentImpl.DogData
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }

  object OtherData {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String
    ): AnimalFragmentImpl.OtherData {
      var __typename: String? = typename

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.OtherData(
        __typename = __typename!!
      )
    }

    fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: AnimalFragmentImpl.OtherData
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
    }
  }
}
