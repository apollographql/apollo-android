//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.deprecated_merged_field.CatQuery
import com.example.deprecated_merged_field.fragment.AnimalFragment
import kotlin.String
import kotlin.collections.List

object CatQuery_ResponseAdapter {
  object Data : Adapter<CatQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("cat")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatQuery.Data {
      var cat: CatQuery.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> cat = Cat.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatQuery.Data(
        cat = cat
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: CatQuery.Data
    ) {
      writer.name("cat")
      Cat.obj(true).nullable().toJson(writer, customScalarAdapters, value.cat)
    }
  }

  object Cat : Adapter<CatQuery.Cat> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatQuery.Cat {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      val fragments = com.example.deprecated_merged_field.adapter.CatQuery_ResponseAdapter.Cat.Fragments.fromJson(reader,
          customScalarAdapters)

      return CatQuery.Cat(
        __typename = __typename,
        fragments = fragments
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: CatQuery.Cat
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.example.deprecated_merged_field.adapter.CatQuery_ResponseAdapter.Cat.Fragments.toJson(writer,
          customScalarAdapters, value.fragments)
    }

    private object Fragments : Adapter<CatQuery.Cat.Fragments> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          CatQuery.Cat.Fragments {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var animalFragment: AnimalFragment? = null
        if (possibleTypes("Cat","Dog").evaluate(emptySet(), __typename)) {
          animalFragment = com.example.deprecated_merged_field.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.fromJson(reader,
              customScalarAdapters)
        }

        return CatQuery.Cat.Fragments(
          animalFragment = animalFragment
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: CatQuery.Cat.Fragments
      ) {
        if (value.animalFragment != null) {
          com.example.deprecated_merged_field.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.toJson(writer,
              customScalarAdapters, value.animalFragment)
        }
      }
    }
  }
}
