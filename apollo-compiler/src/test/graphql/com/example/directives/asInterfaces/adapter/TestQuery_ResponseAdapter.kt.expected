//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.directives.adapter

import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.directives.TestQuery
import kotlin.Int
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj().nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("name", "friendsConnection")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero {
        var name: String? = null
        var friendsConnection: TestQuery.Data.Hero.FriendsConnection? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> friendsConnection = FriendsConnection.obj().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Hero(
          name = name,
          friendsConnection = friendsConnection
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero
      ) {
        writer.name("name")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friendsConnection")
        FriendsConnection.obj().nullable().toResponse(writer, responseAdapterCache,
            value.friendsConnection)
      }

      object FriendsConnection : ResponseAdapter<TestQuery.Data.Hero.FriendsConnection> {
        val RESPONSE_NAMES: List<String> = listOf("totalCount")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Hero.FriendsConnection {
          var totalCount: Int? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.FriendsConnection(
            totalCount = totalCount
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.FriendsConnection
        ) {
          writer.name("totalCount")
          NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
        }
      }
    }
  }
}
