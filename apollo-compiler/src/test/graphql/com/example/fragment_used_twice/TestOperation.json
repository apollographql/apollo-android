{
	"operations": [
		{
			"filePath": "src/test/graphql/com/example/fragment_used_twice/TestOperation.graphql",
			"operationName": "TestQuery",
			"operationType": "query",
			"rootType": "Query",
			"variables": [],
			"source": "query TestQuery {\n  hero {\n    __typename\n    ...HeroDetails\n    ...HumanDetails\n  }\n}",
			"fields": [
				{
					"responseName": "hero",
					"fieldName": "hero",
					"type": "Character",
					"isConditional": false,
					"isDeprecated": false,
					"deprecationReason": null,
					"fields": [
						{
							"responseName": "__typename",
							"fieldName": "__typename",
							"type": "String!",
							"isConditional": false
						}
					],
					"fragmentSpreads": [
						"HeroDetails",
						"HumanDetails"
					],
					"inlineFragments": []
				}
			],
			"fragmentSpreads": [],
			"inlineFragments": [],
			"fragmentsReferenced": [
				"HeroDetails",
				"CharacterDetails",
				"HumanDetails"
			],
			"sourceWithFragments": "query TestQuery {\n  hero {\n    __typename\n    ...HeroDetails\n    ...HumanDetails\n  }\n}\nfragment HeroDetails on Character {\n  __typename\n  name\n  ...CharacterDetails\n}\nfragment CharacterDetails on Character {\n  __typename\n  name\n  birthDate\n}\nfragment HumanDetails on Human {\n  __typename\n  name\n  ...CharacterDetails\n}",
			"operationId": "b0ef17cbadc040beac474ed5bf812f26ef436bb4310e547ab2d239f3446afc6d"
		}
	],
	"fragments": [
		{
			"typeCondition": "Character",
			"possibleTypes": [
				"Human",
				"Droid"
			],
			"fragmentName": "HeroDetails",
			"filePath": "src/test/graphql/com/example/fragment_used_twice/TestOperation.graphql",
			"source": "fragment HeroDetails on Character {\n  __typename\n  name\n  ...CharacterDetails\n}",
			"fields": [
				{
					"responseName": "__typename",
					"fieldName": "__typename",
					"type": "String!",
					"isConditional": false
				},
				{
					"responseName": "name",
					"fieldName": "name",
					"type": "String!",
					"isConditional": false,
					"description": "The name of the character",
					"isDeprecated": false,
					"deprecationReason": null
				}
			],
			"fragmentSpreads": [
				"CharacterDetails"
			],
			"inlineFragments": []
		},
		{
			"typeCondition": "Human",
			"possibleTypes": [
				"Human"
			],
			"fragmentName": "HumanDetails",
			"filePath": "src/test/graphql/com/example/fragment_used_twice/TestOperation.graphql",
			"source": "fragment HumanDetails on Human {\n  __typename\n  name\n  ...CharacterDetails\n}",
			"fields": [
				{
					"responseName": "__typename",
					"fieldName": "__typename",
					"type": "String!",
					"isConditional": false
				},
				{
					"responseName": "name",
					"fieldName": "name",
					"type": "String!",
					"isConditional": false,
					"description": "What this human calls themselves",
					"isDeprecated": false,
					"deprecationReason": null
				}
			],
			"fragmentSpreads": [
				"CharacterDetails"
			],
			"inlineFragments": []
		},
		{
			"typeCondition": "Character",
			"possibleTypes": [
				"Human",
				"Droid"
			],
			"fragmentName": "CharacterDetails",
			"filePath": "src/test/graphql/com/example/fragment_used_twice/TestOperation.graphql",
			"source": "fragment CharacterDetails on Character {\n  __typename\n  name\n  birthDate\n}",
			"fields": [
				{
					"responseName": "__typename",
					"fieldName": "__typename",
					"type": "String!",
					"isConditional": false
				},
				{
					"responseName": "name",
					"fieldName": "name",
					"type": "String!",
					"isConditional": false,
					"description": "The name of the character",
					"isDeprecated": false,
					"deprecationReason": null
				},
				{
					"responseName": "birthDate",
					"fieldName": "birthDate",
					"type": "Date!",
					"isConditional": false,
					"description": "The date character was born.",
					"isDeprecated": false,
					"deprecationReason": null
				}
			],
			"fragmentSpreads": [],
			"inlineFragments": []
		}
	],
	"typesUsed": [
		{
			"kind": "ScalarType",
			"name": "Date",
			"description": "The `Date` scalar type represents date format."
		}
	]
}