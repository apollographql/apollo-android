//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_used_twice.fragment

import com.apollographql.apollo3.api.AnyResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import kotlin.Any
import kotlin.String
import kotlin.collections.List

object HumanDetailsImpl_ResponseAdapter {
  object Data : ResponseAdapter<HumanDetailsImpl.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HumanDetailsImpl.Data {
      reader.selectName(RESPONSE_NAMES).also {
        check(it == 0) {
          "__typename not present in first position"
        }
      }
      val __typename = reader.nextString()!!
      return when(__typename) {
        "Human",
        -> CharacterData.fromResponse(reader, responseAdapterCache, __typename)
        else
        -> OtherData.fromResponse(reader, responseAdapterCache, __typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HumanDetailsImpl.Data
    ) {
      when(value) {
        is HumanDetailsImpl.CharacterData -> CharacterData.toResponse(writer, responseAdapterCache,
            value)
        is HumanDetailsImpl.OtherData -> OtherData.toResponse(writer, responseAdapterCache, value)
      }
    }
  }

  object CharacterData {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "birthDate")

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String
    ): HumanDetailsImpl.CharacterData {
      var __typename: String? = __typename
      var name: String? = null
      var birthDate: Any? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> birthDate = AnyResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return HumanDetailsImpl.CharacterData(
        __typename = __typename!!,
        name = name!!,
        birthDate = birthDate!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HumanDetailsImpl.CharacterData
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("birthDate")
      AnyResponseAdapter.toResponse(writer, responseAdapterCache, value.birthDate)
    }
  }

  object OtherData {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String
    ): HumanDetailsImpl.OtherData {
      var __typename: String? = __typename
      var name: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return HumanDetailsImpl.OtherData(
        __typename = __typename!!,
        name = name!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HumanDetailsImpl.OtherData
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
    }
  }
}
