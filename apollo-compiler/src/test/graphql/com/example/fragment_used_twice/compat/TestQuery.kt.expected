//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_used_twice

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.FieldSet
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragment_used_twice.adapter.TestQuery_ResponseAdapter
import com.example.fragment_used_twice.fragment.HeroDetails
import com.example.fragment_used_twice.fragment.HumanDetails
import com.example.fragment_used_twice.responsefields.TestQuery_ResponseFields
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun fieldSets(): List<FieldSet> = TestQuery_ResponseFields.fields.first().fieldSets

  data class Data(
    val hero: Hero?
  ) : Query.Data

  data class Hero(
    val __typename: String,
    /**
     * Synthetic field for grouping fragments
     */
    val fragments: Fragments
  ) {
    data class Fragments(
      /**
       * Synthetic field for 'HeroDetails'
       */
      val heroDetails: HeroDetails?,
      /**
       * Synthetic field for 'HumanDetails'
       */
      val humanDetails: HumanDetails?
    )
  }

  companion object {
    const val OPERATION_ID: String =
        "95ffb2ac3daa9734e241ef2b3224b2a33ffff59e695e9a5ce2e7b9d6ed43fae4"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   hero {
     *     __typename
     *     ...HeroDetails
     *     ...HumanDetails
     *   }
     * }
     *
     * fragment CharacterDetails on Character {
     *   name
     *   birthDate
     * }
     *
     * fragment HeroDetails on Character {
     *   __typename
     *   name
     *   ...CharacterDetails
     * }
     *
     * fragment HumanDetails on Human {
     *   __typename
     *   name
     *   ...CharacterDetails
     * }
     */
    const val OPERATION_DOCUMENT: String =
        "query TestQuery { hero { __typename ...HeroDetails ...HumanDetails } }  fragment CharacterDetails on Character { name birthDate }  fragment HeroDetails on Character { __typename name ...CharacterDetails }  fragment HumanDetails on Human { __typename name ...CharacterDetails }"

    const val OPERATION_NAME: String = "TestQuery"
  }
}
