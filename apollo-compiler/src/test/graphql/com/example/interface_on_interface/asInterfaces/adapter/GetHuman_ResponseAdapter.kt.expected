//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.interface_on_interface.GetHuman
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object GetHuman_ResponseAdapter {
  object Data : ResponseAdapter<GetHuman.Data> {
    val RESPONSE_NAMES: List<String> = listOf("human", "node")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetHuman.Data {
      var human: GetHuman.Data.Human? = null
      var node: GetHuman.Data.Node? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> human = Human.obj().fromResponse(reader, responseAdapterCache)
          1 -> node = Node.obj().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return GetHuman.Data(
        human = human!!,
        node = node!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetHuman.Data
    ) {
      writer.name("human")
      Human.obj().toResponse(writer, responseAdapterCache, value.human)
      writer.name("node")
      Node.obj().toResponse(writer, responseAdapterCache, value.node)
    }

    object Human : ResponseAdapter<GetHuman.Data.Human> {
      val RESPONSE_NAMES: List<String> = listOf("id", "name", "height")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetHuman.Data.Human {
        var id: String? = null
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = DoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHuman.Data.Human(
          id = id!!,
          name = name!!,
          height = height!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.Human
      ) {
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        DoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }
    }

    object Node : ResponseAdapter<GetHuman.Data.Node> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetHuman.Data.Node {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Human",
          -> HumanNode.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherNode.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.Node
      ) {
        when(value) {
          is GetHuman.Data.HumanNode -> HumanNode.toResponse(writer, responseAdapterCache, value)
          is GetHuman.Data.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object HumanNode {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "height")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): GetHuman.Data.HumanNode {
        var __typename: String? = typename
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> height = DoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHuman.Data.HumanNode(
          __typename = __typename!!,
          height = height!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.HumanNode
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("height")
        DoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }
    }

    object OtherNode {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): GetHuman.Data.OtherNode {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHuman.Data.OtherNode(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.OtherNode
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
