//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.interface_on_interface.GetHuman
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object GetHuman_ResponseAdapter {
  object Data : Adapter<GetHuman.Data> {
    val RESPONSE_NAMES: List<String> = listOf("human", "node")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetHuman.Data {
      var human: GetHuman.Human? = null
      var node: GetHuman.Node? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> human = Human.obj().fromJson(reader, customScalarAdapters)
          1 -> node = Node.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetHuman.Data(
        human = human!!,
        node = node!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetHuman.Data
    ) {
      writer.name("human")
      Human.obj().toJson(writer, customScalarAdapters, value.human)

      writer.name("node")
      Node.obj(true).toJson(writer, customScalarAdapters, value.node)
    }
  }

  object Human : Adapter<GetHuman.Human> {
    val RESPONSE_NAMES: List<String> = listOf("id", "name", "height")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetHuman.Human {
      var id: String? = null
      var name: String? = null
      var height: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> height = DoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetHuman.Human(
        id = id!!,
        name = name!!,
        height = height!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetHuman.Human
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("height")
      DoubleAdapter.toJson(writer, customScalarAdapters, value.height)
    }
  }

  object Node : Adapter<GetHuman.Node> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetHuman.Node {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asHuman: GetHuman.AsHuman? = null
      if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
        asHuman = com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      return GetHuman.Node(
        __typename = __typename,
        asHuman = asHuman
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetHuman.Node
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asHuman != null) {
        com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }
    }
  }

  object AsHuman : Adapter<GetHuman.AsHuman> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "height")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetHuman.AsHuman {
      var __typename: String? = null
      var height: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> height = DoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetHuman.AsHuman(
        __typename = __typename!!,
        height = height!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: GetHuman.AsHuman
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("height")
      DoubleAdapter.toJson(writer, customScalarAdapters, value.height)
    }
  }
}
