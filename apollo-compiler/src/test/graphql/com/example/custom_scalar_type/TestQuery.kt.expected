//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.custom_scalar_type

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.custom_scalar_type.adapter.TestQuery_ResponseAdapter
import com.example.custom_scalar_type.responsefields.TestQuery_ResponseFields
import java.util.Date
import kotlin.Any
import kotlin.String
import kotlin.collections.List

class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    // This operation doesn't have variables
  }

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> =
      TestQuery_ResponseFields.fields.first().fieldSets
  data class Data(
    val hero: Hero?
  ) : Query.Data {
    data class Hero(
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The date character was born.
       */
      val birthDate: Date,
      /**
       * The dates of appearances
       */
      val appearanceDates: List<Date>,
      /**
       * The date character was born.
       */
      val fieldWithUnsupportedType: Any,
      /**
       * Profile link
       */
      val profileLink: java.lang.String,
      /**
       * Links
       */
      val links: List<java.lang.String>
    )
  }

  companion object {
    const val OPERATION_ID: String = "TestQuery"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    name
          |    birthDate
          |    appearanceDates
          |    fieldWithUnsupportedType
          |    profileLink
          |    links
          |  }
          |}
          """.trimMargin()
        )

    const val OPERATION_NAME: String = "TestQuery"
  }
}
