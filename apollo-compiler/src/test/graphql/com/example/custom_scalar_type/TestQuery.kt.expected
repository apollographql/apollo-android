// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.custom_scalar_type

import com.apollographql.apollo3.api.Operation
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.custom_scalar_type.adapter.TestQuery_Adapter
import com.example.custom_scalar_type.adapter.TestQuery_ResponseAdapter
import java.util.Date
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    responseAdapterCache.getVariablesAdapterFor(this::class) {
      TestQuery_Adapter(responseAdapterCache)
    }.toResponse(writer, this)
  }

  override fun name(): String = OPERATION_NAME

  override fun adapter(responseAdapterCache: ResponseAdapterCache): ResponseAdapter<Data> {
    val adapter = responseAdapterCache.getAdapterFor(this::class) {
      TestQuery_ResponseAdapter(responseAdapterCache)
    }
    return adapter
  }

  override fun responseFields(): List<ResponseField.FieldSet> = listOf(
    ResponseField.FieldSet(null, TestQuery_ResponseAdapter.RESPONSE_FIELDS)
  )
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Operation.Data {
    /**
     * A character from the Star Wars universe
     */
    data class Hero(
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The date character was born.
       */
      val birthDate: Date,
      /**
       * The dates of appearances
       */
      val appearanceDates: List<Date>,
      /**
       * The date character was born.
       */
      val fieldWithUnsupportedType: Any,
      /**
       * Profile link
       */
      val profileLink: java.lang.String,
      /**
       * Links
       */
      val links: List<java.lang.String>
    )
  }

  companion object {
    const val OPERATION_ID: String =
        "8f6fd98f3592845e0a3eb760b37ff5bcdad7edc2cbbdfd8350af519bd3a26b19"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    name
          |    birthDate
          |    appearanceDates
          |    fieldWithUnsupportedType
          |    profileLink
          |    links
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
