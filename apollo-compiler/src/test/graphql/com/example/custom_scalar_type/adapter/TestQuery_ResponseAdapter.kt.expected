//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.custom_scalar_type.adapter

import com.apollographql.apollo3.api.AnyResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.custom_scalar_type.TestQuery
import com.example.custom_scalar_type.type.CustomScalars
import java.util.Date
import kotlin.Any
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("name", "birthDate", "appearanceDates",
          "fieldWithUnsupportedType", "profileLink", "links")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero {
        var name: String? = null
        var birthDate: Date? = null
        var appearanceDates: List<Date>? = null
        var fieldWithUnsupportedType: Any? = null
        var profileLink: java.lang.String? = null
        var links: List<java.lang.String>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> birthDate = responseAdapterCache.responseAdapterFor<Date>(CustomScalars.Date).fromResponse(reader,
                responseAdapterCache)
            2 -> appearanceDates = responseAdapterCache.responseAdapterFor<Date>(CustomScalars.Date).list().fromResponse(reader,
                responseAdapterCache)
            3 -> fieldWithUnsupportedType = AnyResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            4 -> profileLink = responseAdapterCache.responseAdapterFor<java.lang.String>(CustomScalars.URL).fromResponse(reader,
                responseAdapterCache)
            5 -> links = responseAdapterCache.responseAdapterFor<java.lang.String>(CustomScalars.URL).list().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Hero(
          name = name!!,
          birthDate = birthDate!!,
          appearanceDates = appearanceDates!!,
          fieldWithUnsupportedType = fieldWithUnsupportedType!!,
          profileLink = profileLink!!,
          links = links!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero
      ) {
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("birthDate")
        responseAdapterCache.responseAdapterFor<Date>(CustomScalars.Date).toResponse(writer,
            responseAdapterCache, value.birthDate)
        writer.name("appearanceDates")
        responseAdapterCache.responseAdapterFor<Date>(CustomScalars.Date).list().toResponse(writer,
            responseAdapterCache, value.appearanceDates)
        writer.name("fieldWithUnsupportedType")
        AnyResponseAdapter.toResponse(writer, responseAdapterCache, value.fieldWithUnsupportedType)
        writer.name("profileLink")
        responseAdapterCache.responseAdapterFor<java.lang.String>(CustomScalars.URL).toResponse(writer,
            responseAdapterCache, value.profileLink)
        writer.name("links")
        responseAdapterCache.responseAdapterFor<java.lang.String>(CustomScalars.URL).list().toResponse(writer,
            responseAdapterCache, value.links)
      }
    }
  }
}
