//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asQuery: TestQuery.AsQuery? = null
      if (possibleTypes("Query").evaluate(emptySet(), __typename)) {
        asQuery = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Data(
        __typename = __typename,
        asQuery = asQuery
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asQuery != null) {
        com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.toJson(writer,
            customScalarAdapters, value.asQuery)
      }
    }

    object AsQuery : Adapter<TestQuery.AsQuery> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.AsQuery {
        var __typename: String? = null
        var hero: TestQuery.Hero? = null
        var droid: TestQuery.Droid? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
            2 -> droid = Droid.obj(true).nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.AsQuery(
          __typename = __typename!!,
          hero = hero,
          droid = droid
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.AsQuery
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("hero")
        Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)

        writer.name("droid")
        Droid.obj(true).nullable().toJson(writer, customScalarAdapters, value.droid)
      }

      object Hero : Adapter<TestQuery.Hero> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Hero {
          var __typename: String? = null
          var name: String? = null
          var appearsIn: List<Episode?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var asHuman: TestQuery.AsHuman? = null
          if (possibleTypes("Human").evaluate(emptySet(), __typename)) {
            asHuman = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.Hero.AsHuman.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.Hero(
            __typename = __typename,
            name = name!!,
            appearsIn = appearsIn!!,
            asHuman = asHuman
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Hero
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
              value.appearsIn)

          if (value.asHuman != null) {
            com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.Hero.AsHuman.toJson(writer,
                customScalarAdapters, value.asHuman)
          }
        }

        object AsHuman : Adapter<TestQuery.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("height", "__typename", "name", "appearsIn")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.AsHuman {
            var height: Double? = null
            var __typename: String? = null
            var name: String? = null
            var appearsIn: List<Episode?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                3 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
                    customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.AsHuman(
              height = height,
              __typename = __typename!!,
              name = name!!,
              appearsIn = appearsIn!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.AsHuman
          ) {
            writer.name("height")
            NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)

            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)

            writer.name("appearsIn")
            Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
                value.appearsIn)
          }
        }
      }

      object Droid : Adapter<TestQuery.Droid> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Droid {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var asDroid: TestQuery.AsDroid? = null
          if (possibleTypes("Droid").evaluate(emptySet(), __typename)) {
            asDroid = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.Droid.AsDroid.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.Droid(
            __typename = __typename,
            asDroid = asDroid
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Droid
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          if (value.asDroid != null) {
            com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.AsQuery.Droid.AsDroid.toJson(writer,
                customScalarAdapters, value.asDroid)
          }
        }

        object AsDroid : Adapter<TestQuery.AsDroid> {
          val RESPONSE_NAMES: List<String> = listOf("name", "primaryFunction", "__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
              TestQuery.AsDroid {
            var name: String? = null
            var primaryFunction: String? = null
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.AsDroid(
              name = name!!,
              primaryFunction = primaryFunction,
              __typename = __typename!!
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            value: TestQuery.AsDroid
          ) {
            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)

            writer.name("primaryFunction")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
          }
        }
      }
    }
  }
}
