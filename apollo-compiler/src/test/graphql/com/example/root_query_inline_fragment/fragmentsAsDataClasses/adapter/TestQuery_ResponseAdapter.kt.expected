// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ListResponseAdapter
import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

  private val AsQueryAdapter: AsQuery =
      com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.AsQuery(responseAdapterCache)

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    val reader = reader.buffer()
    reader.beginObject()

    var __typename: String? = null
    var asAsQuery: TestQuery.Data.AsQuery? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        else -> break
      }
    }
    if (__typename in arrayOf("Query")) {
      reader.rewind()
      asAsQuery = AsQueryAdapter.fromResponse(reader, __typename)
    }

    return TestQuery.Data(
      __typename = __typename!!,
      asAsQuery = asAsQuery
    )
    .also { reader.endObject() }
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    if (value.asAsQuery != null) AsQueryAdapter.toResponse(writer, value.asAsQuery)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class AsQuery(
    responseAdapterCache: ResponseAdapterCache
  ) {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val nullableHeroAdapter: ResponseAdapter<TestQuery.Data.AsQuery.Hero?> =
        NullableResponseAdapter(Hero(responseAdapterCache))

    private val nullableDroidAdapter: ResponseAdapter<TestQuery.Data.AsQuery.Droid?> =
        NullableResponseAdapter(Droid(responseAdapterCache))

    fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.AsQuery {
      var __typename: String? = __typename
      var hero: TestQuery.Data.AsQuery.Hero? = null
      var droid: TestQuery.Data.AsQuery.Droid? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> hero = nullableHeroAdapter.fromResponse(reader)
          2 -> droid = nullableDroidAdapter.fromResponse(reader)
          else -> break
        }
      }
      return TestQuery.Data.AsQuery(
        __typename = __typename!!,
        hero = hero,
        droid = droid
      )
    }

    fun toResponse(writer: JsonWriter, value: TestQuery.Data.AsQuery) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      writer.name("hero")
      nullableHeroAdapter.toResponse(writer, value.hero)
      writer.name("droid")
      nullableDroidAdapter.toResponse(writer, value.droid)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Object("Character"),
          fieldName = "hero",
          fieldSets = listOf(
            ResponseField.FieldSet("Human", Hero.AsHuman.RESPONSE_FIELDS),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Object("Droid"),
          fieldName = "droid",
          arguments = mapOf<String, Any?>(
            "id" to 1),
          fieldSets = listOf(
            ResponseField.FieldSet("Droid", Droid.AsDroid.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Hero(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<TestQuery.Data.AsQuery.Hero> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val listOfNullableEpisodeAdapter: ResponseAdapter<List<Episode?>> =
          ListResponseAdapter(NullableResponseAdapter(Episode_ResponseAdapter))

      private val AsHumanAdapter: AsHuman =
          com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.AsQuery.Hero.AsHuman(responseAdapterCache)

      override fun fromResponse(reader: JsonReader): TestQuery.Data.AsQuery.Hero {
        val reader = reader.buffer()
        reader.beginObject()

        var __typename: String? = null
        var name: String? = null
        var appearsIn: List<Episode?>? = null
        var asAsHuman: TestQuery.Data.AsQuery.Hero.AsHuman? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> appearsIn = listOfNullableEpisodeAdapter.fromResponse(reader)
            else -> break
          }
        }
        if (__typename in arrayOf("Human")) {
          reader.rewind()
          asAsHuman = AsHumanAdapter.fromResponse(reader, __typename)
        }

        return TestQuery.Data.AsQuery.Hero(
          __typename = __typename!!,
          name = name!!,
          appearsIn = appearsIn!!,
          asAsHuman = asAsHuman
        )
        .also { reader.endObject() }
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.AsQuery.Hero) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)

        writer.name("name")
        stringAdapter.toResponse(writer, value.name)

        writer.name("appearsIn")
        listOfNullableEpisodeAdapter.toResponse(writer, value.appearsIn)
        if (value.asAsHuman != null) AsHumanAdapter.toResponse(writer, value.asAsHuman)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
            fieldName = "appearsIn",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class AsHuman(
        responseAdapterCache: ResponseAdapterCache
      ) {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val listOfNullableEpisodeAdapter: ResponseAdapter<List<Episode?>> =
            ListResponseAdapter(NullableResponseAdapter(Episode_ResponseAdapter))

        private val nullableFloatAdapter: ResponseAdapter<Double?> =
            NullableResponseAdapter(DoubleResponseAdapter)

        fun fromResponse(reader: JsonReader, __typename: String?):
            TestQuery.Data.AsQuery.Hero.AsHuman {
          var __typename: String? = __typename
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var height: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = stringAdapter.fromResponse(reader)
              1 -> name = stringAdapter.fromResponse(reader)
              2 -> appearsIn = listOfNullableEpisodeAdapter.fromResponse(reader)
              3 -> height = nullableFloatAdapter.fromResponse(reader)
              else -> break
            }
          }
          return TestQuery.Data.AsQuery.Hero.AsHuman(
            __typename = __typename!!,
            name = name!!,
            appearsIn = appearsIn!!,
            height = height
          )
        }

        fun toResponse(writer: JsonWriter, value: TestQuery.Data.AsQuery.Hero.AsHuman) {
          writer.beginObject()
          writer.name("__typename")
          stringAdapter.toResponse(writer, value.__typename)
          writer.name("name")
          stringAdapter.toResponse(writer, value.name)
          writer.name("appearsIn")
          listOfNullableEpisodeAdapter.toResponse(writer, value.appearsIn)
          writer.name("height")
          nullableFloatAdapter.toResponse(writer, value.height)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type =
                  ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
              fieldName = "appearsIn",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "height",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }
      }
    }

    class Droid(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<TestQuery.Data.AsQuery.Droid> {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      private val AsDroidAdapter: AsDroid =
          com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.AsQuery.Droid.AsDroid(responseAdapterCache)

      override fun fromResponse(reader: JsonReader): TestQuery.Data.AsQuery.Droid {
        val reader = reader.buffer()
        reader.beginObject()

        var __typename: String? = null
        var asAsDroid: TestQuery.Data.AsQuery.Droid.AsDroid? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        if (__typename in arrayOf("Droid")) {
          reader.rewind()
          asAsDroid = AsDroidAdapter.fromResponse(reader, __typename)
        }

        return TestQuery.Data.AsQuery.Droid(
          __typename = __typename!!,
          asAsDroid = asAsDroid
        )
        .also { reader.endObject() }
      }

      override fun toResponse(writer: JsonWriter, value: TestQuery.Data.AsQuery.Droid) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        if (value.asAsDroid != null) AsDroidAdapter.toResponse(writer, value.asAsDroid)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class AsDroid(
        responseAdapterCache: ResponseAdapterCache
      ) {
        private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

        private val nullableStringAdapter: ResponseAdapter<String?> =
            NullableResponseAdapter(StringResponseAdapter)

        fun fromResponse(reader: JsonReader, __typename: String?):
            TestQuery.Data.AsQuery.Droid.AsDroid {
          var __typename: String? = __typename
          var name: String? = null
          var primaryFunction: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = stringAdapter.fromResponse(reader)
              1 -> name = stringAdapter.fromResponse(reader)
              2 -> primaryFunction = nullableStringAdapter.fromResponse(reader)
              else -> break
            }
          }
          return TestQuery.Data.AsQuery.Droid.AsDroid(
            __typename = __typename!!,
            name = name!!,
            primaryFunction = primaryFunction
          )
        }

        fun toResponse(writer: JsonWriter, value: TestQuery.Data.AsQuery.Droid.AsDroid) {
          writer.beginObject()
          writer.name("__typename")
          stringAdapter.toResponse(writer, value.__typename)
          writer.name("name")
          stringAdapter.toResponse(writer, value.name)
          writer.name("primaryFunction")
          nullableStringAdapter.toResponse(writer, value.primaryFunction)
          writer.endObject()
        }

        companion object {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "primaryFunction",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
        }
      }
    }
  }
}
