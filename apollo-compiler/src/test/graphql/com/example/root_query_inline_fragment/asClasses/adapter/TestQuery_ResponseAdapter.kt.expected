//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "asQuery")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var __typename: String? = null
      var asQuery: TestQuery.Data.AsQuery? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> asQuery = AsQuery.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        __typename = __typename!!,
        asQuery = asQuery
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("asQuery")
      AsQuery.nullable().toResponse(writer, responseAdapterCache, value.asQuery)
    }

    object AsQuery : ResponseAdapter<TestQuery.Data.AsQuery> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.AsQuery {
        var __typename: String? = null
        var hero: TestQuery.Data.AsQuery.Hero? = null
        var droid: TestQuery.Data.AsQuery.Droid? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
            2 -> droid = Droid.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.AsQuery(
          __typename = __typename!!,
          hero = hero,
          droid = droid
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.AsQuery
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("hero")
        Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
        writer.name("droid")
        Droid.nullable().toResponse(writer, responseAdapterCache, value.droid)
      }

      object Hero : ResponseAdapter<TestQuery.Data.AsQuery.Hero> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn", "asHuman")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.AsQuery.Hero {
          var __typename: String? = null
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var asHuman: TestQuery.Data.AsQuery.Hero.AsHuman? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                  responseAdapterCache)
              3 -> asHuman = AsHuman.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.AsQuery.Hero(
            __typename = __typename!!,
            name = name!!,
            appearsIn = appearsIn!!,
            asHuman = asHuman
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.AsQuery.Hero
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
              value.appearsIn)
          writer.name("asHuman")
          AsHuman.nullable().toResponse(writer, responseAdapterCache, value.asHuman)
        }

        object AsHuman : ResponseAdapter<TestQuery.Data.AsQuery.Hero.AsHuman> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn", "height")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.AsQuery.Hero.AsHuman {
            var __typename: String? = null
            var name: String? = null
            var appearsIn: List<Episode?>? = null
            var height: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                    responseAdapterCache)
                3 -> height = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.AsQuery.Hero.AsHuman(
              __typename = __typename!!,
              name = name!!,
              appearsIn = appearsIn!!,
              height = height
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.AsQuery.Hero.AsHuman
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("appearsIn")
            Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
                value.appearsIn)
            writer.name("height")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
          }
        }
      }

      object Droid : ResponseAdapter<TestQuery.Data.AsQuery.Droid> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "asDroid")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.AsQuery.Droid {
          var __typename: String? = null
          var asDroid: TestQuery.Data.AsQuery.Droid.AsDroid? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> asDroid = AsDroid.nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.AsQuery.Droid(
            __typename = __typename!!,
            asDroid = asDroid
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.AsQuery.Droid
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("asDroid")
          AsDroid.nullable().toResponse(writer, responseAdapterCache, value.asDroid)
        }

        object AsDroid : ResponseAdapter<TestQuery.Data.AsQuery.Droid.AsDroid> {
          val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestQuery.Data.AsQuery.Droid.AsDroid {
            var __typename: String? = null
            var name: String? = null
            var primaryFunction: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.AsQuery.Droid.AsDroid(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.AsQuery.Droid.AsDroid
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("primaryFunction")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                value.primaryFunction)
          }
        }
      }
    }
  }
}
