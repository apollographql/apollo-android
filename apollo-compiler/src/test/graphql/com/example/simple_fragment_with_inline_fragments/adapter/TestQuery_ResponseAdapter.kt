// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.simple_fragment_with_inline_fragments.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.doubleResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.example.simple_fragment_with_inline_fragments.TestQuery
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  customScalarAdapters: CustomScalarAdapters
) : ResponseAdapter<TestQuery.Data> {
  val nullableHeroAdapter: ResponseAdapter<TestQuery.Data.Hero?> =
      NullableResponseAdapter(Hero(customScalarAdapters))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var hero: TestQuery.Data.Hero? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> hero = nullableHeroAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      hero = hero
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("hero")
    nullableHeroAdapter.toResponse(writer, value.hero)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", Hero.CharacterHero.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", Hero.CharacterHero.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Hero.OtherHero.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Hero(
    customScalarAdapters: CustomScalarAdapters
  ) : ResponseAdapter<TestQuery.Data.Hero> {
    val CharacterHeroAdapter: CharacterHero =
        com.example.simple_fragment_with_inline_fragments.adapter.TestQuery_ResponseAdapter.Hero.CharacterHero(customScalarAdapters)

    val OtherHeroAdapter: OtherHero =
        com.example.simple_fragment_with_inline_fragments.adapter.TestQuery_ResponseAdapter.Hero.OtherHero(customScalarAdapters)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Hero {
      reader.beginObject()
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()

      return when(typename) {
        "Droid" -> CharacterHeroAdapter.fromResponse(reader, typename)
        "Human" -> CharacterHeroAdapter.fromResponse(reader, typename)
        else -> OtherHeroAdapter.fromResponse(reader, typename)
      }
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Hero) {
      when(value) {
        is TestQuery.Data.Hero.CharacterHero -> CharacterHeroAdapter.toResponse(writer, value)
        is TestQuery.Data.Hero.OtherHero -> OtherHeroAdapter.toResponse(writer, value)
      }
    }

<<<<<<< HEAD
    class CharacterHero(
      customScalarAdapters: CustomScalarAdapters
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      val nullableListOfNullableFriendsAdapter:
          ResponseAdapter<List<TestQuery.Data.Hero.CharacterHero.Friends?>?> =
          NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Friends(customScalarAdapters))))

      fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.Hero.CharacterHero {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestQuery.Data.Hero.CharacterHero.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = stringAdapter.fromResponse(reader)
            2 -> friends = nullableListOfNullableFriendsAdapter.fromResponse(reader)
            else -> break
=======
    object CharacterHero : ResponseAdapter<TestQuery.Data.Hero.CharacterHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          responseName = "friends",
          fieldName = "friends",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = listOf(
            ResponseField.FieldSet("Human", Friends.HumanFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet("Droid", Friends.DroidFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.Hero.CharacterHero {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var friends: List<TestQuery.Data.Hero.CharacterHero.Friends?>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> friends = readList<TestQuery.Data.Hero.CharacterHero.Friends>(RESPONSE_FIELDS[2]) { reader ->
                reader.readObject<TestQuery.Data.Hero.CharacterHero.Friends> { reader ->
                  Friends.fromResponse(reader)
                }
              }
              else -> break
            }
>>>>>>> dev-3.x
          }
        }
        return TestQuery.Data.Hero.CharacterHero(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

<<<<<<< HEAD
      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Hero.CharacterHero) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        stringAdapter.toResponse(writer, value.name)
        writer.name("friends")
        nullableListOfNullableFriendsAdapter.toResponse(writer, value.friends)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Human", Friends.HumanFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet("Droid", Friends.DroidFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Friends(
        customScalarAdapters: CustomScalarAdapters
      ) : ResponseAdapter<TestQuery.Data.Hero.CharacterHero.Friends> {
        val HumanFriendsAdapter: HumanFriends =
            com.example.simple_fragment_with_inline_fragments.adapter.TestQuery_ResponseAdapter.Hero.CharacterHero.Friends.HumanFriends(customScalarAdapters)

        val DroidFriendsAdapter: DroidFriends =
            com.example.simple_fragment_with_inline_fragments.adapter.TestQuery_ResponseAdapter.Hero.CharacterHero.Friends.DroidFriends(customScalarAdapters)

        val OtherFriendsAdapter: OtherFriends =
            com.example.simple_fragment_with_inline_fragments.adapter.TestQuery_ResponseAdapter.Hero.CharacterHero.Friends.OtherFriends(customScalarAdapters)

        override fun fromResponse(reader: JsonReader): TestQuery.Data.Hero.CharacterHero.Friends {
          reader.beginObject()
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()

          return when(typename) {
            "Human" -> HumanFriendsAdapter.fromResponse(reader, typename)
            "Droid" -> DroidFriendsAdapter.fromResponse(reader, typename)
            else -> OtherFriendsAdapter.fromResponse(reader, typename)
=======
      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Hero.CharacterHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeList(RESPONSE_FIELDS[2], value.friends) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            Friends.toResponse(writer, value)
          }
        }
      }

      object Friends : ResponseAdapter<TestQuery.Data.Hero.CharacterHero.Friends> {
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.Hero.CharacterHero.Friends {
          val typename = __typename ?: reader.readString(ResponseField.Typename)
          return when(typename) {
            "Human" -> HumanFriends.fromResponse(reader, typename)
            "Droid" -> DroidFriends.fromResponse(reader, typename)
            else -> OtherFriends.fromResponse(reader, typename)
>>>>>>> dev-3.x
          }
          .also { reader.endObject() }
        }

<<<<<<< HEAD
        override fun toResponse(writer: JsonWriter,
            value: TestQuery.Data.Hero.CharacterHero.Friends) {
          when(value) {
            is TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends -> HumanFriendsAdapter.toResponse(writer, value)
            is TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends -> DroidFriendsAdapter.toResponse(writer, value)
            is TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends -> OtherFriendsAdapter.toResponse(writer, value)
          }
        }

        class HumanFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableFloatAdapter: ResponseAdapter<Double?> =
              NullableResponseAdapter(doubleResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends {
            var __typename: String? = __typename
            var name: String? = null
            var height: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> height = nullableFloatAdapter.fromResponse(reader)
                else -> break
              }
=======
        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.Hero.CharacterHero.Friends) {
          when(value) {
            is TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends -> HumanFriends.toResponse(writer, value)
            is TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends -> DroidFriends.toResponse(writer, value)
            is TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends -> OtherFriends.toResponse(writer, value)
          }
        }

        object HumanFriends :
            ResponseAdapter<TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              responseName = "height",
              fieldName = "height",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var height: Double? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> height = readDouble(RESPONSE_FIELDS[2])
                  else -> break
                }
              }
              TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends(
                __typename = __typename!!,
                name = name!!,
                height = height
              )
>>>>>>> dev-3.x
            }
            return TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends(
              __typename = __typename!!,
              name = name!!,
              height = height
            )
          }

<<<<<<< HEAD
          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("height")
            nullableFloatAdapter.toResponse(writer, value.height)
            writer.endObject()
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.HumanFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeDouble(RESPONSE_FIELDS[2], value.height)
>>>>>>> dev-3.x
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("Float"),
                fieldName = "height",
              )
=======
        object DroidFriends :
            ResponseAdapter<TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              responseName = "primaryFunction",
              fieldName = "primaryFunction",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
>>>>>>> dev-3.x
            )

<<<<<<< HEAD
            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }

        class DroidFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          val nullableStringAdapter: ResponseAdapter<String?> =
              NullableResponseAdapter(stringResponseAdapter)

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends {
            var __typename: String? = __typename
            var name: String? = null
            var primaryFunction: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                2 -> primaryFunction = nullableStringAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              var primaryFunction: String? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  2 -> primaryFunction = readString(RESPONSE_FIELDS[2])
                  else -> break
                }
              }
              TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends(
                __typename = __typename!!,
                name = name!!,
                primaryFunction = primaryFunction
              )
>>>>>>> dev-3.x
            }
            return TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction
            )
          }

<<<<<<< HEAD
          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.name("primaryFunction")
            nullableStringAdapter.toResponse(writer, value.primaryFunction)
            writer.endObject()
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.DroidFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
            writer.writeString(RESPONSE_FIELDS[2], value.primaryFunction)
>>>>>>> dev-3.x
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("String"),
                fieldName = "primaryFunction",
              )
=======
        object OtherFriends :
            ResponseAdapter<TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "name",
              fieldName = "name",
              arguments = emptyMap(),
              conditions = emptyList(),
              fieldSets = emptyList(),
>>>>>>> dev-3.x
            )

<<<<<<< HEAD
            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }

        class OtherFriends(
          customScalarAdapters: CustomScalarAdapters
        ) {
          val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

          fun fromResponse(reader: JsonReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends {
            var __typename: String? = __typename
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> name = stringAdapter.fromResponse(reader)
                else -> break
              }
=======
          override fun fromResponse(reader: ResponseReader, __typename: String?):
              TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends {
            return reader.run {
              var __typename: String? = __typename
              var name: String? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> name = readString(RESPONSE_FIELDS[1])
                  else -> break
                }
              }
              TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends(
                __typename = __typename!!,
                name = name!!
              )
>>>>>>> dev-3.x
            }
            return TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends(
              __typename = __typename!!,
              name = name!!
            )
          }

          fun toResponse(writer: JsonWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("name")
            stringAdapter.toResponse(writer, value.name)
            writer.endObject()
          }

<<<<<<< HEAD
          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
=======
          override fun toResponse(writer: ResponseWriter,
              value: TestQuery.Data.Hero.CharacterHero.Friends.OtherFriends) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.name)
>>>>>>> dev-3.x
          }
        }
      }
    }

    class OtherHero(
      customScalarAdapters: CustomScalarAdapters
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.Hero.OtherHero {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestQuery.Data.Hero.OtherHero(
          __typename = __typename!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Hero.OtherHero) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
