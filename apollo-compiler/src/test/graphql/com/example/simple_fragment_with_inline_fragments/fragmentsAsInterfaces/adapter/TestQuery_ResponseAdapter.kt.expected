//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.simple_fragment_with_inline_fragments.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.example.simple_fragment_with_inline_fragments.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.nullable().toResponse(writer, responseAdapterCache, value.hero)
    }

    object Hero : ResponseAdapter<TestQuery.Data.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var name: String? = null
        var friends: List<TestQuery.Data.Hero.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Hero(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Hero
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.nullable().list().nullable().toResponse(writer, responseAdapterCache, value.friends)
      }

      object Friends : ResponseAdapter<TestQuery.Data.Hero.Friends> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Hero.Friends {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "Droid",
            -> DroidFriends.fromResponse(reader, responseAdapterCache, __typename)
            "Human",
            -> HumanFriends.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherFriends.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.Friends
        ) {
          when(value) {
            is TestQuery.Data.Hero.DroidFriends -> DroidFriends.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.Hero.HumanFriends -> HumanFriends.toResponse(writer,
                responseAdapterCache, value)
            is TestQuery.Data.Hero.OtherFriends -> OtherFriends.toResponse(writer,
                responseAdapterCache, value)
          }
        }
      }

      object OtherFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.Hero.OtherFriends {
          var __typename: String? = __typename
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.OtherFriends(
            __typename = __typename!!,
            name = name!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.OtherFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }

      object DroidFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.Hero.DroidFriends {
          var __typename: String? = __typename
          var name: String? = null
          var primaryFunction: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.DroidFriends(
            __typename = __typename!!,
            name = name!!,
            primaryFunction = primaryFunction
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.DroidFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("primaryFunction")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
              value.primaryFunction)
        }
      }

      object HumanFriends {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String
        ): TestQuery.Data.Hero.HumanFriends {
          var __typename: String? = __typename
          var name: String? = null
          var height: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Hero.HumanFriends(
            __typename = __typename!!,
            name = name!!,
            height = height
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Hero.HumanFriends
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("height")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        }
      }
    }
  }
}
