// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.example.fragment_in_fragment.adapter.AllStarship_ResponseAdapter
import com.example.fragment_in_fragment.fragment.PilotFragment
import com.example.fragment_in_fragment.fragment.PlanetFragment
import com.example.fragment_in_fragment.fragment.StarshipFragment
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class AllStarship : Query<AllStarship.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES

  override fun name(): OperationName = OPERATION_NAME

  override fun responseFieldMapper(): ResponseFieldMapper<Data> {
    return ResponseFieldMapper { reader ->
      AllStarship_ResponseAdapter.fromResponse(reader)
    }
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> {
    return parse(Buffer().write(byteString), scalarTypeAdapters)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> {
    return parse(source, DEFAULT)
  }

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> {
    return parse(byteString, DEFAULT)
  }

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString {
    return OperationRequestBodyComposer.compose(
      operation = this,
      autoPersistQueries = false,
      withQueryDocument = true,
      scalarTypeAdapters = scalarTypeAdapters
    )
  }

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class Data(
    val allStarships: AllStarship?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller {
      return ResponseFieldMarshaller { writer ->
        AllStarship_ResponseAdapter.Data.toResponse(writer, this)
      }
    }

    /**
     * A connection to a list of items.
     */
    data class AllStarship(
      /**
       * A list of edges.
       */
      val edges: List<Edge?>?
    ) {
      fun marshaller(): ResponseFieldMarshaller {
        return ResponseFieldMarshaller { writer ->
          AllStarship_ResponseAdapter.Data.AllStarship.toResponse(writer, this)
        }
      }

      fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      /**
       * An edge in a connection.
       */
      data class Edge(
        /**
         * The item at the end of the edge
         */
        val node: Node?
      ) {
        fun marshaller(): ResponseFieldMarshaller {
          return ResponseFieldMarshaller { writer ->
            AllStarship_ResponseAdapter.Data.AllStarship.Edge.toResponse(writer, this)
          }
        }

        /**
         * A single transport craft that has hyperdrive capability.
         */
        interface Node {
          val __typename: String

          fun marshaller(): ResponseFieldMarshaller

          interface Starship : Node, StarshipFragment {
            override val __typename: String

            /**
             * The ID of an object
             */
            override val id: String

            /**
             * The name of this starship. The common name, such as "Death Star".
             */
            override val name: String?

            override val pilotConnection: PilotConnection?

            override fun marshaller(): ResponseFieldMarshaller

            /**
             * A connection to a list of items.
             */
            interface PilotConnection : StarshipFragment.PilotConnection {
              /**
               * A list of edges.
               */
              override val edges: List<Edge?>?

              override fun marshaller(): ResponseFieldMarshaller

              /**
               * An edge in a connection.
               */
              interface Edge : StarshipFragment.PilotConnection.Edge {
                /**
                 * The item at the end of the edge
                 */
                override val node: Node?

                override fun marshaller(): ResponseFieldMarshaller

                /**
                 * An individual person or character within the Star Wars universe.
                 */
                interface Node : StarshipFragment.PilotConnection.Edge.Node {
                  override val __typename: String

                  override fun marshaller(): ResponseFieldMarshaller

                  interface Person : Node, PilotFragment,
                      StarshipFragment.PilotConnection.Edge.Node.Person,
                      StarshipFragment.PilotConnection.Edge.Node {
                    override val __typename: String

                    /**
                     * The name of this person.
                     */
                    override val name: String?

                    /**
                     * A planet that this person was born on or inhabits.
                     */
                    override val homeworld: Homeworld?

                    override fun marshaller(): ResponseFieldMarshaller

                    /**
                     * A large mass, planet or planetoid in the Star Wars Universe, at the time of
                     * 0 ABY.
                     */
                    interface Homeworld : PilotFragment.Homeworld,
                        StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld {
                      override val __typename: String

                      override fun marshaller(): ResponseFieldMarshaller

                      interface Planet : Homeworld, PlanetFragment, PilotFragment.Homeworld.Planet,
                          PilotFragment.Homeworld,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld {
                        override val __typename: String

                        /**
                         * The name of this planet.
                         */
                        override val name: String?

                        override fun marshaller(): ResponseFieldMarshaller
                      }

                      companion object {
                        fun Homeworld.asPlanet(): Planet? = this as? Planet

                        fun Homeworld.planetFragment(): PlanetFragment? = this as? PlanetFragment
                      }
                    }
                  }

                  companion object {
                    fun Node.asPerson(): Person? = this as? Person

                    fun Node.pilotFragment(): PilotFragment? = this as? PilotFragment
                  }
                }
              }
            }
          }

          data class StarshipNode(
            override val __typename: String,
            /**
             * The ID of an object
             */
            override val id: String,
            /**
             * The name of this starship. The common name, such as "Death Star".
             */
            override val name: String?,
            override val pilotConnection: PilotConnection?
          ) : Node, Starship, StarshipFragment {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.toResponse(writer, this)
              }
            }

            /**
             * A connection to a list of items.
             */
            data class PilotConnection(
              /**
               * A list of edges.
               */
              override val edges: List<Edge?>?
            ) : Starship.PilotConnection, StarshipFragment.PilotConnection {
              override fun marshaller(): ResponseFieldMarshaller {
                return ResponseFieldMarshaller { writer ->
                  AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.toResponse(writer, this)
                }
              }

              /**
               * An edge in a connection.
               */
              data class Edge(
                /**
                 * The item at the end of the edge
                 */
                override val node: Node?
              ) : Starship.PilotConnection.Edge, StarshipFragment.PilotConnection.Edge {
                override fun marshaller(): ResponseFieldMarshaller {
                  return ResponseFieldMarshaller { writer ->
                    AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.Edge.toResponse(writer, this)
                  }
                }

                /**
                 * An individual person or character within the Star Wars universe.
                 */
                interface Node : Starship.PilotConnection.Edge.Node,
                    StarshipFragment.PilotConnection.Edge.Node {
                  override val __typename: String

                  override fun marshaller(): ResponseFieldMarshaller

                  interface Person : Starship.PilotConnection.Edge.Node,
                      Starship.PilotConnection.Edge.Node.Person, PilotFragment,
                      StarshipFragment.PilotConnection.Edge.Node.Person,
                      StarshipFragment.PilotConnection.Edge.Node, Node {
                    override val __typename: String

                    /**
                     * The name of this person.
                     */
                    override val name: String?

                    /**
                     * A planet that this person was born on or inhabits.
                     */
                    override val homeworld: Homeworld?

                    override fun marshaller(): ResponseFieldMarshaller

                    /**
                     * A large mass, planet or planetoid in the Star Wars Universe, at the time of
                     * 0 ABY.
                     */
                    interface Homeworld : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                        PilotFragment.Homeworld,
                        StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld {
                      override val __typename: String

                      override fun marshaller(): ResponseFieldMarshaller

                      interface Planet : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                          Starship.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          PlanetFragment, PilotFragment.Homeworld.Planet, PilotFragment.Homeworld,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld, Homeworld {
                        override val __typename: String

                        /**
                         * The name of this planet.
                         */
                        override val name: String?

                        override fun marshaller(): ResponseFieldMarshaller
                      }

                      companion object {
                        fun Homeworld.asPlanet():
                            Starship.PilotConnection.Edge.Node.Person.Homeworld.Planet? = this as?
                            Starship.PilotConnection.Edge.Node.Person.Homeworld.Planet

                        fun Homeworld.planetFragment(): PlanetFragment? = this as? PlanetFragment
                      }
                    }
                  }

                  data class PersonNode(
                    override val __typename: String,
                    /**
                     * The name of this person.
                     */
                    override val name: String?,
                    /**
                     * A planet that this person was born on or inhabits.
                     */
                    override val homeworld: Homeworld?
                  ) : Starship.PilotConnection.Edge.Node, Starship.PilotConnection.Edge.Node.Person,
                      PilotFragment, StarshipFragment.PilotConnection.Edge.Node.Person,
                      StarshipFragment.PilotConnection.Edge.Node, Person, Node {
                    override fun marshaller(): ResponseFieldMarshaller {
                      return ResponseFieldMarshaller { writer ->
                        AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.Edge.Node.PersonNode.toResponse(writer, this)
                      }
                    }

                    /**
                     * A large mass, planet or planetoid in the Star Wars Universe, at the time of
                     * 0 ABY.
                     */
                    interface Homeworld : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                        PilotFragment.Homeworld,
                        StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld,
                        Person.Homeworld {
                      override val __typename: String

                      override fun marshaller(): ResponseFieldMarshaller

                      interface Planet : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                          Starship.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          PlanetFragment, PilotFragment.Homeworld.Planet, PilotFragment.Homeworld,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld,
                          Person.Homeworld.Planet, Person.Homeworld, Homeworld {
                        override val __typename: String

                        /**
                         * The name of this planet.
                         */
                        override val name: String?

                        override fun marshaller(): ResponseFieldMarshaller
                      }

                      data class PlanetHomeworld(
                        override val __typename: String,
                        /**
                         * The name of this planet.
                         */
                        override val name: String?
                      ) : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                          Starship.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          PlanetFragment, PilotFragment.Homeworld.Planet, PilotFragment.Homeworld,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld.Planet,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld,
                          Person.Homeworld.Planet, Person.Homeworld, Planet, Homeworld {
                        override fun marshaller(): ResponseFieldMarshaller {
                          return ResponseFieldMarshaller { writer ->
                            AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.Edge.Node.PersonNode.Homeworld.PlanetHomeworld.toResponse(writer, this)
                          }
                        }
                      }

                      data class OtherHomeworld(
                        override val __typename: String
                      ) : Starship.PilotConnection.Edge.Node.Person.Homeworld,
                          PilotFragment.Homeworld,
                          StarshipFragment.PilotConnection.Edge.Node.Person.Homeworld,
                          Person.Homeworld, Homeworld {
                        override fun marshaller(): ResponseFieldMarshaller {
                          return ResponseFieldMarshaller { writer ->
                            AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.Edge.Node.PersonNode.Homeworld.OtherHomeworld.toResponse(writer, this)
                          }
                        }
                      }

                      companion object {
                        fun Homeworld.asHomeworld(): Person.Homeworld? = this as? Person.Homeworld

                        fun Homeworld.asPlanet(): Planet? = this as? Planet

                        fun Homeworld.planetFragment(): PlanetFragment? = this as? PlanetFragment
                      }
                    }
                  }

                  data class OtherNode(
                    override val __typename: String
                  ) : Starship.PilotConnection.Edge.Node,
                      StarshipFragment.PilotConnection.Edge.Node, Node {
                    override fun marshaller(): ResponseFieldMarshaller {
                      return ResponseFieldMarshaller { writer ->
                        AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.StarshipNode.PilotConnection.Edge.Node.OtherNode.toResponse(writer, this)
                      }
                    }
                  }

                  companion object {
                    fun Node.asNode(): StarshipFragment.PilotConnection.Edge.Node? = this as?
                        StarshipFragment.PilotConnection.Edge.Node

                    fun Node.asPerson(): Person? = this as? Person

                    fun Node.pilotFragment(): PilotFragment? = this as? PilotFragment
                  }
                }
              }
            }
          }

          data class OtherNode(
            override val __typename: String
          ) : Node {
            override fun marshaller(): ResponseFieldMarshaller {
              return ResponseFieldMarshaller { writer ->
                AllStarship_ResponseAdapter.Data.AllStarship.Edge.Node.OtherNode.toResponse(writer, this)
              }
            }
          }

          companion object {
            fun Node.asStarship(): Starship? = this as? Starship

            fun Node.starshipFragment(): StarshipFragment? = this as? StarshipFragment
          }
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "3d7fa8ee44e23f44c0605c01b0db776614b2dd3d78541751c50cb04d9ba4c4cc"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query AllStarships {
          |  allStarships(first: 7) {
          |    edges {
          |      node {
          |        __typename
          |        ...starshipFragment
          |      }
          |    }
          |  }
          |}
          |fragment starshipFragment on Starship {
          |  __typename
          |  id
          |  name
          |  pilotConnection {
          |    edges {
          |      node {
          |        __typename
          |        ...pilotFragment
          |      }
          |    }
          |  }
          |}
          |fragment pilotFragment on Person {
          |  __typename
          |  name
          |  homeworld {
          |    __typename
          |    ...planetFragment
          |  }
          |}
          |fragment planetFragment on Planet {
          |  __typename
          |  name
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String {
        return "AllStarships"
      }
    }
  }
}
