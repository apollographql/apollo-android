// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.fragment.adapter

import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.fragment_in_fragment.fragment.PilotFragment
import com.example.fragment_in_fragment.fragment.PlanetFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class PilotFragment_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<PilotFragment.Data> {
  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

  private val nullableStringAdapter: ResponseAdapter<String?> =
      NullableResponseAdapter(StringResponseAdapter)

  private val nullableHomeworldAdapter: ResponseAdapter<PilotFragment.Data.Homeworld?> =
      NullableResponseAdapter(Homeworld(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): PilotFragment.Data {
    var __typename: String? = null
    var name: String? = null
    var homeworld: PilotFragment.Data.Homeworld? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        1 -> name = nullableStringAdapter.fromResponse(reader)
        2 -> homeworld = nullableHomeworldAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return PilotFragment.Data(
      __typename = __typename!!,
      name = name,
      homeworld = homeworld
    )
  }

  override fun toResponse(writer: JsonWriter, value: PilotFragment.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    writer.name("name")
    nullableStringAdapter.toResponse(writer, value.name)
    writer.name("homeworld")
    nullableHomeworldAdapter.toResponse(writer, value.homeworld)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Planet"),
        fieldName = "homeworld",
        fieldSets = listOf(
          ResponseField.FieldSet("Planet", PlanetFragment_ResponseAdapter.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Homeworld(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<PilotFragment.Data.Homeworld> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val PlanetFragmentAdapter: PlanetFragment_ResponseAdapter =
        com.example.fragment_in_fragment.fragment.adapter.PlanetFragment_ResponseAdapter(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): PilotFragment.Data.Homeworld {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var planetFragment: PlanetFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("Planet")) {
        reader.rewind()
        planetFragment = PlanetFragmentAdapter.fromResponse(reader)
      }

      return PilotFragment.Data.Homeworld(
        __typename = __typename!!,
        planetFragment = planetFragment
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: PilotFragment.Data.Homeworld) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)
      if (value.planetFragment != null) PlanetFragmentAdapter.toResponse(writer,
          value.planetFragment)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }
  }
}
