// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.adapter

import com.apollographql.apollo.api.ResponseAdapterCache
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ListResponseAdapter
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.StringResponseAdapter
import com.apollographql.apollo.api.internal.json.JsonReader
import com.apollographql.apollo.api.internal.json.JsonWriter
import com.example.fragment_in_fragment.AllStarships
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class AllStarships_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<AllStarships.Data> {
  private val nullableAllStarshipsAdapter:
      ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships?> =
      NullableResponseAdapter(AllStarships(responseAdapterCache))

  override fun fromResponse(reader: JsonReader):
      com.example.fragment_in_fragment.AllStarships.Data {
    var allStarships: com.example.fragment_in_fragment.AllStarships.Data.AllStarships? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> allStarships = nullableAllStarshipsAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return com.example.fragment_in_fragment.AllStarships.Data(
      allStarships = allStarships
    )
  }

  override fun toResponse(writer: JsonWriter,
      value: com.example.fragment_in_fragment.AllStarships.Data) {
    writer.beginObject()
    writer.name("allStarships")
    nullableAllStarshipsAdapter.toResponse(writer, value.allStarships)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("StarshipsConnection"),
        fieldName = "allStarships",
        arguments = mapOf<String, Any?>(
          "first" to 7),
        fieldSets = listOf(
          ResponseField.FieldSet(null, AllStarships.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class AllStarships(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships> {
    private val nullableListOfNullableEdgesAdapter:
        ResponseAdapter<List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges?>?>
        =
        NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(responseAdapterCache))))

    override fun fromResponse(reader: JsonReader):
        com.example.fragment_in_fragment.AllStarships.Data.AllStarships {
      var edges: List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges?>? = null
      reader.beginObject()
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
          else -> break
        }
      }
      reader.endObject()
      return com.example.fragment_in_fragment.AllStarships.Data.AllStarships(
        edges = edges
      )
    }

    override fun toResponse(writer: JsonWriter,
        value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships) {
      writer.beginObject()
      writer.name("edges")
      nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("StarshipsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class Edges(
      responseAdapterCache: ResponseAdapterCache
    ) : ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges> {
      private val nullableNodeAdapter:
          ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node?>
          = NullableResponseAdapter(Node(responseAdapterCache))

      override fun fromResponse(reader: JsonReader):
          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges {
        var node: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node? = null
        reader.beginObject()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> node = nullableNodeAdapter.fromResponse(reader)
            else -> break
          }
        }
        reader.endObject()
        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges(
          node = node
        )
      }

      override fun toResponse(writer: JsonWriter,
          value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges) {
        writer.beginObject()
        writer.name("node")
        nullableNodeAdapter.toResponse(writer, value.node)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Starship"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet("Starship", Node.StarshipNode.RESPONSE_FIELDS),
              ResponseField.FieldSet(null, Node.OtherNode.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }

      class Node(
        responseAdapterCache: ResponseAdapterCache
      ) :
          ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node>
          {
        val StarshipNodeAdapter: StarshipNode =
            com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.StarshipNode(responseAdapterCache)

        val OtherNodeAdapter: OtherNode =
            com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.OtherNode(responseAdapterCache)

        override fun fromResponse(reader: JsonReader):
            com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node {
          reader.beginObject()
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()

          return when(typename) {
            "Starship" -> StarshipNodeAdapter.fromResponse(reader, typename)
            else -> OtherNodeAdapter.fromResponse(reader, typename)
          }
          .also { reader.endObject() }
        }

        override fun toResponse(writer: JsonWriter,
            value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node) {
          when(value) {
            is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode -> StarshipNodeAdapter.toResponse(writer, value)
            is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode -> OtherNodeAdapter.toResponse(writer, value)
          }
        }

        class StarshipNode(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          private val nullableStringAdapter: ResponseAdapter<String?> =
              NullableResponseAdapter(StringResponseAdapter)

          private val nullablePilotConnectionAdapter:
              ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection?>
              = NullableResponseAdapter(PilotConnection(responseAdapterCache))

          fun fromResponse(reader: JsonReader, __typename: String?):
              com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode {
            var __typename: String? = __typename
            var id: String? = null
            var name: String? = null
            var pilotConnection: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                1 -> id = stringAdapter.fromResponse(reader)
                2 -> name = nullableStringAdapter.fromResponse(reader)
                3 -> pilotConnection = nullablePilotConnectionAdapter.fromResponse(reader)
                else -> break
              }
            }
            return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode(
              __typename = __typename!!,
              id = id!!,
              name = name,
              pilotConnection = pilotConnection
            )
          }

          fun toResponse(writer: JsonWriter,
              value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.name("id")
            stringAdapter.toResponse(writer, value.id)
            writer.name("name")
            nullableStringAdapter.toResponse(writer, value.name)
            writer.name("pilotConnection")
            nullablePilotConnectionAdapter.toResponse(writer, value.pilotConnection)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "id",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Other("String"),
                fieldName = "name",
              ),
              ResponseField(
                type = ResponseField.Type.Named.Object("StarshipPilotsConnection"),
                fieldName = "pilotConnection",
                fieldSets = listOf(
                  ResponseField.FieldSet(null, PilotConnection.RESPONSE_FIELDS)
                ),
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }

          class PilotConnection(
            responseAdapterCache: ResponseAdapterCache
          ) :
              ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection>
              {
            private val nullableListOfNullableEdgesAdapter:
                ResponseAdapter<List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges?>?>
                =
                NullableResponseAdapter(ListResponseAdapter(NullableResponseAdapter(Edges(responseAdapterCache))))

            override fun fromResponse(reader: JsonReader):
                com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection {
              var edges: List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges?>? = null
              reader.beginObject()
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> edges = nullableListOfNullableEdgesAdapter.fromResponse(reader)
                  else -> break
                }
              }
              reader.endObject()
              return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection(
                edges = edges
              )
            }

            override fun toResponse(writer: JsonWriter,
                value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection) {
              writer.beginObject()
              writer.name("edges")
              nullableListOfNullableEdgesAdapter.toResponse(writer, value.edges)
              writer.endObject()
            }

            companion object {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type =
                      ResponseField.Type.List(ResponseField.Type.Named.Object("StarshipPilotsEdge")),
                  fieldName = "edges",
                  fieldSets = listOf(
                    ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
                  ),
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
            }

            class Edges(
              responseAdapterCache: ResponseAdapterCache
            ) :
                ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges>
                {
              private val nullableNodeAdapter:
                  ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node?>
                  = NullableResponseAdapter(Node(responseAdapterCache))

              override fun fromResponse(reader: JsonReader):
                  com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges {
                var node: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node? = null
                reader.beginObject()
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> node = nullableNodeAdapter.fromResponse(reader)
                    else -> break
                  }
                }
                reader.endObject()
                return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges(
                  node = node
                )
              }

              override fun toResponse(writer: JsonWriter,
                  value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges) {
                writer.beginObject()
                writer.name("node")
                nullableNodeAdapter.toResponse(writer, value.node)
                writer.endObject()
              }

              companion object {
                val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                  ResponseField(
                    type = ResponseField.Type.Named.Object("Person"),
                    fieldName = "node",
                    fieldSets = listOf(
                      ResponseField.FieldSet("Person", Node.PersonNode.RESPONSE_FIELDS),
                      ResponseField.FieldSet(null, Node.OtherNode.RESPONSE_FIELDS),
                    ),
                  )
                )

                val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
              }

              class Node(
                responseAdapterCache: ResponseAdapterCache
              ) :
                  ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node>
                  {
                val PersonNodeAdapter: PersonNode =
                    com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode(responseAdapterCache)

                val OtherNodeAdapter: OtherNode =
                    com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode(responseAdapterCache)

                override fun fromResponse(reader: JsonReader):
                    com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node {
                  reader.beginObject()
                  check(reader.nextName() == "__typename")
                  val typename = reader.nextString()

                  return when(typename) {
                    "Person" -> PersonNodeAdapter.fromResponse(reader, typename)
                    else -> OtherNodeAdapter.fromResponse(reader, typename)
                  }
                  .also { reader.endObject() }
                }

                override fun toResponse(writer: JsonWriter,
                    value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node) {
                  when(value) {
                    is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode -> PersonNodeAdapter.toResponse(writer, value)
                    is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode -> OtherNodeAdapter.toResponse(writer, value)
                  }
                }

                class PersonNode(
                  responseAdapterCache: ResponseAdapterCache
                ) {
                  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

                  private val nullableStringAdapter: ResponseAdapter<String?> =
                      NullableResponseAdapter(StringResponseAdapter)

                  private val nullableHomeworldAdapter:
                      ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld?>
                      = NullableResponseAdapter(Homeworld(responseAdapterCache))

                  fun fromResponse(reader: JsonReader, __typename: String?):
                      com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode {
                    var __typename: String? = __typename
                    var name: String? = null
                    var homeworld: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld? = null
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> __typename = stringAdapter.fromResponse(reader)
                        1 -> name = nullableStringAdapter.fromResponse(reader)
                        2 -> homeworld = nullableHomeworldAdapter.fromResponse(reader)
                        else -> break
                      }
                    }
                    return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode(
                      __typename = __typename!!,
                      name = name,
                      homeworld = homeworld
                    )
                  }

                  fun toResponse(writer: JsonWriter,
                      value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode) {
                    writer.beginObject()
                    writer.name("__typename")
                    stringAdapter.toResponse(writer, value.__typename)
                    writer.name("name")
                    nullableStringAdapter.toResponse(writer, value.name)
                    writer.name("homeworld")
                    nullableHomeworldAdapter.toResponse(writer, value.homeworld)
                    writer.endObject()
                  }

                  companion object {
                    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                      ResponseField.Typename,
                      ResponseField(
                        type = ResponseField.Type.Named.Other("String"),
                        fieldName = "name",
                      ),
                      ResponseField(
                        type = ResponseField.Type.Named.Object("Planet"),
                        fieldName = "homeworld",
                        fieldSets = listOf(
                          ResponseField.FieldSet("Planet",
                              Homeworld.PlanetHomeworld.RESPONSE_FIELDS),
                          ResponseField.FieldSet(null, Homeworld.OtherHomeworld.RESPONSE_FIELDS),
                        ),
                      )
                    )

                    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                  }

                  class Homeworld(
                    responseAdapterCache: ResponseAdapterCache
                  ) :
                      ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld>
                      {
                    val PlanetHomeworldAdapter: PlanetHomeworld =
                        com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld(responseAdapterCache)

                    val OtherHomeworldAdapter: OtherHomeworld =
                        com.example.fragment_in_fragment.adapter.AllStarships_ResponseAdapter.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld(responseAdapterCache)

                    override fun fromResponse(reader: JsonReader):
                        com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld {
                      reader.beginObject()
                      check(reader.nextName() == "__typename")
                      val typename = reader.nextString()

                      return when(typename) {
                        "Planet" -> PlanetHomeworldAdapter.fromResponse(reader, typename)
                        else -> OtherHomeworldAdapter.fromResponse(reader, typename)
                      }
                      .also { reader.endObject() }
                    }

                    override fun toResponse(writer: JsonWriter,
                        value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld) {
                      when(value) {
                        is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld -> PlanetHomeworldAdapter.toResponse(writer, value)
                        is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld -> OtherHomeworldAdapter.toResponse(writer, value)
                      }
                    }

                    class PlanetHomeworld(
                      responseAdapterCache: ResponseAdapterCache
                    ) {
                      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

                      private val nullableStringAdapter: ResponseAdapter<String?> =
                          NullableResponseAdapter(StringResponseAdapter)

                      fun fromResponse(reader: JsonReader, __typename: String?):
                          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld {
                        var __typename: String? = __typename
                        var name: String? = null
                        while(true) {
                          when (reader.selectName(RESPONSE_NAMES)) {
                            0 -> __typename = stringAdapter.fromResponse(reader)
                            1 -> name = nullableStringAdapter.fromResponse(reader)
                            else -> break
                          }
                        }
                        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld(
                          __typename = __typename!!,
                          name = name
                        )
                      }

                      fun toResponse(writer: JsonWriter,
                          value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld) {
                        writer.beginObject()
                        writer.name("__typename")
                        stringAdapter.toResponse(writer, value.__typename)
                        writer.name("name")
                        nullableStringAdapter.toResponse(writer, value.name)
                        writer.endObject()
                      }

                      companion object {
                        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                          ResponseField.Typename,
                          ResponseField(
                            type = ResponseField.Type.Named.Other("String"),
                            fieldName = "name",
                          )
                        )

                        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                      }
                    }

                    class OtherHomeworld(
                      responseAdapterCache: ResponseAdapterCache
                    ) {
                      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

                      fun fromResponse(reader: JsonReader, __typename: String?):
                          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld {
                        var __typename: String? = __typename
                        while(true) {
                          when (reader.selectName(RESPONSE_NAMES)) {
                            0 -> __typename = stringAdapter.fromResponse(reader)
                            else -> break
                          }
                        }
                        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld(
                          __typename = __typename!!
                        )
                      }

                      fun toResponse(writer: JsonWriter,
                          value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld) {
                        writer.beginObject()
                        writer.name("__typename")
                        stringAdapter.toResponse(writer, value.__typename)
                        writer.endObject()
                      }

                      companion object {
                        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                          ResponseField.Typename
                        )

                        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                      }
                    }
                  }
                }

                class OtherNode(
                  responseAdapterCache: ResponseAdapterCache
                ) {
                  private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

                  fun fromResponse(reader: JsonReader, __typename: String?):
                      com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode {
                    var __typename: String? = __typename
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> __typename = stringAdapter.fromResponse(reader)
                        else -> break
                      }
                    }
                    return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode(
                      __typename = __typename!!
                    )
                  }

                  fun toResponse(writer: JsonWriter,
                      value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode) {
                    writer.beginObject()
                    writer.name("__typename")
                    stringAdapter.toResponse(writer, value.__typename)
                    writer.endObject()
                  }

                  companion object {
                    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                      ResponseField.Typename
                    )

                    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
                  }
                }
              }
            }
          }
        }

        class OtherNode(
          responseAdapterCache: ResponseAdapterCache
        ) {
          private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

          fun fromResponse(reader: JsonReader, __typename: String?):
              com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode {
            var __typename: String? = __typename
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = stringAdapter.fromResponse(reader)
                else -> break
              }
            }
            return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode(
              __typename = __typename!!
            )
          }

          fun toResponse(writer: JsonWriter,
              value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode) {
            writer.beginObject()
            writer.name("__typename")
            stringAdapter.toResponse(writer, value.__typename)
            writer.endObject()
          }

          companion object {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
          }
        }
      }
    }
  }
}
