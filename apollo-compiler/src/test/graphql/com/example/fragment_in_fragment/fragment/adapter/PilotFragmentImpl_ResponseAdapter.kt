// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.fragment.adapter

import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.internal.NullableResponseAdapter
import com.apollographql.apollo3.api.internal.ResponseAdapter
import com.apollographql.apollo3.api.internal.json.JsonReader
import com.apollographql.apollo3.api.internal.json.JsonWriter
import com.apollographql.apollo3.api.internal.stringResponseAdapter
import com.example.fragment_in_fragment.fragment.PilotFragmentImpl
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class PilotFragmentImpl_ResponseAdapter(
  customScalarAdapters: ResponseAdapterCache
) : ResponseAdapter<PilotFragmentImpl.Data> {
  val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

  val nullableStringAdapter: ResponseAdapter<String?> =
      NullableResponseAdapter(stringResponseAdapter)

  val nullableHomeworldAdapter: ResponseAdapter<PilotFragmentImpl.Data.Homeworld?> =
      NullableResponseAdapter(Homeworld(customScalarAdapters))

  override fun fromResponse(reader: JsonReader): PilotFragmentImpl.Data {
    var __typename: String? = null
    var name: String? = null
    var homeworld: PilotFragmentImpl.Data.Homeworld? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = stringAdapter.fromResponse(reader)
        1 -> name = nullableStringAdapter.fromResponse(reader)
        2 -> homeworld = nullableHomeworldAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return PilotFragmentImpl.Data(
      __typename = __typename!!,
      name = name,
      homeworld = homeworld
    )
  }

  override fun toResponse(writer: JsonWriter, value: PilotFragmentImpl.Data) {
    writer.beginObject()
    writer.name("__typename")
    stringAdapter.toResponse(writer, value.__typename)
    writer.name("name")
    nullableStringAdapter.toResponse(writer, value.name)
    writer.name("homeworld")
    nullableHomeworldAdapter.toResponse(writer, value.homeworld)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Planet"),
        fieldName = "homeworld",
        fieldSets = listOf(
          ResponseField.FieldSet("Planet", Homeworld.PlanetHomeworld.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Homeworld.OtherHomeworld.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Homeworld(
    customScalarAdapters: ResponseAdapterCache
  ) : ResponseAdapter<PilotFragmentImpl.Data.Homeworld> {
    val PlanetHomeworldAdapter: PlanetHomeworld =
        com.example.fragment_in_fragment.fragment.adapter.PilotFragmentImpl_ResponseAdapter.Homeworld.PlanetHomeworld(customScalarAdapters)

    val OtherHomeworldAdapter: OtherHomeworld =
        com.example.fragment_in_fragment.fragment.adapter.PilotFragmentImpl_ResponseAdapter.Homeworld.OtherHomeworld(customScalarAdapters)

    override fun fromResponse(reader: JsonReader): PilotFragmentImpl.Data.Homeworld {
      reader.beginObject()
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()

      return when(typename) {
        "Planet" -> PlanetHomeworldAdapter.fromResponse(reader, typename)
        else -> OtherHomeworldAdapter.fromResponse(reader, typename)
      }
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: PilotFragmentImpl.Data.Homeworld) {
      when(value) {
        is PilotFragmentImpl.Data.Homeworld.PlanetHomeworld -> PlanetHomeworldAdapter.toResponse(writer, value)
        is PilotFragmentImpl.Data.Homeworld.OtherHomeworld -> OtherHomeworldAdapter.toResponse(writer, value)
      }
    }

    class PlanetHomeworld(
      customScalarAdapters: ResponseAdapterCache
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      val nullableStringAdapter: ResponseAdapter<String?> =
          NullableResponseAdapter(stringResponseAdapter)

      fun fromResponse(reader: JsonReader, __typename: String?):
          PilotFragmentImpl.Data.Homeworld.PlanetHomeworld {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> name = nullableStringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return PilotFragmentImpl.Data.Homeworld.PlanetHomeworld(
          __typename = __typename!!,
          name = name
        )
      }

      fun toResponse(writer: JsonWriter, value: PilotFragmentImpl.Data.Homeworld.PlanetHomeworld) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("name")
        nullableStringAdapter.toResponse(writer, value.name)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }

    class OtherHomeworld(
      customScalarAdapters: ResponseAdapterCache
    ) {
      val stringAdapter: ResponseAdapter<String> = stringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?):
          PilotFragmentImpl.Data.Homeworld.OtherHomeworld {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return PilotFragmentImpl.Data.Homeworld.OtherHomeworld(
          __typename = __typename!!
        )
      }

      fun toResponse(writer: JsonWriter, value: PilotFragmentImpl.Data.Homeworld.OtherHomeworld) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
