//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_with_include_directive.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.and
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.not
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.apollographql.apollo3.api.variable
import com.example.inline_fragment_with_include_directive.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    object Hero : Adapter<TestQuery.Hero> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Hero {
        var __typename: String? = null
        var id: String? = null
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var asHumanIfWithDetailsAndNotSkipHumanDetails: TestQuery.AsHumanIfWithDetailsAndNotSkipHumanDetails? = null
        if (and(possibleTypes("Human"),and(variable("withDetails"),not(variable("skipHumanDetails")))).evaluate(emptySet(), __typename)) {
          asHumanIfWithDetailsAndNotSkipHumanDetails = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.AsHumanIfWithDetailsAndNotSkipHumanDetails.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var asDroidIfWithDetails: TestQuery.AsDroidIfWithDetails? = null
        if (and(possibleTypes("Droid"),variable("withDetails")).evaluate(emptySet(), __typename)) {
          asDroidIfWithDetails = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.AsDroidIfWithDetails.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Hero(
          __typename = __typename,
          id = id!!,
          name = name!!,
          asHumanIfWithDetailsAndNotSkipHumanDetails = asHumanIfWithDetailsAndNotSkipHumanDetails,
          asDroidIfWithDetails = asDroidIfWithDetails
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Hero
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        if (value.asHumanIfWithDetailsAndNotSkipHumanDetails != null) {
          com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.AsHumanIfWithDetailsAndNotSkipHumanDetails.toJson(writer,
              customScalarAdapters, value.asHumanIfWithDetailsAndNotSkipHumanDetails)
        }

        if (value.asDroidIfWithDetails != null) {
          com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.AsDroidIfWithDetails.toJson(writer,
              customScalarAdapters, value.asDroidIfWithDetails)
        }
      }

      object AsHumanIfWithDetailsAndNotSkipHumanDetails :
          Adapter<TestQuery.AsHumanIfWithDetailsAndNotSkipHumanDetails> {
        val RESPONSE_NAMES: List<String> = listOf("name", "homePlanet", "__typename", "id")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsHumanIfWithDetailsAndNotSkipHumanDetails {
          var name: String? = null
          var homePlanet: String? = null
          var __typename: String? = null
          var id: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              3 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsHumanIfWithDetailsAndNotSkipHumanDetails(
            name = name!!,
            homePlanet = homePlanet,
            __typename = __typename!!,
            id = id!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsHumanIfWithDetailsAndNotSkipHumanDetails
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("homePlanet")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)
        }
      }

      object AsDroidIfWithDetails : Adapter<TestQuery.AsDroidIfWithDetails> {
        val RESPONSE_NAMES: List<String> = listOf("name", "primaryFunction", "__typename", "id")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.AsDroidIfWithDetails {
          var name: String? = null
          var primaryFunction: String? = null
          var __typename: String? = null
          var id: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              2 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              3 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.AsDroidIfWithDetails(
            name = name!!,
            primaryFunction = primaryFunction,
            __typename = __typename!!,
            id = id!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.AsDroidIfWithDetails
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)
        }
      }
    }
  }
}
