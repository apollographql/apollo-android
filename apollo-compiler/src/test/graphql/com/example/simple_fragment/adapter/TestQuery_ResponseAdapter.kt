// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.simple_fragment.adapter

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.NullableResponseAdapter
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.apollographql.apollo.api.internal.stringResponseAdapter
import com.example.simple_fragment.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
internal object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      responseName = "hero",
      fieldName = "hero",
      arguments = emptyMap(),
      conditions = emptyList(),
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", Hero.CharacterHero.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", Hero.CharacterHumanHero.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Hero.OtherHero.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: Array<String> = RESPONSE_FIELDS.map { it.responseName }

  val heroAdapter: ResponseAdapter<TestQuery.Data.Hero?> = NullableResponseAdapter(Hero)

  override fun fromResponse(
    reader: ResponseReader,
    customScalarAdapters: CustomScalarAdapters,
    __typename: String?
  ): TestQuery.Data {
    var hero: TestQuery.Data.Hero? = null
    while(true) {
      when (selectField(responseNames)) {
        0 -> hero = readObject<TestQuery.Data.Hero>(RESPONSE_FIELDS[0]) { reader ->
          Hero.fromResponse(reader)
        }
        else -> break
      }
    }
    return TestQuery.Data(
      hero = hero
    )
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    if(value.hero == null) {
      writer.writeObject(RESPONSE_FIELDS[0], null)
    } else {
      writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
        Hero.toResponse(writer, value.hero)
      }
    }
  }

  object Hero : ResponseAdapter<TestQuery.Data.Hero> {
    override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data.Hero {
      val typename = __typename ?: reader.readString(ResponseField.Typename)
      return when(typename) {
        "Droid" -> CharacterHero.fromResponse(reader, typename)
        "Human" -> CharacterHumanHero.fromResponse(reader, typename)
        else -> OtherHero.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Hero) {
      when(value) {
        is TestQuery.Data.Hero.CharacterHero -> CharacterHero.toResponse(writer, value)
        is TestQuery.Data.Hero.CharacterHumanHero -> CharacterHumanHero.toResponse(writer, value)
        is TestQuery.Data.Hero.OtherHero -> OtherHero.toResponse(writer, value)
      }
    }

    object CharacterHero : ResponseAdapter<TestQuery.Data.Hero.CharacterHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: Array<String> = RESPONSE_FIELDS.map { it.responseName }

      val __typenameAdapter: ResponseAdapter<String?> = stringResponseAdapter

      override fun fromResponse(
        reader: ResponseReader,
        customScalarAdapters: CustomScalarAdapters,
        __typename: String?
      ): TestQuery.Data.Hero.CharacterHero {
        var __typename: String? = __typename
        while(true) {
          when (selectField(responseNames)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])!!
            else -> break
          }
        }
        return TestQuery.Data.Hero.CharacterHero(
          __typename = __typename!!
        )
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Hero.CharacterHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }

    object CharacterHumanHero : ResponseAdapter<TestQuery.Data.Hero.CharacterHumanHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: Array<String> = RESPONSE_FIELDS.map { it.responseName }

      val __typenameAdapter: ResponseAdapter<String?> = stringResponseAdapter

      val nameAdapter: ResponseAdapter<String?> = stringResponseAdapter

      override fun fromResponse(
        reader: ResponseReader,
        customScalarAdapters: CustomScalarAdapters,
        __typename: String?
      ): TestQuery.Data.Hero.CharacterHumanHero {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (selectField(responseNames)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])!!
            1 -> name = readString(RESPONSE_FIELDS[1])!!
            else -> break
          }
        }
        return TestQuery.Data.Hero.CharacterHumanHero(
          __typename = __typename!!,
          name = name!!
        )
      }

      override fun toResponse(writer: ResponseWriter,
          value: TestQuery.Data.Hero.CharacterHumanHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
      }
    }

    object OtherHero : ResponseAdapter<TestQuery.Data.Hero.OtherHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          fieldSets = emptyList(),
        )
      )

      val RESPONSE_NAMES: Array<String> = RESPONSE_FIELDS.map { it.responseName }

      val __typenameAdapter: ResponseAdapter<String?> = stringResponseAdapter

      override fun fromResponse(
        reader: ResponseReader,
        customScalarAdapters: CustomScalarAdapters,
        __typename: String?
      ): TestQuery.Data.Hero.OtherHero {
        var __typename: String? = __typename
        while(true) {
          when (selectField(responseNames)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])!!
            else -> break
          }
        }
        return TestQuery.Data.Hero.OtherHero(
          __typename = __typename!!
        )
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.Hero.OtherHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }
}
