// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.introspection_default_value.type;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.Utils;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class SampleInput implements InputType {
  private final Input<String> user;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  SampleInput(Input<String> user) {
    this.user = user;
  }

  public @Nullable String user() {
    return this.user.value;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public InputFieldMarshaller marshaller() {
    return new InputFieldMarshaller() {
      @Override
      public void marshal(InputFieldWriter writer) throws IOException {
        if (user.defined) {
          writer.writeString("user", user.value);
        }
      }
    };
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= user.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof SampleInput) {
      SampleInput that = (SampleInput) o;
      return this.user.equals(that.user);
    }
    return false;
  }

  public static final class Builder {
    private Input<String> user = Input.fromNullable("me");

    Builder() {
    }

    public Builder user(@Nullable String user) {
      this.user = Input.fromNullable(user);
      return this;
    }

    public Builder userInput(@NotNull Input<String> user) {
      this.user = Utils.checkNotNull(user, "user == null");
      return this;
    }

    public SampleInput build() {
      return new SampleInput(user);
    }
  }
}
