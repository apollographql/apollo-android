//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("foo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var foo: TestQuery.Data.Foo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> foo = Foo.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        foo = foo
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("foo")
      Foo.obj().nullable().toJson(writer, customScalarAdapters, value.foo)
    }

    object Foo : Adapter<TestQuery.Data.Foo> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Foo {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "FooBar",
          -> BarFoo.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherFoo.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Foo
      ) {
        when(value) {
          is TestQuery.Data.BarFoo -> BarFoo.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherFoo -> OtherFoo.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    object BarFoo {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo", "bar")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.BarFoo {
        var __typename: String? = typename
        var foo: String? = null
        var bar: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> foo = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> bar = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.BarFoo(
          __typename = __typename!!,
          foo = foo!!,
          bar = bar!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.BarFoo
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("foo")
        StringAdapter.toJson(writer, customScalarAdapters, value.foo)

        writer.name("bar")
        StringAdapter.toJson(writer, customScalarAdapters, value.bar)
      }
    }

    object OtherFoo {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

      fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherFoo {
        var __typename: String? = typename
        var foo: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> foo = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherFoo(
          __typename = __typename!!,
          foo = foo!!
        )
      }

      fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.OtherFoo
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("foo")
        StringAdapter.toJson(writer, customScalarAdapters, value.foo)
      }
    }
  }
}
