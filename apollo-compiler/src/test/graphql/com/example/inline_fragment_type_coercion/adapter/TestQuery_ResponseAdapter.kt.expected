// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.NullableResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader.Companion.buffer
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery_ResponseAdapter(
  responseAdapterCache: ResponseAdapterCache
) : ResponseAdapter<TestQuery.Data> {
  private val nullableFooAdapter: ResponseAdapter<TestQuery.Data.Foo?> =
      NullableResponseAdapter(Foo(responseAdapterCache))

  override fun fromResponse(reader: JsonReader): TestQuery.Data {
    var foo: TestQuery.Data.Foo? = null
    reader.beginObject()
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> foo = nullableFooAdapter.fromResponse(reader)
        else -> break
      }
    }
    reader.endObject()
    return TestQuery.Data(
      foo = foo
    )
  }

  override fun toResponse(writer: JsonWriter, value: TestQuery.Data) {
    writer.beginObject()
    writer.name("foo")
    nullableFooAdapter.toResponse(writer, value.foo)
    writer.endObject()
  }

  companion object {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Object("Foo"),
        fieldName = "foo",
        fieldSets = listOf(
          ResponseField.FieldSet("FooBar", Foo.AsBar.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
  }

  class Foo(
    responseAdapterCache: ResponseAdapterCache
  ) : ResponseAdapter<TestQuery.Data.Foo> {
    private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

    private val AsBarAdapter: AsBar =
        com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.Foo.AsBar(responseAdapterCache)

    override fun fromResponse(reader: JsonReader): TestQuery.Data.Foo {
      val reader = reader.buffer()
      reader.beginObject()

      var __typename: String? = null
      var foo: String? = null
      var asAsBar: TestQuery.Data.Foo.AsBar? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = stringAdapter.fromResponse(reader)
          1 -> foo = stringAdapter.fromResponse(reader)
          else -> break
        }
      }
      if (__typename in arrayOf("FooBar")) {
        reader.rewind()
        asAsBar = AsBarAdapter.fromResponse(reader, __typename)
      }

      return TestQuery.Data.Foo(
        __typename = __typename!!,
        foo = foo!!,
        asAsBar = asAsBar
      )
      .also { reader.endObject() }
    }

    override fun toResponse(writer: JsonWriter, value: TestQuery.Data.Foo) {
      writer.beginObject()
      writer.name("__typename")
      stringAdapter.toResponse(writer, value.__typename)

      writer.name("foo")
      stringAdapter.toResponse(writer, value.foo)
      if (value.asAsBar != null) AsBarAdapter.toResponse(writer, value.asAsBar)
      writer.endObject()
    }

    companion object {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "foo",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
    }

    class AsBar(
      responseAdapterCache: ResponseAdapterCache
    ) {
      private val stringAdapter: ResponseAdapter<String> = StringResponseAdapter

      fun fromResponse(reader: JsonReader, __typename: String?): TestQuery.Data.Foo.AsBar {
        var __typename: String? = __typename
        var foo: String? = null
        var bar: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = stringAdapter.fromResponse(reader)
            1 -> foo = stringAdapter.fromResponse(reader)
            2 -> bar = stringAdapter.fromResponse(reader)
            else -> break
          }
        }
        return TestQuery.Data.Foo.AsBar(
          __typename = __typename!!,
          foo = foo!!,
          bar = bar!!
        )
      }

      fun toResponse(writer: JsonWriter, value: TestQuery.Data.Foo.AsBar) {
        writer.beginObject()
        writer.name("__typename")
        stringAdapter.toResponse(writer, value.__typename)
        writer.name("foo")
        stringAdapter.toResponse(writer, value.foo)
        writer.name("bar")
        stringAdapter.toResponse(writer, value.bar)
        writer.endObject()
      }

      companion object {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "foo",
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "bar",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }
      }
    }
  }
}
