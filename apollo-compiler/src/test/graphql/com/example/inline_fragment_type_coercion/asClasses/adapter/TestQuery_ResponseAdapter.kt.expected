//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("foo")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var foo: TestQuery.Data.Foo? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> foo = Foo.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        foo = foo
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("foo")
      Foo.nullable().toResponse(writer, responseAdapterCache, value.foo)
    }

    object Foo : ResponseAdapter<TestQuery.Data.Foo> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo", "asBar")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Foo {
        var __typename: String? = null
        var foo: String? = null
        var asBar: TestQuery.Data.Foo.AsBar? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> foo = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> asBar = AsBar.nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Foo(
          __typename = __typename!!,
          foo = foo!!,
          asBar = asBar
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Foo
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("foo")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.foo)
        writer.name("asBar")
        AsBar.nullable().toResponse(writer, responseAdapterCache, value.asBar)
      }

      object AsBar : ResponseAdapter<TestQuery.Data.Foo.AsBar> {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "foo", "bar")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Foo.AsBar {
          var __typename: String? = null
          var foo: String? = null
          var bar: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> foo = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> bar = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.Foo.AsBar(
            __typename = __typename!!,
            foo = foo!!,
            bar = bar!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Foo.AsBar
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("foo")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.foo)
          writer.name("bar")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.bar)
        }
      }
    }
  }
}
