//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("foo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var foo: TestQuery.Data.Foo? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> foo = Foo.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }
      return TestQuery.Data(
        foo = foo
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("foo")
      Foo.obj(true).nullable().toJson(writer, customScalarAdapters, value.foo)
    }

    object Foo : Adapter<TestQuery.Data.Foo> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Foo {
        var __typename: String? = null
        var foo: String? = null
        var onBar: TestQuery.Data.Foo.OnBar? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> foo = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }
        check(__typename != null) {
          "__typename was not found"
        }
        if(possibleTypes("BarObject","FooBar").evaluate(emptySet(), __typename)) {
          reader.rewind()
          onBar = com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.Data.Foo.OnBar.fromJson(reader,
              customScalarAdapters)
        }
        return TestQuery.Data.Foo(
          __typename = __typename!!,
          foo = foo!!,
          onBar = onBar
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        value: TestQuery.Data.Foo
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("foo")
        StringAdapter.toJson(writer, customScalarAdapters, value.foo)

        if (value.onBar != null) {
          com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.Data.Foo.OnBar.toJson(writer,
              customScalarAdapters, value.onBar)
        }
      }

      object OnBar : Adapter<TestQuery.Data.Foo.OnBar> {
        val RESPONSE_NAMES: List<String> = listOf("bar")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
            TestQuery.Data.Foo.OnBar {
          var bar: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> bar = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }
          return TestQuery.Data.Foo.OnBar(
            bar = bar!!
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          value: TestQuery.Data.Foo.OnBar
        ) {
          writer.name("bar")
          StringAdapter.toJson(writer, customScalarAdapters, value.bar)
        }
      }
    }
  }
}
