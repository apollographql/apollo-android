//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : Adapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("foo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var foo: TestQuery.Foo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> foo = Foo.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        foo = foo
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Data
    ) {
      writer.name("foo")
      Foo.obj(true).nullable().toJson(writer, customScalarAdapters, value.foo)
    }
  }

  object Foo : Adapter<TestQuery.Foo> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Foo {
      var __typename: String? = null
      var foo: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> foo = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asBar: TestQuery.AsBar? = null
      if (possibleTypes("BarObject","FooBar").evaluate(emptySet(), __typename)) {
        asBar = com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.AsBar.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Foo(
        __typename = __typename,
        foo = foo!!,
        asBar = asBar
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.Foo
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("foo")
      StringAdapter.toJson(writer, customScalarAdapters, value.foo)

      if (value.asBar != null) {
        com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.AsBar.toJson(writer,
            customScalarAdapters, value.asBar)
      }
    }
  }

  object AsBar : Adapter<TestQuery.AsBar> {
    val RESPONSE_NAMES: List<String> = listOf("bar", "__typename", "foo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsBar {
      var bar: String? = null
      var __typename: String? = null
      var foo: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> bar = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> foo = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsBar(
        bar = bar!!,
        __typename = __typename!!,
        foo = foo!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      value: TestQuery.AsBar
    ) {
      writer.name("bar")
      StringAdapter.toJson(writer, customScalarAdapters, value.bar)

      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("foo")
      StringAdapter.toJson(writer, customScalarAdapters, value.foo)
    }
  }
}
