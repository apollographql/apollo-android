//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev6-SNAPSHOT'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("foo")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var foo: TestQuery.Data.Foo? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> foo = Foo.nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        foo = foo
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("foo")
      Foo.nullable().toResponse(writer, responseAdapterCache, value.foo)
    }

    object Foo : ResponseAdapter<TestQuery.Data.Foo> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Foo {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "FooBar",
          -> BarFoo.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherFoo.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Foo
      ) {
        when(value) {
          is TestQuery.Data.BarFoo -> BarFoo.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.OtherFoo -> OtherFoo.toResponse(writer, responseAdapterCache, value)
        }
      }
    }

    object OtherFoo {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.OtherFoo {
        var __typename: String? = __typename
        var foo: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> foo = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.OtherFoo(
          __typename = __typename!!,
          foo = foo!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.OtherFoo
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("foo")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.foo)
      }
    }

    object BarFoo {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "foo", "bar")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String
      ): TestQuery.Data.BarFoo {
        var __typename: String? = __typename
        var foo: String? = null
        var bar: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> foo = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> bar = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.BarFoo(
          __typename = __typename!!,
          foo = foo!!,
          bar = bar!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.BarFoo
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("foo")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.foo)
        writer.name("bar")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.bar)
      }
    }
  }
}
