//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.multiple_fragments.fragment

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import kotlin.String
import kotlin.collections.List

object AFragmentImpl_ResponseAdapter {
  object Data : ResponseAdapter<AFragmentImpl.Data> {
    val RESPONSE_NAMES: List<String> = listOf("__typename", "node")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        AFragmentImpl.Data {
      var __typename: String? = null
      var node: AFragmentImpl.Data.Node? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return AFragmentImpl.Data(
        __typename = __typename!!,
        node = node
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: AFragmentImpl.Data
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("node")
      Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
    }

    object Node : ResponseAdapter<AFragmentImpl.Data.Node> {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          AFragmentImpl.Data.Node {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "ANode",
          -> ANodeNode.fromResponse(reader, responseAdapterCache, __typename)
          else
          -> OtherNode.fromResponse(reader, responseAdapterCache, __typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: AFragmentImpl.Data.Node
      ) {
        when(value) {
          is AFragmentImpl.Data.ANodeNode -> ANodeNode.toResponse(writer, responseAdapterCache,
              value)
          is AFragmentImpl.Data.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache,
              value)
        }
      }
    }

    object ANodeNode {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "field1", "field2")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): AFragmentImpl.Data.ANodeNode {
        var __typename: String? = typename
        var field1: String? = null
        var field2: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> field1 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> field2 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return AFragmentImpl.Data.ANodeNode(
          __typename = __typename!!,
          field1 = field1,
          field2 = field2
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: AFragmentImpl.Data.ANodeNode
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("field1")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.field1)
        writer.name("field2")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.field2)
      }
    }

    object OtherNode {
      val RESPONSE_NAMES: List<String> = listOf("__typename")

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        typename: String
      ): AFragmentImpl.Data.OtherNode {
        var __typename: String? = typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return AFragmentImpl.Data.OtherNode(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: AFragmentImpl.Data.OtherNode
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
