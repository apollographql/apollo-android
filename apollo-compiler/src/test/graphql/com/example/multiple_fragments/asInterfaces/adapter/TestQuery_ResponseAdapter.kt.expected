//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.multiple_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.multiple_fragments.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("a")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var a: TestQuery.Data.A? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> a = A.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        a = a
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("a")
      A.obj().nullable().toResponse(writer, responseAdapterCache, value.a)
    }

    object A : ResponseAdapter<TestQuery.Data.A> {
      val RESPONSE_NAMES: List<String> = listOf("__typename", "node")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.A {
        var __typename: String? = null
        var node: TestQuery.Data.A.Node? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.A(
          __typename = __typename!!,
          node = node
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.A
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("node")
        Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
      }

      object Node : ResponseAdapter<TestQuery.Data.A.Node> {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.A.Node {
          reader.selectName(RESPONSE_NAMES).also {
            check(it == 0) {
              "__typename not present in first position"
            }
          }
          val __typename = reader.nextString()!!
          return when(__typename) {
            "ANode",
            -> ANodeNode.fromResponse(reader, responseAdapterCache, __typename)
            else
            -> OtherNode.fromResponse(reader, responseAdapterCache, __typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.A.Node
        ) {
          when(value) {
            is TestQuery.Data.A.ANodeNode -> ANodeNode.toResponse(writer, responseAdapterCache,
                value)
            is TestQuery.Data.A.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache,
                value)
          }
        }
      }

      object ANodeNode {
        val RESPONSE_NAMES: List<String> = listOf("__typename", "field1", "field2")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestQuery.Data.A.ANodeNode {
          var __typename: String? = typename
          var field1: String? = null
          var field2: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> field1 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> field2 = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.A.ANodeNode(
            __typename = __typename!!,
            field1 = field1,
            field2 = field2
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.A.ANodeNode
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("field1")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.field1)
          writer.name("field2")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.field2)
        }
      }

      object OtherNode {
        val RESPONSE_NAMES: List<String> = listOf("__typename")

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          typename: String
        ): TestQuery.Data.A.OtherNode {
          var __typename: String? = typename
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.A.OtherNode(
            __typename = __typename!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.A.OtherNode
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        }
      }
    }
  }
}
