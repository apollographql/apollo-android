//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.0.0-dev7-SNAPSHOT'.
//
package com.example.two_heroes_unique.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.two_heroes_unique.TestQuery
import kotlin.String
import kotlin.collections.List

object TestQuery_ResponseAdapter {
  object Data : ResponseAdapter<TestQuery.Data> {
    val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data {
      var r2: TestQuery.Data.R2? = null
      var luke: TestQuery.Data.Luke? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> r2 = R2.obj().nullable().fromResponse(reader, responseAdapterCache)
          1 -> luke = Luke.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data(
        r2 = r2,
        luke = luke
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data
    ) {
      writer.name("r2")
      R2.obj().nullable().toResponse(writer, responseAdapterCache, value.r2)
      writer.name("luke")
      Luke.obj().nullable().toResponse(writer, responseAdapterCache, value.luke)
    }

    object R2 : ResponseAdapter<TestQuery.Data.R2> {
      val RESPONSE_NAMES: List<String> = listOf("name")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.R2 {
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.R2(
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.R2
      ) {
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object Luke : ResponseAdapter<TestQuery.Data.Luke> {
      val RESPONSE_NAMES: List<String> = listOf("id", "name")

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.Luke {
        var id: String? = null
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Luke(
          id = id!!,
          name = name!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Luke
      ) {
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }
  }
}
