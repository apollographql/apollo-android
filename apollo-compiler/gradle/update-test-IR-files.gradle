import groovy.io.FileType

//A convenience plugin for re-generating IR files after updating the apollo-codegen version.
//The plugin will use your local code-gen version, which must have been installed globally.
//Your local version must match the project version for the plug-in to run.
task updateTestIRFiles(type: UpdateTestIRFilesTask)

class UpdateTestIRFilesTask extends DefaultTask {

  @TaskAction
  def updateIRFiles() {
    def apolloVersion = getLocalApolloVersion()
    if (apolloVersion == -1) {
      return
    }

    // When this task runs from the Android Studio gradle task menu, it sets working
    // directory to $project/apollo-compiler. When run from the command line, it
    // sets working directory to $project.
    def apolloCompiler = "apollo-compiler"
    String currentDir = System.getProperty("user.dir")
    if (currentDir.endsWith(apolloCompiler)) {
      currentDir = new File( "..", "apollo-compiler" )
    }
      else {
      currentDir = new File( "apollo-compiler" )
    }

    def dir = new File(currentDir, "src/test/graphql/com/example")
    dir.eachFile(FileType.DIRECTORIES) {
      testDir -> generateIRFile(testDir,currentDir)
    }
    logApolloVersion(apolloVersion,currentDir)
  }

  private static def logApolloVersion(apolloVersion, currentDir) {
    File outputFile = new File("${currentDir}/src/test/graphql/apollo-codegen.properties")
    outputFile.write("apollo-codegen version=${apolloVersion}")
  }

  private def getLocalApolloVersion() {
    def apolloCodeGenVersionProcess = 'apollo-codegen --version'.execute()
    apolloCodeGenVersionProcess.waitFor()
    def error = apolloCodeGenVersionProcess.err.text
    if (error != null && !error.isEmpty()) {
      logger.error("Error running apollo-codgen. Please verify it is globally accessible, reason: ${error}")
      return -1
    }
    def localCodeGenVersion = apolloCodeGenVersionProcess.in.text.trim()
    return localCodeGenVersion
  }

  def generateIRFile(testDir,currentDir) {
    logger.info("Generating IR file for: ${testDir.name}")
    def testOperationFileName = 'TestOperation.graphql'
    File queryFile = new File(testDir, testOperationFileName)
    if (!queryFile.exists()) {
      logger.warn("Skipping generating IR file for test: ${testDir.name}. Expected file `TestOperation.json` not found.")
      return
    }
    File outputFile = new File(testDir, 'TestOperation.json')
    File schema = new File(testDir, 'schema.json') //Check for custom schema
    if (!schema.exists()) {
      schema = new File("${currentDir}/src/test/graphql/schema.json")
    }

    def idFileDir = new File("${currentDir}/build/apollo-codegen/${testDir.name}")
    idFileDir.mkdirs()
    def idFile = new File(idFileDir, "id.json")

    def apolloCodeGenProcess = """apollo-codegen generate ${queryFile.absoluteFile}
          --add-typename
          --operation-ids-path ${idFile.toString()}
          --merge-in-fields-from-fragment-spreads false
          --schema ${schema.absoluteFile}
          --output ${outputFile.absoluteFile}
          --target json""".execute()

    apolloCodeGenProcess.waitFor()
    def error = apolloCodeGenProcess.err.text
    if (error != null && !error.isEmpty()) {
      logger.error("Failed to generate IR file for: ${testDir.name} reason:" +error)
    }
    //apollo code-gen has not std output if successful.
    def runtimeError = apolloCodeGenProcess.in.text
    if (runtimeError != null && !runtimeError.isEmpty()) {
      logger.error("Failed to generate IR file for: ${testDir.name} reason:" + runtimeError)
    }

    //Remove the "filePath" lines in the IR file. They are not needed by the compiler
    //and pollute git history.
    def outputFileContents = outputFile.text
    outputFile.withWriter { w ->
      w << outputFileContents.replaceAll("\"filePath\": \".*\"",
          "\"filePath\": \"src/test/graphql/com/example/${testDir.name}/${testOperationFileName}\"")
    }
  }

}