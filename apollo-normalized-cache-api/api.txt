// Signature format: 4.0
package com.apollographql.apollo.cache {

  public final class ApolloCacheHeaders {
    field public static final String DO_NOT_STORE = "do-not-store";
    field public static final String EVICT_AFTER_READ = "evict-after-read";
    field public static final com.apollographql.apollo.cache.ApolloCacheHeaders INSTANCE;
    field public static final String STORE_PARTIAL_RESPONSES = "store-partial-responses";
  }

  public final class CacheHeaders {
    method public static com.apollographql.apollo.cache.CacheHeaders.Builder builder();
    method public boolean hasHeader(String headerName);
    method public String? headerValue(String header);
    method public com.apollographql.apollo.cache.CacheHeaders.Builder toBuilder();
    field public static final com.apollographql.apollo.cache.CacheHeaders.Companion Companion;
    field public static final com.apollographql.apollo.cache.CacheHeaders NONE;
  }

  public static final class CacheHeaders.Builder {
    ctor public CacheHeaders.Builder();
    method public com.apollographql.apollo.cache.CacheHeaders.Builder addHeader(String headerName, String headerValue);
    method public com.apollographql.apollo.cache.CacheHeaders.Builder addHeaders(java.util.Map<java.lang.String,java.lang.String> headerMap);
    method public com.apollographql.apollo.cache.CacheHeaders build();
  }

  public static final class CacheHeaders.Companion {
    method public com.apollographql.apollo.cache.CacheHeaders.Builder builder();
  }

}

package com.apollographql.apollo.cache.normalized {

  public final class CacheKey {
    ctor public CacheKey(String key);
    method public boolean equals(Object? other);
    method public static com.apollographql.apollo.cache.normalized.CacheKey from(String key);
    method public String getKey();
    method public int hashCode();
    method @Deprecated public String key();
    method public String toString();
    property public final String key;
    field public static final com.apollographql.apollo.cache.normalized.CacheKey.Companion Companion;
    field public static final com.apollographql.apollo.cache.normalized.CacheKey NO_KEY;
  }

  public static final class CacheKey.Companion {
    method public com.apollographql.apollo.cache.normalized.CacheKey from(String key);
  }

  public abstract class CacheKeyResolver {
    ctor public CacheKeyResolver();
    method public abstract com.apollographql.apollo.cache.normalized.CacheKey fromFieldArguments(com.apollographql.apollo.api.ResponseField field, com.apollographql.apollo.api.Operation.Variables variables);
    method public abstract com.apollographql.apollo.cache.normalized.CacheKey fromFieldRecordSet(com.apollographql.apollo.api.ResponseField field, java.util.Map<java.lang.String,java.lang.Object> recordSet);
    method public static final com.apollographql.apollo.cache.normalized.CacheKey rootKeyForOperation(com.apollographql.apollo.api.Operation<?,?,?> operation);
    field public static final com.apollographql.apollo.cache.normalized.CacheKeyResolver.Companion Companion;
    field public static final com.apollographql.apollo.cache.normalized.CacheKeyResolver DEFAULT;
  }

  public static final class CacheKeyResolver.Companion {
    method public com.apollographql.apollo.cache.normalized.CacheKey rootKeyForOperation(com.apollographql.apollo.api.Operation<?,?,?> operation);
  }

  public final class CacheReference {
    ctor public CacheReference(String key);
    method public static boolean canDeserialize(String value);
    method public static com.apollographql.apollo.cache.normalized.CacheReference deserialize(String serializedCacheReference);
    method public boolean equals(Object? other);
    method public String getKey();
    method public int hashCode();
    method @Deprecated public String key();
    method public String serialize();
    method public String toString();
    property public final String key;
    field public static final com.apollographql.apollo.cache.normalized.CacheReference.Companion Companion;
  }

  public static final class CacheReference.Companion {
    method public boolean canDeserialize(String value);
    method public com.apollographql.apollo.cache.normalized.CacheReference deserialize(String serializedCacheReference);
  }

  public abstract class NormalizedCache {
    ctor public NormalizedCache();
    method public final com.apollographql.apollo.cache.normalized.NormalizedCache chain(com.apollographql.apollo.cache.normalized.NormalizedCache cache);
    method public abstract void clearAll();
    method public java.util.Map<kotlin.reflect.KClass<?>,java.util.Map<java.lang.String,com.apollographql.apollo.cache.normalized.Record>> dump();
    method public final com.apollographql.apollo.cache.normalized.NormalizedCache? getNextCache();
    method public abstract com.apollographql.apollo.cache.normalized.Record? loadRecord(String key, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public java.util.Collection<com.apollographql.apollo.cache.normalized.Record> loadRecords(java.util.Collection<java.lang.String> keys, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public java.util.Set<java.lang.String> merge(com.apollographql.apollo.cache.normalized.Record record, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public java.util.Set<java.lang.String> merge(java.util.Collection<com.apollographql.apollo.cache.normalized.Record> recordSet, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method protected abstract java.util.Set<java.lang.String> performMerge(com.apollographql.apollo.cache.normalized.Record apolloRecord, com.apollographql.apollo.cache.normalized.Record? oldRecord, com.apollographql.apollo.cache.CacheHeaders cacheHeaders);
    method public static final String prettifyDump(java.util.Map<kotlin.reflect.KClass<?>,? extends java.util.Map<java.lang.String,com.apollographql.apollo.cache.normalized.Record>> dump);
    method public final boolean remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey);
    method public abstract boolean remove(com.apollographql.apollo.cache.normalized.CacheKey cacheKey, boolean cascade);
    property public final com.apollographql.apollo.cache.normalized.NormalizedCache? nextCache;
    field public static final com.apollographql.apollo.cache.normalized.NormalizedCache.Companion Companion;
  }

  public static final class NormalizedCache.Companion {
    method public String prettifyDump(java.util.Map<kotlin.reflect.KClass<?>,? extends java.util.Map<java.lang.String,com.apollographql.apollo.cache.normalized.Record>> dump);
  }

  public abstract class NormalizedCacheFactory<T extends com.apollographql.apollo.cache.normalized.NormalizedCache> {
    ctor public NormalizedCacheFactory();
    method public final com.apollographql.apollo.cache.normalized.NormalizedCacheFactory<T> chain(com.apollographql.apollo.cache.normalized.NormalizedCacheFactory<?> factory);
    method public abstract T create(com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter recordFieldAdapter);
    method public final com.apollographql.apollo.cache.normalized.NormalizedCache createChain(com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter recordFieldAdapter);
  }

  public final class Record {
    method public static com.apollographql.apollo.cache.normalized.Record.Builder builder(String key);
    method @Deprecated public com.apollographql.apollo.cache.normalized.Record clone();
    method public Object? field(String fieldKey);
    method @Deprecated public java.util.Map<java.lang.String,java.lang.Object> fields();
    method public java.util.Map<java.lang.String,java.lang.Object> getFields();
    method public String getKey();
    method public java.util.UUID? getMutationId();
    method public boolean hasField(String fieldKey);
    method @Deprecated public String key();
    method public java.util.Set<java.lang.String> keys();
    method public java.util.Set<java.lang.String> mergeWith(com.apollographql.apollo.cache.normalized.Record otherRecord);
    method @Deprecated public java.util.UUID? mutationId();
    method public java.util.List<com.apollographql.apollo.cache.normalized.CacheReference> referencedFields();
    method @kotlin.jvm.Synchronized public int sizeEstimateBytes();
    method public com.apollographql.apollo.cache.normalized.Record.Builder toBuilder();
    method public String toString();
    property public final java.util.Map<java.lang.String,java.lang.Object> fields;
    property public final String key;
    property public final java.util.UUID? mutationId;
    field public static final com.apollographql.apollo.cache.normalized.Record.Companion Companion;
  }

  public static final class Record.Builder {
    ctor public Record.Builder(String key, java.util.Map<java.lang.String,?> fields, java.util.UUID? mutationId);
    method public com.apollographql.apollo.cache.normalized.Record.Builder addField(String key, Object? value);
    method public com.apollographql.apollo.cache.normalized.Record.Builder addFields(java.util.Map<java.lang.String,?> fields);
    method public com.apollographql.apollo.cache.normalized.Record build();
    method public String getKey();
    method @Deprecated public String key();
    method public com.apollographql.apollo.cache.normalized.Record.Builder mutationId(java.util.UUID? mutationId);
    property public final String key;
  }

  public static final class Record.Companion {
    method public com.apollographql.apollo.cache.normalized.Record.Builder builder(String key);
  }

  public final class RecordFieldJsonAdapter {
    ctor public RecordFieldJsonAdapter();
    method @Deprecated public static com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter create();
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public java.util.Map<java.lang.String,java.lang.Object>? from(String jsonFieldSource);
    method public String toJson(java.util.Map<java.lang.String,?> fields);
    field public static final com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter.Companion Companion;
  }

  public static final class RecordFieldJsonAdapter.Companion {
    method @Deprecated public com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter create();
  }

  public final class RecordSet {
    ctor public RecordSet();
    method public java.util.Collection<com.apollographql.apollo.cache.normalized.Record> allRecords();
    method public operator com.apollographql.apollo.cache.normalized.Record? get(String key);
    method public java.util.Set<java.lang.String> merge(com.apollographql.apollo.cache.normalized.Record apolloRecord);
  }

}

