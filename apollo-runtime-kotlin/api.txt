package com.apollographql.apollo {

  public final class ApolloBearerTokenException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloBearerTokenException(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getToken();
  }

  public abstract interface ApolloCall<T> {
    method public abstract error.NonExistentClass execute(error.NonExistentClass);
  }

  public final class ApolloClient {
    ctor public ApolloClient(com.apollographql.apollo.network.NetworkTransport, com.apollographql.apollo.network.NetworkTransport, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public <D, V> com.apollographql.apollo.ApolloMutationCall<D> mutate(error.NonExistentClass);
    method public <D, V> com.apollographql.apollo.ApolloQueryCall<D> query(error.NonExistentClass);
    method public <D, V> com.apollographql.apollo.ApolloQueryCall<D> subscribe(error.NonExistentClass);
  }

  public sealed abstract class ApolloException {
  }

  public final class ApolloHttpException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloHttpException(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getHeaders();
    method public error.NonExistentClass getStatusCode();
  }

  public abstract interface ApolloMutationCall<T> implements com.apollographql.apollo.ApolloCall {
  }

  public final class ApolloNetworkException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloNetworkException(error.NonExistentClass, error.NonExistentClass);
  }

  public final class ApolloParseException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloParseException(error.NonExistentClass, error.NonExistentClass);
  }

  public abstract interface ApolloQueryCall<T> implements com.apollographql.apollo.ApolloCall {
  }

  public final class ApolloSerializationException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloSerializationException(error.NonExistentClass, error.NonExistentClass);
  }

  public abstract interface ApolloSubscriptionCall<T> implements com.apollographql.apollo.ApolloCall {
  }

  public final class ApolloWebSocketException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloWebSocketException(error.NonExistentClass, error.NonExistentClass);
  }

  public final class ApolloWebSocketServerException extends com.apollographql.apollo.ApolloException {
    ctor public ApolloWebSocketServerException(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getPayload();
  }

}

package com.apollographql.apollo.dispatcher {

  public final class ApolloCoroutineDispatcherContext {
    ctor public ApolloCoroutineDispatcherContext(error.NonExistentClass);
    method public error.NonExistentClass getDefault();
    method public error.NonExistentClass getKey();
    property public error.NonExistentClass key;
    field public static final com.apollographql.apollo.dispatcher.ApolloCoroutineDispatcherContext.Key Key;
  }

  public static final class ApolloCoroutineDispatcherContext.Key {
    method public com.apollographql.apollo.dispatcher.ApolloCoroutineDispatcherContext.Key getKEY();
    property public final com.apollographql.apollo.dispatcher.ApolloCoroutineDispatcherContext.Key KEY;
  }

}

package com.apollographql.apollo.interceptor {

  public abstract interface ApolloInterceptorChain {
    method public abstract error.NonExistentClass canProceed();
    method public abstract <D> error.NonExistentClass proceed(com.apollographql.apollo.interceptor.ApolloRequest<D>);
  }

  public final class ApolloRequest<D> {
    ctor public ApolloRequest(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getExecutionContext();
    method public error.NonExistentClass getOperation();
    method public error.NonExistentClass getRequestUuid();
    method public error.NonExistentClass getScalarTypeAdapters();
    property public final error.NonExistentClass requestUuid;
  }

  public abstract interface ApolloRequestInterceptor {
    method public abstract <D> error.NonExistentClass intercept(com.apollographql.apollo.interceptor.ApolloRequest<D>, com.apollographql.apollo.interceptor.ApolloInterceptorChain);
  }

  public final class ApolloResponse<D> {
    ctor public ApolloResponse(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getExecutionContext();
    method public error.NonExistentClass getRequestUuid();
    method public error.NonExistentClass getResponse();
  }

  public final class BearerTokenInterceptor implements com.apollographql.apollo.interceptor.ApolloRequestInterceptor {
    ctor public BearerTokenInterceptor(com.apollographql.apollo.interceptor.TokenProvider);
    method public <D> error.NonExistentClass intercept(com.apollographql.apollo.interceptor.ApolloRequest<D>, com.apollographql.apollo.interceptor.ApolloInterceptorChain);
  }

  public final class NetworkRequestInterceptor implements com.apollographql.apollo.interceptor.ApolloRequestInterceptor {
    ctor public NetworkRequestInterceptor(com.apollographql.apollo.network.NetworkTransport, com.apollographql.apollo.network.NetworkTransport);
    method public <D> error.NonExistentClass intercept(com.apollographql.apollo.interceptor.ApolloRequest<D>, com.apollographql.apollo.interceptor.ApolloInterceptorChain);
  }

  public abstract interface TokenProvider {
    method public suspend abstract java.lang.Object currentToken(java.lang.Object);
    method public suspend abstract java.lang.Object refreshToken(error.NonExistentClass, java.lang.Object);
  }

}

package com.apollographql.apollo.network {

  public sealed abstract class HttpExecutionContext {
  }

  public static final class HttpExecutionContext.Request {
    ctor public HttpExecutionContext.Request(error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public com.apollographql.apollo.network.HttpExecutionContext.Request copy(error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getHeaders();
    method public error.NonExistentClass getKey();
    method public int hashCode();
    method public java.lang.String toString();
    property public error.NonExistentClass key;
    field public static final com.apollographql.apollo.network.HttpExecutionContext.Request.Key Key;
  }

  public static final class HttpExecutionContext.Request.Key {
  }

  public static final class HttpExecutionContext.Response {
    ctor public HttpExecutionContext.Response(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass component1();
    method public error.NonExistentClass component2();
    method public com.apollographql.apollo.network.HttpExecutionContext.Response copy(error.NonExistentClass, error.NonExistentClass);
    method public boolean equals(java.lang.Object);
    method public error.NonExistentClass getHeaders();
    method public error.NonExistentClass getKey();
    method public error.NonExistentClass getStatusCode();
    method public int hashCode();
    method public java.lang.String toString();
    property public error.NonExistentClass key;
    field public static final com.apollographql.apollo.network.HttpExecutionContext.Response.Key Key;
  }

  public static final class HttpExecutionContext.Response.Key {
  }

  public class HttpMethod {
    method public static com.apollographql.apollo.network.HttpMethod valueOf(java.lang.String);
    method public static final com.apollographql.apollo.network.HttpMethod[] values();
    enum_constant public static final com.apollographql.apollo.network.HttpMethod Get;
    enum_constant public static final com.apollographql.apollo.network.HttpMethod Post;
  }

  public final class IosPlatformKt {
    ctor public IosPlatformKt();
    method public static error.NonExistentClass toNSData(error.NonExistentClass);
  }

  public abstract interface NetworkTransport {
    method public abstract <D> error.NonExistentClass execute(com.apollographql.apollo.interceptor.ApolloRequest<D>, error.NonExistentClass);
  }

}

package com.apollographql.apollo.network.http {

  public final class ApolloHttpNetworkTransport implements com.apollographql.apollo.network.NetworkTransport {
    ctor public ApolloHttpNetworkTransport(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.network.HttpMethod, kotlin.jvm.functions.Function2<? super error.NonExistentClass, ? super kotlin.jvm.functions.Function3<? super error.NonExistentClass, ? super error.NonExistentClass, ? super error.NonExistentClass, ? extends error.NonExistentClass>, ? extends error.NonExistentClass>);
    ctor public ApolloHttpNetworkTransport(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.network.HttpMethod);
    method public <D> error.NonExistentClass execute(com.apollographql.apollo.interceptor.ApolloRequest<D>, error.NonExistentClass);
  }

  public static sealed abstract class ApolloHttpNetworkTransport.Result {
  }

  public static final class ApolloHttpNetworkTransport.Result.Failure extends com.apollographql.apollo.network.http.ApolloHttpNetworkTransport.Result {
    ctor public ApolloHttpNetworkTransport.Result.Failure(com.apollographql.apollo.ApolloException);
    method public com.apollographql.apollo.ApolloException getCause();
  }

  public static final class ApolloHttpNetworkTransport.Result.Success extends com.apollographql.apollo.network.http.ApolloHttpNetworkTransport.Result {
    ctor public ApolloHttpNetworkTransport.Result.Success(com.apollographql.apollo.interceptor.ApolloResponse<?>);
    method public com.apollographql.apollo.interceptor.ApolloResponse<?> getResponse();
  }

  public final class ApolloHttpNetworkTransport implements com.apollographql.apollo.network.NetworkTransport {
    ctor public ApolloHttpNetworkTransport(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.network.HttpMethod);
    ctor public ApolloHttpNetworkTransport(error.NonExistentClass, error.NonExistentClass, com.apollographql.apollo.network.HttpMethod);
    method public <D> error.NonExistentClass execute(com.apollographql.apollo.interceptor.ApolloRequest<D>, error.NonExistentClass);
  }

  public final class ApolloHttpNetworkTransportKt {
    ctor public ApolloHttpNetworkTransportKt();
  }

  public final class ApolloHttpNetworkTransportKt {
    ctor public ApolloHttpNetworkTransportKt();
  }

}

package com.apollographql.apollo.network.ws {

  public sealed abstract class ApolloGraphQLClientMessage {
    method public abstract error.NonExistentClass serialize();
  }

  public static final class ApolloGraphQLClientMessage.Init extends com.apollographql.apollo.network.ws.ApolloGraphQLClientMessage {
    ctor public ApolloGraphQLClientMessage.Init(error.NonExistentClass);
    method public error.NonExistentClass serialize();
  }

  public static final class ApolloGraphQLClientMessage.Start extends com.apollographql.apollo.network.ws.ApolloGraphQLClientMessage {
    ctor public ApolloGraphQLClientMessage.Start(com.apollographql.apollo.interceptor.ApolloRequest<?>);
    method public error.NonExistentClass serialize();
  }

  public static final class ApolloGraphQLClientMessage.Stop extends com.apollographql.apollo.network.ws.ApolloGraphQLClientMessage {
    ctor public ApolloGraphQLClientMessage.Stop(error.NonExistentClass);
    method public error.NonExistentClass serialize();
  }

  public static final class ApolloGraphQLClientMessage.Terminate extends com.apollographql.apollo.network.ws.ApolloGraphQLClientMessage {
    method public error.NonExistentClass serialize();
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLClientMessage.Terminate INSTANCE;
  }

  public sealed abstract class ApolloGraphQLServerMessage {
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.Companion Companion;
  }

  public static final class ApolloGraphQLServerMessage.Companion {
    method public com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage parse(error.NonExistentClass);
  }

  public static final class ApolloGraphQLServerMessage.Complete extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    ctor public ApolloGraphQLServerMessage.Complete(error.NonExistentClass);
    method public error.NonExistentClass getId();
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.Complete.Companion Companion;
    field public static final java.lang.String TYPE = "complete";
  }

  public static final class ApolloGraphQLServerMessage.Complete.Companion {
  }

  public static final class ApolloGraphQLServerMessage.ConnectionAcknowledge extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.ConnectionAcknowledge INSTANCE;
    field public static final java.lang.String TYPE = "connection_ack";
  }

  public static final class ApolloGraphQLServerMessage.ConnectionError extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    ctor public ApolloGraphQLServerMessage.ConnectionError(error.NonExistentClass);
    method public error.NonExistentClass getRawMessage();
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.ConnectionError.Companion Companion;
    field public static final java.lang.String TYPE = "connection_error";
  }

  public static final class ApolloGraphQLServerMessage.ConnectionError.Companion {
  }

  public static final class ApolloGraphQLServerMessage.ConnectionKeepAlive extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.ConnectionKeepAlive INSTANCE;
    field public static final java.lang.String TYPE = "ka";
  }

  public static final class ApolloGraphQLServerMessage.Data extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    ctor public ApolloGraphQLServerMessage.Data(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getId();
    method public error.NonExistentClass getPayload();
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.Data.Companion Companion;
    field public static final java.lang.String TYPE = "data";
  }

  public static final class ApolloGraphQLServerMessage.Data.Companion {
  }

  public static final class ApolloGraphQLServerMessage.Error extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    ctor public ApolloGraphQLServerMessage.Error(error.NonExistentClass, error.NonExistentClass);
    method public error.NonExistentClass getId();
    method public error.NonExistentClass getPayload();
    field public static final com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage.Error.Companion Companion;
    field public static final java.lang.String TYPE = "error";
  }

  public static final class ApolloGraphQLServerMessage.Error.Companion {
  }

  public static final class ApolloGraphQLServerMessage.Unsupported extends com.apollographql.apollo.network.ws.ApolloGraphQLServerMessage {
    ctor public ApolloGraphQLServerMessage.Unsupported(error.NonExistentClass);
    method public error.NonExistentClass getRawMessage();
  }

  public final class ApolloWebSocketFactory implements com.apollographql.apollo.network.ws.WebSocketFactory {
    ctor public ApolloWebSocketFactory(error.NonExistentClass, error.NonExistentClass, kotlin.jvm.functions.Function2<? super error.NonExistentClass, ? super com.apollographql.apollo.network.ws.WebSocketConnectionListener, ? extends error.NonExistentClass>);
    ctor public ApolloWebSocketFactory(error.NonExistentClass, error.NonExistentClass);
    method public suspend java.lang.Object open(error.NonExistentClass, java.lang.Object);
  }

  public final class ApolloWebSocketFactory implements com.apollographql.apollo.network.ws.WebSocketFactory {
    ctor public ApolloWebSocketFactory(error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    ctor public ApolloWebSocketFactory(error.NonExistentClass, error.NonExistentClass);
    method public suspend java.lang.Object open(error.NonExistentClass, java.lang.Object);
  }

  public final class ApolloWebSocketKt {
    ctor public ApolloWebSocketKt();
  }

  public final class ApolloWebSocketNetworkTransport implements com.apollographql.apollo.network.NetworkTransport {
    ctor public ApolloWebSocketNetworkTransport(com.apollographql.apollo.network.ws.WebSocketFactory, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass, error.NonExistentClass);
    method public <D> error.NonExistentClass execute(com.apollographql.apollo.interceptor.ApolloRequest<D>, error.NonExistentClass);
  }

  public abstract interface WebSocketConnection {
    method public abstract void close();
    method public abstract void send(error.NonExistentClass);
  }

  public abstract interface WebSocketConnectionListener {
    method public abstract void onClose(error.NonExistentClass, error.NonExistentClass);
    method public abstract void onOpen(error.NonExistentClass);
  }

  public abstract interface WebSocketFactory {
    method public suspend abstract java.lang.Object open(error.NonExistentClass, java.lang.Object);
  }

}

