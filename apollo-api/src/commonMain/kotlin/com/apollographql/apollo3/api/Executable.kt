package  com.apollographql.apollo3.api

import com.apollographql.apollo3.api.internal.json.BufferedSinkJsonWriter
import com.apollographql.apollo3.api.internal.json.MapJsonWriter
import com.apollographql.apollo3.api.json.JsonWriter
import okio.Buffer

interface Executable<D: Executable.Data> {
  /**
   * The [Adapter] that maps the server response data to/from generated model class [D].
   *
   * This is the low-level API generated by the compiler. Use [parseResponseBody] and [composeResponseBody] extension functions for a higher level API
   */
  fun adapter(): Adapter<D>

  /**
   * Serializes the variables of this operation to a json
   */
  fun serializeVariables(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters)

  /**
   * A list of [FieldSet]. Used when reading from the cache and/or normalizing a model.
   * Use [com.apollographql.apollo3.cache.normalized.Store.readOperation] for a higher level API
   */
  fun fieldSets(): List<FieldSet>

  /**
   * Marker interface for generated models
   */
  interface Data

  /**
   * A helper class to hold variables
   */
  class Variables(val valueMap: Map<String, Any?>)
}

@Suppress("UNCHECKED_CAST")
fun <D : Operation.Data> Operation<D>.variables(customScalarAdapters: CustomScalarAdapters): Executable.Variables {
  val valueMap = MapJsonWriter().apply {
    beginObject()
    serializeVariables(this, customScalarAdapters)
    endObject()
  }.root() as Map<String, Any?>
  return Executable.Variables(valueMap)
}

@Suppress("UNCHECKED_CAST")
fun <D : Fragment.Data> Fragment<D>.variables(customScalarAdapters: CustomScalarAdapters): Executable.Variables {
  val valueMap = MapJsonWriter().apply {
    beginObject()
    serializeVariables(this, customScalarAdapters)
    endObject()
  }.root() as Map<String, Any?>
  return Executable.Variables(valueMap)
}

fun <D : Operation.Data> Operation<D>.variablesJson(customScalarAdapters: CustomScalarAdapters): String {
  val buffer = Buffer()
  BufferedSinkJsonWriter(buffer).apply {
    beginObject()
    serializeVariables(this, customScalarAdapters)
    endObject()
  }
  return buffer.readUtf8()
}

fun <D : Fragment.Data> Fragment<D>.variablesJson(customScalarAdapters: CustomScalarAdapters): String {
  val buffer = Buffer()
  BufferedSinkJsonWriter(buffer).apply {
    beginObject()
    serializeVariables(this, customScalarAdapters)
    endObject()
  }
  return buffer.readUtf8()
}
